<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on bacchanalian madness</title>
    <link>https://brongulus.github.io/notes/</link>
    <description>Recent content in Notes on bacchanalian madness</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jun 2025 12:16:24 +0530</lastBuildDate>
    <atom:link href="https://brongulus.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Scaling Recommender Flow</title>
      <link>https://brongulus.github.io/notes/recommender/</link>
      <pubDate>Wed, 04 Jun 2025 12:16:24 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/recommender/</guid>
      <description>--- title: ScaleSim config: layout: elk --- stateDiagram-v2 runScaleSim --&amp;gt; syncVirtualCluster : Creates NS, PC, Pods &amp;amp; Nodes&amp;lt;br/&amp;gt;Schedules any pods that can be syncVirtualCluster --&amp;gt; runSimulation : Posts the ClusterSnapshot on the recommender endpoint --- title: handler.run config: layout: elk --- stateDiagram-v2 state &amp;#34;initializeRecommender&amp;#34; as iR { [*] --&amp;gt; createPods : podName-count using Builder createPods --&amp;gt; createNodesFromNT : nodeName-count createNodesFromNT --&amp;gt; splitPods : Into unscheduled and scheduled splitPods --&amp;gt; deployNodes : initializeCluster deployNodes --&amp;gt; deployScheduledPods } parseSnapshot --&amp;gt; parsePriorities parsePriorities --&amp;gt; createSimulationRequest : For each unscheduled pod createSimulationRequest --&amp;gt; iR iR --&amp;gt; runRecommenderForPC : has PCs iR --&amp;gt; runRecommenderForCS : no PC runRecommenderForPC --&amp;gt; applyRecommendation runRecommenderForCS --&amp;gt; applyRecommendation applyRecommendation --&amp;gt; JSONResponse --- title: recommender.</description>
    </item>
    <item>
      <title>2 Fast 2 MCM</title>
      <link>https://brongulus.github.io/notes/2fast2mcm/</link>
      <pubDate>Wed, 15 Jan 2025 00:07:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/2fast2mcm/</guid>
      <description>These visual representations helps understand the complex workflows within the Machine Controller Manager.&#xA;Machine Controller Manager Architecture The system consists of three main controllers working in concert Each controller handles specific aspects of machine lifecycle management Interfaces with both cloud providers and Kubernetes clusters Manages the full lifecycle of machines from creation to deletion Let&amp;rsquo;s start with an overview of the main components and their interactions:&#xA;stateDiagram-v2 direction TB state &amp;#34;Machine Controller Manager&amp;#34; as MCM { state &amp;#34;Machine Controller&amp;#34; as MC state &amp;#34;Safety Controller&amp;#34; as SC state &amp;#34;MCM Controller&amp;#34; as MCMC [*] --&amp;gt; MC [*] --&amp;gt; SC [*] --&amp;gt; MCMC } state &amp;#34;Cloud Provider&amp;#34; as CP { VMs API } state &amp;#34;Kubernetes Cluster&amp;#34; as K8S { state &amp;#34;Control Plane&amp;#34; as CP_K8S { API_Server etcd } state &amp;#34;Node Components&amp;#34; as NC { kubelet container_runtime } } MCM --&amp;gt; CP : Manages VMs MCM --&amp;gt; K8S : Manages Nodes note right of MCM Handles: - Machine lifecycle - Safety checks - Deployments/Sets end note Machine Controller Core Flows Now, let&amp;rsquo;s dive into the Machine Controller&amp;rsquo;s core reconciliation flows for different resources.</description>
    </item>
    <item>
      <title>MCM</title>
      <link>https://brongulus.github.io/notes/20241129t160749--mcm__k8s_sap_work/</link>
      <pubDate>Fri, 29 Nov 2024 16:07:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/20241129t160749--mcm__k8s_sap_work/</guid>
      <description>First, go through the README, later on check local setup guide as well.&#xA;Components Check CRDs present in the MCM tree&#xA;All the below class diagrams omit TypeMeta and ObjectMeta for brevity.&#xA;Machine --- title: Machine config: class: hideEmptyMembersBox: true --- %%{init: { &amp;#39;themeVariables&amp;#39;: { &amp;#39;lineColor&amp;#39;: &amp;#39;#51565b&amp;#39;}}}%% classDiagram %% note &amp;#34;apiVersion, kind &amp;amp; metadata components have not been shown&amp;#34; %% Machine --------------------------------- note for Machine &amp;#34;Representation of a physical or virtual machine that corresponds to a front-end kubernetes node object&amp;#34; Machine &amp;lt;|-- MachineSpec Machine &amp;lt;|-- MachineStatus class Machine{ MachineSpec spec MachineStatus status } %%-- MachineSpec &amp;lt;|-- ClassSpec MachineSpec &amp;lt;|-- MachineConfiguration MachineSpec &amp;lt;|-- NodeTemplateSpec class MachineSpec{ ClassSpec class string providerID NodeTemplateSpec nodeTemplate MachineConfiguration MachineConfiguration } class ClassSpec{ string apiGroup string kind string name } note for ClassSpec &amp;#34;Refers to the MachineClass template for the Machine&amp;#34; class NodeTemplateSpec{ string podCIDR: IP range []string podCIDRs string providerID bool unschedulable []taint taints } note for NodeTemplateSpec &amp;#34;Actually part of NodeSpec which is a field in NodeTemplateSpec&amp;#34; class MachineConfiguration{ v1.</description>
    </item>
    <item>
      <title>Docker Kubernetes Notes</title>
      <link>https://brongulus.github.io/notes/20241108t095209--docker-k8s-training__k8s_sap/</link>
      <pubDate>Fri, 08 Nov 2024 09:52:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/20241108t095209--docker-k8s-training__k8s_sap/</guid>
      <description>Docker A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. The Linux kernel does not know about containers at all – for it, containers are nothing more than just regular processes running on the system. It however offers several features that Docker and other container engines leverage to achieve an almost complete isolation of processes from each other.</description>
    </item>
    <item>
      <title>Hangul</title>
      <link>https://brongulus.github.io/notes/korean/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/korean/</guid>
      <description>Hangul is one of the easiest character form to learn, in fact people proclaim it can be learnt in under an hour with the help of easy mnemonics, let&amp;rsquo;s see how.&#xA;I still have to cover more vowels and add tips for pronounciation which I&amp;rsquo;ll add soon.™&#xA;Consonants Consonant Pron. Mnemonic Aspirated Pron. Mnemonic ㅂ b bucket ㅍ p part II/pi ㄷ d door ㅌ t two doors ㄱ g gun ㅋ k kill ㅈ j (jug) ㅊ ch church Consonant Pron.</description>
    </item>
    <item>
      <title>Elements of computing systems</title>
      <link>https://brongulus.github.io/notes/elements-of-computing-systems/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/elements-of-computing-systems/</guid>
      <description>Introduction These are the notes which I took while studying computer architecture from the textbook &amp;ldquo;The Elements of Computing Systems by Noam Nisan &amp;amp; Shimon Schocken &amp;ldquo;. They&amp;rsquo;re very terse and have very opinionated content from the textbook so they should only be used in tandem with it for revision purposes. The text program is parsed, its semantics are uncovered, it&amp;rsquo;s represented in some low-level language that the computer can understand.</description>
    </item>
    <item>
      <title>IUSACO</title>
      <link>https://brongulus.github.io/notes/iusaco-notes/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/iusaco-notes/</guid>
      <description>Input and Output #include &amp;lt;cstdio&amp;gt; using namespace std; int main() { freopen(&amp;#34;template.in&amp;#34;, &amp;#34;r&amp;#34;, stdin); freopen(&amp;#34;template.out&amp;#34;, &amp;#34;w&amp;#34;, stdout); } When using C++, arrays should be declared globally, or initialized to zeros if declared locally to avoid garbage values. 32bit int: \(\pm 2\times10^{9}\) v/s 64bit int: \(\pm 9\times 10^{18}\) Complexity and algorithm analysis Elementary mathematical calculation: O(1) Unordered set/map: O(1) per operation Binary Search: O(log n) Ordered set/map or Priority Queue: O(log n) per operation Prime factorization or primality check for int: \(O(\sqrt{n})\) Reading n inputs: O(n) Iterating through n element array: O(n) Sorting: Usually O(n log n) for std::sort() Iterating through all subsets of size k of input elements: O(\(n^{k}\) ), for triplets O(\(n^{3}\)) Iterating through all subsets: O(\(2^{n}\)) Iterating through all permutations: O(n!</description>
    </item>
    <item>
      <title>Meditations</title>
      <link>https://brongulus.github.io/notes/meditations/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0530</pubDate>
      <guid>https://brongulus.github.io/notes/meditations/</guid>
      <description>Book 2: On the River Gran, Among the Quadi And so none of them can hurt me. No one can implicate me in ugliness. Nor can I feel angry at my relative, or hate him. We were born to work together like feet, hands, and eyes, like the two rows of teeth, upper and lower. To obstruct each other is unnatural. To feel anger at someone, to turn your back on him: these are obstructions.</description>
    </item>
  </channel>
</rss>
