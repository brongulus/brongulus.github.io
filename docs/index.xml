<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>bacchanalian madness</title>
    <link>https://brongulus.github.io/</link>
    <description>Recent content on bacchanalian madness</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Apr 2025 09:04:42 +0530</lastBuildDate><atom:link href="https://brongulus.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tracker</title>
      <link>https://brongulus.github.io/meta/record/</link>
      <pubDate>Mon, 28 Apr 2025 09:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/meta/record/</guid>
      <description>&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2025&lt;/td&gt;
&lt;td&gt;Courage to be disliked&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;media&#34;&gt;Media&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Time&lt;/th&gt;
&lt;th&gt;Title&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2025&lt;/td&gt;
&lt;td&gt;Bojack Horseman&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr 2025&lt;/td&gt;
&lt;td&gt;Rehearsal&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;music&#34;&gt;Music&lt;/h2&gt;
&lt;h3 id=&#34;april-2025&#34;&gt;April 2025&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Artist&lt;/th&gt;
&lt;th&gt;Work&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Pigbag&lt;/td&gt;
&lt;td&gt;Papa&amp;rsquo;s Got a Brand New Pigbag&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Imogen Heap&lt;/td&gt;
&lt;td&gt;Headlock&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bang Gang&lt;/td&gt;
&lt;td&gt;The World is Gray&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Nat King Cole&lt;/td&gt;
&lt;td&gt;Smile&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Wisp&lt;/td&gt;
&lt;td&gt;Enough for you&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>2 Fast 2 MCM</title>
      <link>https://brongulus.github.io/notes/2fast2mcm/</link>
      <pubDate>Wed, 15 Jan 2025 00:07:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/2fast2mcm/</guid>
      <description>&lt;p&gt;These visual representations helps understand the complex workflows within the Machine Controller Manager.&lt;/p&gt;
&lt;h2 id=&#34;machine-controller-manager-architecture&#34;&gt;Machine Controller Manager Architecture&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The system consists of three main controllers working in concert&lt;/li&gt;
&lt;li&gt;Each controller handles specific aspects of machine lifecycle management&lt;/li&gt;
&lt;li&gt;Interfaces with both cloud providers and Kubernetes clusters&lt;/li&gt;
&lt;li&gt;Manages the full lifecycle of machines from creation to deletion&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s start with an overview of the main components and their interactions:&lt;/p&gt;
&lt;pre class=&#34;mermaid&#34;&gt;stateDiagram-v2
    direction TB
    
    state &amp;#34;Machine Controller Manager&amp;#34; as MCM {
        state &amp;#34;Machine Controller&amp;#34; as MC
        state &amp;#34;Safety Controller&amp;#34; as SC
        state &amp;#34;MCM Controller&amp;#34; as MCMC
        
        [*] --&amp;gt; MC
        [*] --&amp;gt; SC
        [*] --&amp;gt; MCMC
    }
    
    state &amp;#34;Cloud Provider&amp;#34; as CP {
        VMs
        API
    }
    
    state &amp;#34;Kubernetes Cluster&amp;#34; as K8S {
        state &amp;#34;Control Plane&amp;#34; as CP_K8S {
            API_Server
            etcd
        }
        
        state &amp;#34;Node Components&amp;#34; as NC {
            kubelet
            container_runtime
        }
    }
    
    MCM --&amp;gt; CP : Manages VMs
    MCM --&amp;gt; K8S : Manages Nodes
    
    note right of MCM
        Handles:
        - Machine lifecycle
        - Safety checks
        - Deployments/Sets
    end note
&lt;/pre&gt;

&lt;h2 id=&#34;machine-controller-core-flows&#34;&gt;Machine Controller Core Flows&lt;/h2&gt;
&lt;p&gt;Now, let&amp;rsquo;s dive into the Machine Controller&amp;rsquo;s core reconciliation flows for different resources. It handles three main types of reconciliation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Secret Reconciliation: Manages secrets referenced by MachineClasses&lt;/li&gt;
&lt;li&gt;MachineClass Reconciliation: Handles machine class lifecycle&lt;/li&gt;
&lt;li&gt;Machine Reconciliation: Core machine lifecycle management&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;Machine Controller&amp;#34; as MC {
        state &amp;#34;Secret Reconciliation&amp;#34; as SR {
            [*] --&amp;gt; FetchSecret
            FetchSecret --&amp;gt; GetMachineClass
            GetMachineClass --&amp;gt; CheckReferences
            CheckReferences --&amp;gt; FinalizerAdd : Has References
            CheckReferences --&amp;gt; FinalizerRemove : No References
            FinalizerAdd --&amp;gt; [*]
            FinalizerRemove --&amp;gt; [*]
        }

        state &amp;#34;MachineClass Reconciliation&amp;#34; as MCR {
            [*] --&amp;gt; FetchClass
            FetchClass --&amp;gt; GetMachines
            GetMachines --&amp;gt; CheckMachines
            CheckMachines --&amp;gt; AddFinalizer : Has Machines
            CheckMachines --&amp;gt; RemoveFinalizer : No Machines
            AddFinalizer --&amp;gt; EnqueueMachines
            EnqueueMachines --&amp;gt; [*]
            RemoveFinalizer --&amp;gt; [*]
        }

        state &amp;#34;Machine Reconciliation&amp;#34; as MR {
            [*] --&amp;gt; FetchMachine
            FetchMachine --&amp;gt; CheckFrozen
            
            CheckFrozen --&amp;gt; ValidateMachine : Not Frozen
            CheckFrozen --&amp;gt; RetryLater : Frozen
            
            ValidateMachine --&amp;gt; ValidateMachineClass
            VaildateMachineClass --&amp;gt; DeletionTimestamp

            DeletionTimestamp --&amp;gt; DeletionFlow : Deletion Requested
            DeletionTimestamp --&amp;gt; AddFinalizers : No Deletion
            
            AddFinalizers --&amp;gt; CheckPhase&amp;amp;NodeLabel
            
            CheckPhase&amp;amp;NodeLabel --&amp;gt; ReconcileHealth : Has Node &amp;amp; Non-empty phase
            CheckPhase&amp;amp;NodeLabel --&amp;gt; CreationFlow : No Node or&amp;lt;br/&amp;gt;CrashLoopBackOff&amp;lt;br/&amp;gt;or EmptyPhase
            
            ReconcileHealth --&amp;gt; SyncNodeName
            SyncNodeName --&amp;gt; SyncTemplates
            SyncTemplates --&amp;gt; [*]
            
            CreationFlow --&amp;gt; [*]
            DeletionFlow --&amp;gt; [*]
        }
    }
&lt;/pre&gt;

&lt;h3 id=&#34;machine-creation&#34;&gt;Machine Creation&lt;/h3&gt;
&lt;p&gt;Machine Creation Flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complex process involving multiple status checks&lt;/li&gt;
&lt;li&gt;Handles initialization and error cases&lt;/li&gt;
&lt;li&gt;Includes node verification and cleanup of stale resources&lt;/li&gt;
&lt;li&gt;Multiple retry mechanisms for resilience&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    look: handDrawn
---
stateDiagram-v2
    classDef imp font-weight:bold,stroke-width:5px;
        state &amp;#34;From &amp;lt;u&amp;gt;CreateResponse&amp;lt;/u&amp;gt;: Assign Node Name &amp;amp; ProviderID&amp;#34; as ANPIDCMR
        state &amp;#34;From &amp;lt;u&amp;gt;GetMachineStatusResponse&amp;lt;/u&amp;gt;: Assign Node Name &amp;amp; ProviderID&amp;#34; as ANPIDGMS
        state &amp;#34;From &amp;lt;u&amp;gt;GetMachineStatusResponse&amp;lt;/u&amp;gt;: Assign Node Name &amp;amp; ProviderID&amp;#34; as ANPIDGMSR
        state &amp;#34;Assign Node Name&amp;lt;br/&amp;gt;from Machine label&amp;#34; as ANML
        state &amp;#34;Phase: &amp;lt;i&amp;gt;Pending&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;State: &amp;lt;i&amp;gt;Processing&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;OpType: Create&amp;#34; as CPPP
        state &amp;#34;State: &amp;lt;i&amp;gt;Failed&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;OpType: &amp;lt;i&amp;gt;Create&amp;lt;/i&amp;gt;&amp;#34; as SFFF
        
        [*] --&amp;gt; AddBootToken&amp;amp;MachineName
        AddBootToken&amp;amp;MachineName --&amp;gt; GetMachineStatus:::imp
        
        GetMachineStatus:::imp --&amp;gt; ANPIDGMS : Success
        ANPIDGMS --&amp;gt; UpdateAnnotationsLabels
        UpdateAnnotationsLabels --&amp;gt; CPPP : Phase &amp;lt;i&amp;gt;&amp;#34;&amp;#34;(empty) or CrashLoopBackOff&amp;lt;/i&amp;gt;
        CPPP --&amp;gt; StatusUpdate
        StatusUpdate --&amp;gt; [*]
        
        GetMachineStatus:::imp --&amp;gt; CheckNodeExists : NotFound or Unimplemented
        CheckNodeExists --&amp;gt; ANML : Node Exists
        ANML --&amp;gt; UpdateAnnotationsLabels
        
        CheckNodeExists --&amp;gt; CreateMachine:::imp : No Node
        CreateMachine:::imp --&amp;gt; ANPIDCMR : Successful creation
        CreateMachine:::imp --&amp;gt; CheckFailurePhase : Creation Error
        ANPIDCMR --&amp;gt; SetUninitialized : Node name is Machine Name
        SetUninitialized --&amp;gt; UpdateAnnotationLabel
        UpdateAnnotationLabel --&amp;gt; InitializeMachine:::imp
        InitializeMachine:::imp --&amp;gt; [*]
        
        ANPIDCMR --&amp;gt; DeleteMachine:::imp : &amp;lt;u&amp;gt;Stale Node&amp;lt;/u&amp;gt;&amp;lt;br/&amp;gt;NodeName is not MachineName
        DeleteMachine:::imp --&amp;gt; SFFF: &amp;#34;VM using old node obj&amp;#34;
        
        GetMachineStatus:::imp --&amp;gt; ANPIDGMSR : Uninitialized
        ANPIDGMSR --&amp;gt; SetUninitialized
        
        GetMachineStatus:::imp --&amp;gt; CheckFailurePhase : Other Errors
        CheckFailurePhase --&amp;gt; Failed : Timeout
        CheckFailurePhase --&amp;gt; CrashLoopBackOff : Not timed out
        Failed --&amp;gt; SFFF
        CrashLoopBackOff --&amp;gt; SFFF
        
        SFFF --&amp;gt; [*]
&lt;/pre&gt;

&lt;h3 id=&#34;health-check&#34;&gt;Health Check&lt;/h3&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;Health Reconciliation&amp;#34; as HR {
        state &amp;#34;Phase: &amp;lt;i&amp;gt;Unknown&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;State: &amp;lt;i&amp;gt;Processing&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;LastOp: &amp;lt;i&amp;gt;HealthChk&amp;lt;/i&amp;gt;&amp;#34; as PUSP
        state &amp;#34;Phase: &amp;lt;i&amp;gt;Failed&amp;lt;/i&amp;gt;&amp;lt;br/&amp;gt;State: &amp;lt;i&amp;gt;Failed&amp;lt;/i&amp;gt;&amp;#34; as PFSF
        state &amp;#34;LastOp State: Successful&amp;lt;br/&amp;gt;Phase: Running&amp;#34; as SSPR

        [*] --&amp;gt; GetMachineNode
        GetMachineNode --&amp;gt; PUSP : Not Found &amp;amp; RunningPhase&amp;lt;br/&amp;gt;Node object missing
        GetMachineNode --&amp;gt; Found

        Found --&amp;gt; MachineCondSetToNodeCond : NodeCondition != MachineCondition
        Found --&amp;gt; isHealthy : TODO (isHealthy)

        GetMachineNode --&amp;gt; CreationTimeout : PendingPhase
        GetMachineNode --&amp;gt; HealthTimeout : UnknownPhase

        CreationTimeout --&amp;gt; PFSF : Now - LastUpdateTime &amp;gt; Timeout
        HealthTimeout --&amp;gt; GetDeploymentName : Now - LastUpdateTime &amp;gt; Timeout
        CreationTimeout --&amp;gt; EnqueueAfter : Not timed out
        HealthTimeout --&amp;gt; EnqueueAfter : Not timed out


        GetDeploymentName --&amp;gt; RegisterPermit
        RegisterPermit --&amp;gt; TryMarkingMachineFailed
        TryMarkingMachineFailed --&amp;gt; InProgressMachines++ : Phase not&amp;lt;br/&amp;gt;Unknown or Running&amp;lt;br/&amp;gt;Machines &amp;#34;getting replaced&amp;#34;
        InProgressMachines++ --&amp;gt; PFSF:  InProgressMachines &amp;lt; MaxReplacements(1)

        MachineCondSetToNodeCond --&amp;gt; isHealthy
        isHealthy --&amp;gt; PUSP: Not Healthy &amp;amp; RunningPhase
        isHealthy --&amp;gt; CheckLastOp : Healthy &amp;amp; NotRunningPhase &amp;amp;&amp;lt;br/&amp;gt;NoCriticalComponentNotReadyTaint

        CheckLastOp --&amp;gt; DeleteBootstrapToken: TypeCreate &amp;amp;&amp;lt;br/&amp;gt; State is not Successful&amp;lt;br/&amp;gt;(Machine creation happened)
        CheckLastOp --&amp;gt; LastOpType=HealthChk: Not Create&amp;lt;br/&amp;gt;(Machine re-joined)

        DeleteBootstrapToken --&amp;gt; SSPR
        LastOpType=HealthChk --&amp;gt; SSPR

        SSPR --&amp;gt; UpdateStatus
        PUSP --&amp;gt; UpdateStatus
        PFSF --&amp;gt; UpdateStatus

        UpdateStatus --&amp;gt; [*]
        EnqueueAfter --&amp;gt; [*]
    }       
&lt;/pre&gt;

&lt;h3 id=&#34;machine-deletion&#34;&gt;Machine Deletion&lt;/h3&gt;
&lt;p&gt;Machine Deletion Flow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Carefully orchestrated process to ensure clean resource cleanup&lt;/li&gt;
&lt;li&gt;Involves multiple phases from drain to final cleanup&lt;/li&gt;
&lt;li&gt;Handles volume attachments and node cleanup&lt;/li&gt;
&lt;li&gt;Includes finalizer management for resource protection&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;Deletion Flow&amp;#34; as DF {
        direction LR
        state &amp;#34;ProcessPhase&amp;#34; as PP
        state &amp;#34;UpdateStatus&amp;#34; as US

        [*] --&amp;gt; CheckFinalizers
        CheckFinalizers --&amp;gt; SetTerminating
        SetTerminating --&amp;gt; PP

        PP --&amp;gt; GetVMStatus
        GetVMStatus --&amp;gt; [*]
        PP --&amp;gt; InitiateDrain
        InitiateDrain --&amp;gt; [*]
        PP --&amp;gt; DeleteVolumeAttachments
        DeleteVolumeAttachments --&amp;gt; [*]
        PP --&amp;gt; InitiateVMDeletion
        InitiateVMDeletion --&amp;gt; [*]
        PP --&amp;gt; InitiateNodeDeletion
        InitiateNodeDeletion --&amp;gt; [*]
        PP --&amp;gt; RemoveFinalizers
        RemoveFinalizers --&amp;gt; [*]
        PP --&amp;gt; US
        US --&amp;gt; [*]
    }
&lt;/pre&gt;

&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;Initiate Drain&amp;#34; as ND {
        [*] --&amp;gt; ValidateNode
        state &amp;#34;UpdateStatus&amp;#34; as USD
        state &amp;#34;State: Processing&amp;lt;br/&amp;gt;Type: Delete&amp;#34; as SPTD
        state &amp;#34;CheckNodeCondition&amp;lt;br/&amp;gt;&amp;#39;Ready&amp;#39; or &amp;#39;Read-only FS&amp;#39;&amp;#34; as CNC
        state &amp;#34;Phase is not Terminating&amp;#34; as NAT
        state &amp;#34;Terminating&amp;lt;br/&amp;gt;Reason: Unhealthy&amp;#34; as TRU
        state &amp;#34;Terminating&amp;lt;br/&amp;gt;Reason: ScaleDown&amp;#34; as TRSD
        state &amp;#34;SkipDrain&amp;lt;br/&amp;gt;State: Failed&amp;#34; as CUFail
        state &amp;#34;State: Processing&amp;lt;br/&amp;gt;Desc: DelVolAttachments&amp;#34; as SPDDVA
        state &amp;#34;State: Processing&amp;lt;br/&amp;gt;Desc: InitVMDeletion&amp;#34; as SPDIVD
        state &amp;#34;State: Failed&amp;lt;br/&amp;gt;Desc: InitiateDrain&amp;#34; as SFDID

        ValidateNode --&amp;gt; SPTD : NodeName is empty
        SPTD --&amp;gt; USD
        ValidateNode --&amp;gt; CNC
        CNC --&amp;gt; ForceDeletion : Read-Only/NotReady &amp;amp;&amp;lt;br/&amp;gt;Last-transition Timeout
        CNC --&amp;gt; NormalDrain : Healthy
        CNC --&amp;gt; ForceDeletion : &amp;#34;force-delete&amp;#34; label on machine or Drain&amp;lt;br/&amp;gt; Timeout on deletion

        ForceDeletion --&amp;gt; UpdateTerminationCondition
        NormalDrain --&amp;gt; UpdateTerminationCondition

        UpdateTerminationCondition --&amp;gt; RunDrain : Phase is empty or CrashLoopBackOff
        UpdateTerminationCondition --&amp;gt; NAT : Non-creation Phase
        NAT --&amp;gt; TRU : Phase is failed
        NAT --&amp;gt; TRSD : Phase not failed
        TRU --&amp;gt; TerminationConditionUpdate
        TRSD --&amp;gt; TerminationConditionUpdate

        TerminationConditionUpdate --&amp;gt; CUFail : Update failure&amp;lt;br/&amp;gt;during NormalDrain
        TerminationConditionUpdate --&amp;gt; RunDrain : Update failure&amp;lt;br/&amp;gt;during ForceDeletion
        TerminationConditionUpdate --&amp;gt; RunDrain : Update Successful
        CUFail --&amp;gt; USD

        RunDrain --&amp;gt; SPDDVA : Drain successful&amp;lt;br/&amp;gt;during ForceDeletion
        RunDrain --&amp;gt; SPDIVD : Drain successful&amp;lt;br/&amp;gt;during NormalDrain
        RunDrain --&amp;gt; SPDDVA : Drain failed&amp;lt;br/&amp;gt;&amp;#34;force-delete&amp;#34; label present
        RunDrain --&amp;gt; SFDID : Drain failed&amp;lt;br/&amp;gt;&amp;#34;force-delete&amp;#34; label absent

        SPDDVA --&amp;gt; USD
        SPDIVD --&amp;gt; USD
        SFDID --&amp;gt; USD

        USD --&amp;gt; [*]
    }
&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s visualize the Node Drain process, which is a critical part of machine deletion:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sophisticated pod eviction handling&lt;/li&gt;
&lt;li&gt;Supports both forced and normal drain scenarios&lt;/li&gt;
&lt;li&gt;Handles PDB (Pod Disruption Budget) violations&lt;/li&gt;
&lt;li&gt;Includes parallel and serial eviction strategies&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;RunDrain&amp;#34; as Normal {
        state &amp;#34;CordonNode (Sealing off)&amp;lt;br/&amp;gt;(Set Unschedulable to true)&amp;#34; as CN
        [*] --&amp;gt; CN
        CN --&amp;gt; WaitForPodCacheSync
        WaitForPodCacheSync --&amp;gt; GetPodsForDeletion : TODO
        
        %% http://localhost:3000/machine-controller/node_drain.html#drainoptionsgetpodsfordeletion
        %% mirrorPodFilter: pod doesnt have MirrorPodAnnotation (set by kubelet when creating mirror pods)
        %% localStorageFilter
        %% unreplicatedFilter
        %% daemonSetFilter
        
        GetPodsForDeletion --&amp;gt; DeleteOrEvictPods

        DeleteOrEvictPods --&amp;gt; UpdateNodeCondition
        UpdateNodeCondition --&amp;gt; [*]
        
        state &amp;#34;DeleteOrEvictPods&amp;#34; as EP {
            [*] --&amp;gt; CheckEvictionSupport

            CheckEvictionSupport --&amp;gt; ParallelEviction : ForceDeletion
            CheckEvictionSupport --&amp;gt; MixedEviction : NormalDrain

            MixedEviction --&amp;gt; ParallelEvictNoPV
            MixedEviction --&amp;gt; SerialEvictWithPV

            ParallelEvictNoPV --&amp;gt; WaitForEviction
            SerialEvictWithPV --&amp;gt; WaitForEviction
            ParallelEviction --&amp;gt; WaitForEviction
            WaitForEviction --&amp;gt; HandlePDBViolation
            HandlePDBViolation --&amp;gt; RetryEviction
            RetryEviction --&amp;gt; [*]
        }
}
&lt;/pre&gt;

&lt;pre class=&#34;mermaid&#34;&gt;---
title: EvictPodsNoPV
---
stateDiagram-v2
    classDef imp font-weight:bold,stroke-width:5px;
        state &amp;#34;Retry count &amp;gt;= MaxEvictRetries&amp;#34; as Term
        state &amp;#34;Set attemptEvict as False&amp;#34; as AEF
        state &amp;#34;Sleep(EvictRetryInterval)&amp;#34; as SRC

        [*] --&amp;gt; Term:::imp

        Term:::imp --&amp;gt; CheckAttemptEvict : No
        Term:::imp --&amp;gt; AEF : Yes
        AEF --&amp;gt; CheckAttemptEvict

        CheckAttemptEvict --&amp;gt; EvictPod : True
        CheckAttemptEvict --&amp;gt; DeletePod : False

        EvictPod --&amp;gt; CheckErr
        DeletePod --&amp;gt; CheckErr

        CheckErr --&amp;gt; BreakLoop:::imp : nil
        CheckErr --&amp;gt; LogEvict : notFound
        CheckErr --&amp;gt; EvictFailErr : AttemptEvict is False
        CheckErr --&amp;gt; PDBViolation : APIErr too many req

        PDBViolation --&amp;gt; GetPDB

        GetPDB --&amp;gt; SRC : No PDB
        GetPDB --&amp;gt; CheckMisconfigured : PDB exists

        CheckMisconfigured --&amp;gt; MisconfigErr : Generation is ObserverGen&amp;lt;br/&amp;gt;HealthyPods &amp;gt;= ExpectedPods&amp;lt;br/&amp;gt;DisruptionsAllowed is 0
        CheckMisconfigured --&amp;gt; SRC : No

        SRC:::imp --&amp;gt; Term : count++


        BreakLoop:::imp --&amp;gt; ReturnSuccess:::imp : ForceDeletion
        BreakLoop:::imp --&amp;gt; GetTerminationGracePeriod : NormalDrain

        GetTerminationGracePeriod --&amp;gt; SetToTimeout : GracePeriod &amp;gt; Timeout
        GetTerminationGracePeriod --&amp;gt; WaitForDeletion : Grace &amp;lt; Timeout
        SetToTimeout --&amp;gt; WaitForDeletion

        WaitForDeletion --&amp;gt; TimeoutErr : timeout &amp;amp;&amp;lt;br/&amp;gt;pod exists
        WaitForDeletion --&amp;gt; WaitErr : err
        WaitForDeletion --&amp;gt; ReturnSuccess:::imp : timeout &amp;amp;&amp;lt;br/&amp;gt;pod deleted

        LogEvict --&amp;gt; [*]
        EvictFailErr --&amp;gt; [*]
        MisconfigErr --&amp;gt; [*]
        TimeoutErr --&amp;gt; [*]
        WaitErr --&amp;gt; [*]
        ReturnSuccess:::imp --&amp;gt; [*]
&lt;/pre&gt;

&lt;pre class=&#34;mermaid&#34;&gt;---
title: EvictPodsWithPV
config:
  layout: elk
---
stateDiagram-v2
    classDef imp font-weight:bold,stroke-width:5px;
        state &amp;#34;Retry count &amp;lt; MaxEvictRetries&amp;#34; as Term
        state &amp;#34;Sleep(EvictRetryInterval)&amp;#34; as SRC
        state &amp;#34;CheckRemainingPods&amp;#34; as CRP
        
        [*] --&amp;gt; SortPodsByPriority
        SortPodsByPriority --&amp;gt; podVolumeInfoMap
        note left of podVolumeInfoMap
            Creates a map from pod to list of attached PVs (VolName, VolID -&amp;gt; GetVolumeID)
        end note

        podVolumeInfoMap --&amp;gt; AttemptEvict
        AttemptEvict --&amp;gt; evictPodPVInternal(Delete):::imp : false
        AttemptEvict --&amp;gt; Term:::imp : true
        Term:::imp --&amp;gt; evictPodPVInternal(Evict):::imp : true
        evictPodPVInternal(Evict):::imp --&amp;gt; break:::imp : FastTrack or&amp;lt;br/&amp;gt;All pods evicted
        evictPodPVInternal(Evict):::imp --&amp;gt; SRC : Not FastTrack and&amp;lt;br/&amp;gt;Pods Remaining
        SRC --&amp;gt; Term:::imp : count++

        Term:::imp --&amp;gt; evictPodPVInternal(Delete):::imp : false&amp;lt;br/&amp;gt;Not FastTrack and&amp;lt;br/&amp;gt;Pods Remaining
        break:::imp --&amp;gt; [*] : All pods evicted

        break:::imp --&amp;gt; CRP : FastTrack
        evictPodPVInternal(Delete):::imp --&amp;gt; CRP

        CRP --&amp;gt; Success:::imp : Node Not Found
        CRP --&amp;gt; ChkAttemptEvict
        ChkAttemptEvict --&amp;gt; EvictErr : True
        ChkAttemptEvict --&amp;gt; DeleteErr : False
&lt;/pre&gt;

&lt;pre class=&#34;mermaid&#34;&gt;---
title: EvictPodsWithPVInternal
config:
  layout: elk
---
stateDiagram-v2
    classDef imp font-weight:bold,stroke-width:5px;
        state &amp;#34;Add Pod to RetryPods&amp;#34; as Retry
        state &amp;#34;Log NotFound&amp;lt;br/&amp;gt;DeleteWorker&amp;#34; as LogNotFound
        [*] --&amp;gt; SelectPod : Start Eviction Process

        SelectPod --&amp;gt; CheckContextTimeout:::imp

        CheckContextTimeout:::imp --&amp;gt; AbortProcess : Context Done
        CheckContextTimeout:::imp --&amp;gt; AddWorker(AttachmentHandler) : Context Not Done

        AddWorker(AttachmentHandler) --&amp;gt; EvictOrDelete

        EvictOrDelete --&amp;gt; CheckEvictionResult:::imp

        CheckEvictionResult:::imp --&amp;gt; EvictionFailed
        EvictionFailed --&amp;gt; PDBViolation : Eviction Attempted &amp;amp;&amp;lt;br/&amp;gt;TooManyRequests
        EvictionFailed --&amp;gt; PodAlreadyGone : Pod Not Found
        EvictionFailed --&amp;gt; EvictionError : Other Errors
        CheckEvictionResult:::imp --&amp;gt; WaitForVolumeDetach : Successful Eviction

        PDBViolation --&amp;gt; GetPDB
        GetPDB --&amp;gt; CheckMisconfigured : PDB Exists
        GetPDB --&amp;gt; Retry : NoPDB
        CheckMisconfigured --&amp;gt; MisconfigErr : Generation is ObserverGen&amp;lt;br/&amp;gt;HealthyPods &amp;gt;= ExpectedPods&amp;lt;br/&amp;gt;DisruptionsAllowed is 0
        CheckMisconfigured --&amp;gt; Retry:::imp : NotMisconfig
        MisconfigErr --&amp;gt; DeleteWorker

        PodAlreadyGone --&amp;gt; DeleteWorker

        EvictionError --&amp;gt; Retry:::imp

        WaitForVolumeDetach --&amp;gt; CheckDetachResult:::imp : TerminationGracePeriod + DetachTimeout

        CheckDetachResult:::imp --&amp;gt; LogNotFound : Node Not Found
        CheckDetachResult:::imp --&amp;gt; DetachError : Detach Failed
        CheckDetachResult:::imp --&amp;gt; WaitForReattach : Successful Detach

        LogNotFound --&amp;gt; AbortProcess
        DetachError --&amp;gt; DeleteWorker

        WaitForReattach --&amp;gt; CheckReattachResult:::imp : PvReattachTimeout

        CheckReattachResult:::imp --&amp;gt; ReattachTimeout : Timeout
        CheckReattachResult:::imp --&amp;gt; LogError : Reattach Failed
        CheckReattachResult:::imp --&amp;gt; SuccessfulEviction:::imp : Successful Reattach

        ReattachTimeout --&amp;gt; DeleteWorker : TODO IsThisCorrect?
        LogError --&amp;gt; DeleteWorker
        SuccessfulEviction:::imp --&amp;gt; DeleteWorker : Pod Processed

        DeleteWorker --&amp;gt; [*]
        Retry:::imp --&amp;gt; DeleteWorker
        AbortProcess --&amp;gt; Exit:::imp : Terminate (FastTrack)&amp;lt;br/&amp;gt;Return Remaining Pods
&lt;/pre&gt;

&lt;h2 id=&#34;safety-controller&#34;&gt;Safety Controller&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Orphan VM Check:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs periodically (every 15 minutes) to detect and clean up orphaned VMs&lt;/li&gt;
&lt;li&gt;Lists all VMs in the cloud provider matching the cluster&amp;rsquo;s tag&lt;/li&gt;
&lt;li&gt;Maps VMs to machine objects using ProviderID&lt;/li&gt;
&lt;li&gt;Handles nodes without machine objects:
&lt;ul&gt;
&lt;li&gt;Adds &lt;code&gt;NotManagedByMCM&lt;/code&gt; annotation after timeout&lt;/li&gt;
&lt;li&gt;Removes annotation if machine object is found&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Logs all cleanup operations for audit purposes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;API Server Safety:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Monitors connectivity to both control and target API servers&lt;/li&gt;
&lt;li&gt;Implements a freezing mechanism when API servers are unreachable&lt;/li&gt;
&lt;li&gt;Manages machine controller state based on API server health:
&lt;ul&gt;
&lt;li&gt;Freezes operations if timeout exceeded&lt;/li&gt;
&lt;li&gt;Unfreezes when API servers become available&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Handles machine status updates during API server recovery&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;Safety Controller&amp;#34; as SC {
        state &amp;#34;Orphan VM Check&amp;#34; as OVC {
            [*] --&amp;gt; ListCloudVMs
            ListCloudVMs --&amp;gt; MapToMachines
            MapToMachines --&amp;gt; CheckOrphans
            
            state &amp;#34;CheckOrphans&amp;#34; as CO {
                [*] --&amp;gt; NoMachineObject
                NoMachineObject --&amp;gt; ConfirmDeletion
                ConfirmDeletion --&amp;gt; DeleteVM
                DeleteVM --&amp;gt; LogDeletion
            }
            
            CheckOrphans --&amp;gt; AnnotateNodes
            
            state &amp;#34;AnnotateNodes&amp;#34; as AN {
                [*] --&amp;gt; CheckNodeMachine
                CheckNodeMachine --&amp;gt; MultipleMatch : Multiple Machines
                CheckNodeMachine --&amp;gt; NoMatch : No Machine
                CheckNodeMachine --&amp;gt; SingleMatch : One Machine
                
                NoMatch --&amp;gt; TimeoutCheck
                TimeoutCheck --&amp;gt; AddAnnotation : Timeout Exceeded
                
                SingleMatch --&amp;gt; RemoveAnnotation : Has Annotation
                
                AddAnnotation --&amp;gt; UpdateNode
                RemoveAnnotation --&amp;gt; UpdateNode
            }
        }

        state &amp;#34;API Server Safety&amp;#34; as ASS {
            [*] --&amp;gt; CheckFrozen
            CheckFrozen --&amp;gt; CheckAPIServer : Frozen
            CheckFrozen --&amp;gt; MonitorAPI : Not Frozen
            
            CheckAPIServer --&amp;gt; Unfreeze : API Up
            CheckAPIServer --&amp;gt; Requeue : API Down
            
            MonitorAPI --&amp;gt; SetInactiveTime : API Down
            MonitorAPI --&amp;gt; ClearInactiveTime : API Up
            
            SetInactiveTime --&amp;gt; CheckTimeout
            CheckTimeout --&amp;gt; Freeze : Timeout Exceeded
            
            Unfreeze --&amp;gt; UpdateMachines
            UpdateMachines --&amp;gt; ResetTimeout
        }
    }
&lt;/pre&gt;

&lt;h2 id=&#34;machineset-controller&#34;&gt;MachineSet Controller&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Core Reconciliation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Validates MachineSet specifications&lt;/li&gt;
&lt;li&gt;Manages finalizers for proper cleanup&lt;/li&gt;
&lt;li&gt;Implements machine ownership through controller references&lt;/li&gt;
&lt;li&gt;Synchronizes node templates and configurations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Replica Management:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implements sophisticated scaling logic:
&lt;ul&gt;
&lt;li&gt;Slow-start batching for scale-up operations&lt;/li&gt;
&lt;li&gt;Prioritized scale-down based on machine health&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Handles stale machine cleanup&lt;/li&gt;
&lt;li&gt;Maintains desired replica count&lt;/li&gt;
&lt;li&gt;Updates status to reflect current state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;MachineSet Controller&amp;#34; as MSC {
        state &amp;#34;Sync MachineSet&amp;lt;br/&amp;gt;NodeTemplate&amp;lt;br/&amp;gt;to Machine&amp;#34; as SyncNodeTemplates
        state &amp;#34;Sync MachineSet&amp;lt;br/&amp;gt;MachineConfiguration&amp;lt;br/&amp;gt;to Machine&amp;#34; as SyncMachineConfig
        state &amp;#34;Sync MachineSet&amp;lt;br/&amp;gt;MachineClass.Kind&amp;lt;br/&amp;gt;to Machine&amp;#34; as SyncMachineKind

        [*] --&amp;gt; FetchMachineSet
        FetchMachineSet --&amp;gt; ValidateSpec
        ValidateSpec --&amp;gt; AddFinalizers : Deletion Not Requested
        
        AddFinalizers --&amp;gt; ClaimMachines
        
        state &amp;#34;ClaimMachines (Returns filtered machines)&amp;#34; as CM {
            [*] --&amp;gt; CreateControllerRefMgr
            CreateControllerRefMgr --&amp;gt; GetControllerRef
            GetControllerRef --&amp;gt; Orphan : Nil&amp;lt;br/&amp;gt;(No Owner)
            GetControllerRef --&amp;gt; CheckUID : Not Nil&amp;lt;br/&amp;gt;(Owner Exists)
            
            CheckUID --&amp;gt; Ignore : Mismatch&amp;lt;br/&amp;gt;(Wrong Owner)
            CheckUID --&amp;gt; MatchSelector : UID Same
            Orphan --&amp;gt; CheckDeletion
            CheckDeletion --&amp;gt; SelectorMatch : No Deletion
            SelectorMatch --&amp;gt; AdoptOrphan : Selector Match
            
            MatchSelector --&amp;gt; KeepClaim : Selector Match&amp;lt;br/&amp;gt;Already Owned
            MatchSelector --&amp;gt; DeletionCheck : Selector Mismatch
            DeletionCheck --&amp;gt; AttemptRelease : No Deletion

            KeepClaim --&amp;gt; AddToClaimed
            AdoptOrphan --&amp;gt; AddToClaimed
            AttemptRelease --&amp;gt; RemoveFromClaimed
        }
        
        ClaimMachines --&amp;gt; SyncNodeTemplates
        SyncNodeTemplates --&amp;gt; SyncMachineConfig
        SyncMachineConfig --&amp;gt; SyncMachineKind
        SyncMachineKind --&amp;gt; CheckFilteredMachines : Deletion Requested
        SyncMachineKind --&amp;gt; ManageReplicas : No Deletion

        CheckFilteredMachines --&amp;gt; RemoveFinalizers : Zero Owned Machines
        CheckFilteredMachines --&amp;gt; CheckFinalizerPresent : Backed Machines
        CheckFinalizerPresent --&amp;gt; TerminateMachines
        RemoveFinalizers --&amp;gt; UpdateStatus
        TerminateMachines --&amp;gt; UpdateStatus

        state &amp;#34;ManageReplicas&amp;#34; as MR {
            [*] --&amp;gt; CheckMachinePhase
            CheckMachinePhase --&amp;gt; ActiveMachines : Phase&amp;lt;br/&amp;gt;NotFailedOrTerminating
            CheckMachinePhase --&amp;gt; StaleMachines : PhaseFailed

            ActiveMachines --&amp;gt; CheckDiff
            StaleMachines --&amp;gt; TerminateStale
            TerminateStale --&amp;gt; CheckDiff
            
            CheckDiff --&amp;gt; ScaleUp : ActiveMachines&amp;lt;br/&amp;gt;Less than&amp;lt;br/&amp;gt;Replica Count
            CheckDiff --&amp;gt; ScaleDown : ActiveMachines&amp;lt;br/&amp;gt;More than&amp;lt;br/&amp;gt;Replica Count
            
            ScaleUp --&amp;gt; NotFrozenAnd&amp;lt;br/&amp;gt;NotToBeDeleted
            NotFrozenAnd&amp;lt;br/&amp;gt;NotToBeDeleted --&amp;gt; SlowStartBatch : TODO Expectations
            SlowStartBatch --&amp;gt; CreateMachines
            
            ScaleDown --&amp;gt; SortMachines
            SortMachines --&amp;gt; DeleteExcess
        }
        
        ManageReplicas --&amp;gt; UpdateStatus
        UpdateStatus --&amp;gt; [*]
    }
&lt;/pre&gt;

&lt;h2 id=&#34;machinedeployment-controller&#34;&gt;MachineDeployment Controller&lt;/h2&gt;
&lt;p&gt;Deployment Management:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Handles multiple MachineSets for a deployment&lt;/li&gt;
&lt;li&gt;Maintains deployment history through revisions&lt;/li&gt;
&lt;li&gt;Supports pausing and resuming deployments&lt;/li&gt;
&lt;li&gt;Implements rollback functionality&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deployment Strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Recreate Strategy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scales down old MachineSets completely&lt;/li&gt;
&lt;li&gt;Creates and scales up new MachineSet&lt;/li&gt;
&lt;li&gt;Ensures clean cutover between versions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Rolling Update Strategy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gradually scales up new MachineSet&lt;/li&gt;
&lt;li&gt;Gradually scales down old MachineSets&lt;/li&gt;
&lt;li&gt;Maintains availability during updates&lt;/li&gt;
&lt;li&gt;Handles surge and unavailability constraints&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Scaling Operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Detects and handles scaling events&lt;/li&gt;
&lt;li&gt;Manages desired replica counts across MachineSets&lt;/li&gt;
&lt;li&gt;Updates annotations for autoscaler integration&lt;/li&gt;
&lt;li&gt;Ensures proper resource cleanup&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
  config:
    layout: elk
---
stateDiagram-v2
    state &amp;#34;TODO MachineDeployment Controller&amp;#34; as MDC {
        [*] --&amp;gt; FetchDeployment
        FetchDeployment --&amp;gt; LogFrozenOrTBD
        LogFrozenOrTBD --&amp;gt; ValidateSpec
        ValidateSpec --&amp;gt; CheckDeletion
        
        state &amp;#34;GetMachineSets&amp;#34; as GMS {
            [*] --&amp;gt; CreateControllerRefMgr
            CreateControllerRefMgr --&amp;gt; GetControllerRef
            GetControllerRef --&amp;gt; Orphan : Nil&amp;lt;br/&amp;gt;(No Owner)
            GetControllerRef --&amp;gt; CheckUID : Not Nil&amp;lt;br/&amp;gt;(Owner Exists)

            CheckUID --&amp;gt; Ignore : Mismatch&amp;lt;br/&amp;gt;(Wrong Owner)
            CheckUID --&amp;gt; MatchSelector : UID Same
            Orphan --&amp;gt; CheckDelete
            CheckDelete --&amp;gt; SelectorMatch : No Deletion
            SelectorMatch --&amp;gt; AdoptOrphan : Selector Match

            MatchSelector --&amp;gt; KeepClaim : Selector Match&amp;lt;br/&amp;gt;Already Owned
            MatchSelector --&amp;gt; DeletionCheck : Selector Mismatch
            DeletionCheck --&amp;gt; AttemptRelease : No Deletion

            KeepClaim --&amp;gt; AddToClaimed
            AdoptOrphan --&amp;gt; AddToClaimed
            AttemptRelease --&amp;gt; RemoveFromClaimed
        }
        
        CheckDeletion --&amp;gt; AddFinalizer : No Deletion
        AddFinalizer --&amp;gt; StatusUpdate
        StatusUpdate --&amp;gt; GetMachineSets

        GetMachineSets --&amp;gt; BuildMachineMap&amp;lt;br/&amp;gt;MSetUIDToMachines
        BuildMachineMap&amp;lt;br/&amp;gt;MSetUIDToMachines --&amp;gt; DeleteChk
        DeleteChk --&amp;gt; CheckPausedCond : No Deletion
        DeleteChk --&amp;gt; ProcessDeletion : Deletion Requested
        
        state &amp;#34;Process Deletion&amp;#34; as DC {
            [*] --&amp;gt; Exit : Finalizer&amp;lt;br/&amp;gt;NotPresent
            [*] --&amp;gt; RemoveFinalizers : NoBackingMS
            [*] --&amp;gt; TerminateMachineSets : BackingMS
            
            TerminateMachineSets --&amp;gt; SyncStatusOnly&amp;lt;br/&amp;gt;UpdateMcdStatus
            RemoveFinalizers --&amp;gt; Exit
        }

        state &amp;#34;Check Paused Condition&amp;#34; as CPC {
            [*] --&amp;gt; GetCondition&amp;lt;br/&amp;gt;TypeProcessing
            
            GetCondition&amp;lt;br/&amp;gt;TypeProcessing --&amp;gt; [*] : CondReason&amp;lt;br/&amp;gt;TimeOut
            GetCondition&amp;lt;br/&amp;gt;TypeProcessing --&amp;gt; ExistingPaused : CondReason&amp;lt;br/&amp;gt;Paused
            GetCondition&amp;lt;br/&amp;gt;TypeProcessing --&amp;gt; NotExistingPaused : Else
            
            NotExistingPaused --&amp;gt; Spec.Paused
            Spec.Paused --&amp;gt; SetPausedCondition : true

            ExistingPaused --&amp;gt; SpecPaused
            SpecPaused --&amp;gt; SetResumedCondition : False

            SetPausedCondition --&amp;gt; UpdateMcdStatus
            SetResumedCondition --&amp;gt; UpdateMcdStatus

            UpdateMcdStatus --&amp;gt; [*]
        }

        CheckPausedCond --&amp;gt; SetPrioAnnotation : TODO

        SetPrioAnnotation --&amp;gt; Sync : Spec.Paused true&amp;lt;br/&amp;gt;TODO
        SetPrioAnnotation --&amp;gt; CheckRollbackTo : Spec.Paused false
        
        state &amp;#34;Rollback&amp;#34; as RB {
            [*] --&amp;gt; FindRevision
            FindRevision --&amp;gt; FindMatchingMS : RollbackTo.Revision&amp;lt;br/&amp;gt;Present
            FindRevision --&amp;gt; ClearRollbackTo : No last revision

            FindMatchingMS --&amp;gt; Remove&amp;lt;br/&amp;gt;PreferNoSched&amp;lt;br/&amp;gt;Taint : MSRevisionAnnotation&amp;lt;br/&amp;gt;same as&amp;lt;br/&amp;gt;RollbackTo Revision
            FindMatchingMS --&amp;gt; ClearRollbackTo : NoMachineSetFound
            
            Remove&amp;lt;br/&amp;gt;PreferNoSched&amp;lt;br/&amp;gt;Taint --&amp;gt; UpdateMcdTemplate
            UpdateMcdTemplate --&amp;gt; UpdateMcdAnnotations : Copy MS template&amp;lt;br/&amp;gt;Remove label&amp;lt;br/&amp;gt;machine-template-hash

            UpdateMcdAnnotations --&amp;gt; ClearRollbckTo
            ClearRollbckTo --&amp;gt; EmitRollbackEvent
        }
        
        CheckRollbackTo --&amp;gt; Rollback : Rollback Requested
        CheckRollbackTo --&amp;gt; IsScalingEvent : No Rollback
        
        state &amp;#34;Is Scaling Event&amp;#34; as SC {
            [*] --&amp;gt; GetMS&amp;lt;br/&amp;gt;SyncRev
            GetMS&amp;lt;br/&amp;gt;SyncRev --&amp;gt; NotScaling : err
            GetMS&amp;lt;br/&amp;gt;SyncRev --&amp;gt; NotScaling : No New MS
            
            GetMS&amp;lt;br/&amp;gt;SyncRev --&amp;gt; CheckActiveMS : MS Replicas &amp;gt; 0
            CheckActiveMS --&amp;gt; ScalingEvent : NoActiveMS &amp;amp;&amp;lt;br/&amp;gt;MCD Replicas &amp;gt; 0&amp;lt;br/&amp;gt;(ScaleFromZero)
            
            CheckActiveMS --&amp;gt; GetMSDesiredReplica&amp;lt;br/&amp;gt;Annotation
            GetMSDesiredReplica&amp;lt;br/&amp;gt;Annotation --&amp;gt; ScalingEvent : Desired not equal&amp;lt;br/&amp;gt;to MCD Replicas

            CheckActiveMS --&amp;gt; NotScaling : NoActiveMS or&amp;lt;br/&amp;gt;Desired = MCD Replicas&amp;lt;br/&amp;gt;(For all active)
        }
        
        IsScalingEvent --&amp;gt; Sync : Scale Event
        IsScalingEvent --&amp;gt; DeployStrategy : No Scale Event

        state &amp;#34;Sync&amp;#34; as SN {
            [*] --&amp;gt; GetMS&amp;lt;br/&amp;gt;SyncRevision
            GetMS&amp;lt;br/&amp;gt;SyncRevision --&amp;gt; Scale
            Scale --&amp;gt; CleanMCD : Paused and&amp;lt;br/&amp;gt;No RollbackTo
            Scale --&amp;gt; SyncMCDStatus

            state &amp;#34;Find Active or Latest MS&amp;#34; as ALMS {
            [*] --&amp;gt; SortMS by CreationTime&amp;lt;br/&amp;gt;FilterActiveMS
            }

            state &amp;#34;TODO Scale&amp;#34; as SCC {
                state &amp;#34;ReplicasToAdd&amp;lt;br/&amp;gt;AllowedSize - AllMSReplicaCnt&amp;#34; as ReplicasToAdd
                
                [*] --&amp;gt; GetActiveOrLatestMS
                GetActiveOrLatestMS --&amp;gt; CheckActiveMSReplicas : not nil
                GetActiveOrLatestMS --&amp;gt; CheckNewMS&amp;lt;br/&amp;gt;Saturated

                CheckActiveMSReplicas --&amp;gt; FIXME : ActiveMSRep = mcdRep

                CheckNewMS&amp;lt;br/&amp;gt;Saturated --&amp;gt; ScaleDownOldMS : true
                CheckNewMS&amp;lt;br/&amp;gt;Saturated --&amp;gt; IsRollingUpdate : false

                IsRollingUpdate --&amp;gt; FilterActiveMS : true
                FilterActiveMS --&amp;gt; GetReplicaCount&amp;lt;br/&amp;gt;AllMS

                GetReplicaCount&amp;lt;br/&amp;gt;AllMS --&amp;gt; FindAllowedSize

                FindAllowedSize --&amp;gt; Zero : MCD Replicas &amp;lt;= 0
                FindAllowedSize --&amp;gt; McdReplicas+MaxSurge : MCD Replicas &amp;gt; 0

                Zero --&amp;gt; ReplicasToAdd
                McdReplicas+MaxSurge --&amp;gt; ReplicasToAdd

                ReplicasToAdd --&amp;gt; ScaleUp : more than 0
                ReplicasToAdd --&amp;gt; ScaleDown : &amp;lt; 0

                ScaleUp --&amp;gt; map[name]=NewRep : oldMS = Replicas
                ScaleUp --&amp;gt; map[name]=NewRep : newMS = Rep+RepToAdd
                
            }
        }

        state &amp;#34;TODO DeployStrategy&amp;#34; as DS {
            state &amp;#34;Recreate&amp;#34; as RC {
                [*] --&amp;gt; OldScaleDown
                OldScaleDown --&amp;gt; CreateNew
                CreateNew --&amp;gt; NewScaleUp
            }
            
            state &amp;#34;RollingUpdate&amp;#34; as RU {
                [*] --&amp;gt; ScaleUpNew
                [*] --&amp;gt; ScaleDownOld
                ScaleDownOld --&amp;gt; CleanupOld
            }
        }
        
        DeployStrategy --&amp;gt; UpdateStatus
        UpdateStatus --&amp;gt; [*]
    }
        
&lt;/pre&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Each of these controllers implements sophisticated error handling and retry mechanisms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Error Handling:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Categorizes errors into recoverable and non-recoverable&lt;/li&gt;
&lt;li&gt;Implements exponential backoff for retries&lt;/li&gt;
&lt;li&gt;Maintains error counters and conditions&lt;/li&gt;
&lt;li&gt;Updates status to reflect error states&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Resource Protection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Uses finalizers to prevent premature deletion&lt;/li&gt;
&lt;li&gt;Implements owner references for proper garbage collection&lt;/li&gt;
&lt;li&gt;Maintains consistent state through careful status updates&lt;/li&gt;
&lt;li&gt;Handles race conditions through proper locking&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Performance Considerations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implements work queues for efficient processing&lt;/li&gt;
&lt;li&gt;Uses informers for efficient cache handling&lt;/li&gt;
&lt;li&gt;Batches operations when possible&lt;/li&gt;
&lt;li&gt;Implements rate limiting for API calls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Monitoring and Metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tracks operation durations&lt;/li&gt;
&lt;li&gt;Records error counts and types&lt;/li&gt;
&lt;li&gt;Provides health metrics&lt;/li&gt;
&lt;li&gt;Implements proper logging for debugging&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The entire system works together to provide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Reliable machine lifecycle management&lt;/li&gt;
&lt;li&gt;Proper cleanup of resources&lt;/li&gt;
&lt;li&gt;Scaling capabilities&lt;/li&gt;
&lt;li&gt;Rolling updates and rollbacks&lt;/li&gt;
&lt;li&gt;Protection against race conditions and API server issues&lt;/li&gt;
&lt;li&gt;Efficient resource utilization&lt;/li&gt;
&lt;li&gt;Proper monitoring and debugging capabilities&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This comprehensive system ensures robust machine management while maintaining high availability and proper resource utilization. The controllers work together to maintain the desired state while handling various edge cases and failure scenarios.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>MCM</title>
      <link>https://brongulus.github.io/notes/20241129t160749--mcm__k8s_sap_work/</link>
      <pubDate>Fri, 29 Nov 2024 16:07:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/20241129t160749--mcm__k8s_sap_work/</guid>
      <description>&lt;p&gt;First, go through the &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/README.md&#34;&gt;README&lt;/a&gt;, later on check &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/development/local_setup.md&#34;&gt;local setup&lt;/a&gt; guide as well.&lt;/p&gt;
&lt;h2 id=&#34;components&#34;&gt;Components&lt;/h2&gt;
&lt;p&gt;Check &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/tree/master/kubernetes/crds&#34;&gt;CRDs present in the MCM tree&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;All the below class diagrams omit &lt;code&gt;TypeMeta&lt;/code&gt; and &lt;code&gt;ObjectMeta&lt;/code&gt; for brevity.&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;machine&#34;&gt;Machine&lt;/h3&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
title: Machine
config:
  class:
    hideEmptyMembersBox: true
---
%%{init: { &amp;#39;themeVariables&amp;#39;: { &amp;#39;lineColor&amp;#39;: &amp;#39;#51565b&amp;#39;}}}%%
classDiagram
   %% note &amp;#34;apiVersion, kind &amp;amp; metadata components have not been shown&amp;#34;

   %% Machine ---------------------------------
   note for Machine &amp;#34;Representation of a physical or virtual machine that corresponds to a front-end kubernetes node object&amp;#34;
   Machine &amp;lt;|-- MachineSpec
   Machine &amp;lt;|-- MachineStatus
   class Machine{
   MachineSpec spec
   MachineStatus status
   }
   %%--
   MachineSpec &amp;lt;|-- ClassSpec
   MachineSpec &amp;lt;|-- MachineConfiguration
   MachineSpec &amp;lt;|-- NodeTemplateSpec

   class MachineSpec{
   ClassSpec class
   string providerID
   NodeTemplateSpec nodeTemplate
   MachineConfiguration MachineConfiguration
   }

   class ClassSpec{
   string apiGroup
   string kind
   string name
   }
   note for ClassSpec &amp;#34;Refers to the MachineClass template for the Machine&amp;#34;

   class NodeTemplateSpec{
   string podCIDR: IP range
   []string podCIDRs
   string providerID
   bool unschedulable
   []taint taints
   }
   note for NodeTemplateSpec &amp;#34;Actually part of NodeSpec which is a field in NodeTemplateSpec&amp;#34;

   class MachineConfiguration{
   v1.Duration drainTimeout
   v1.Duration healthTimeout
   v1.Duration creationTimeout
   int32* maxEvictRetries
   string* nodeConditions
   }
   %%--
   MachineStatus &amp;lt;|-- LastOperation
   MachineStatus &amp;lt;|-- CurrentStatus
   class MachineStatus{
   v1.NodeCondition conditions
   LastOperation lastOperation
   CurrentStatus currentStatus
   string lastKnownState
   }

   class LastOperation{
   string description
   string errorCode
   v1.Time lastUpdateTime
   MachineState state: string
   MachineOperationType type: string
   }

   note for LastOperation &amp;#34;State can be &amp;#39;Processing&amp;#39;, &amp;#39;Failed&amp;#39; or &amp;#39;Successful&amp;#39;&amp;lt;br&amp;gt;Type can be &amp;#39;Create&amp;#39;, &amp;#39;Update&amp;#39;, &amp;#39;HealthCheck&amp;#39; or &amp;#39;Delete&amp;#39;&amp;#34;

   class CurrentStatus{
   MachinePhase phase: string
   bool timeoutActive
   v1.Time lastUpdateTime
   }

   link MachineStatus &amp;#34;https://kubernetes.io/docs/reference/node/node-status/#condition&amp;#34;
&lt;/pre&gt;

&lt;h3 id=&#34;machine-class&#34;&gt;Machine Class&lt;/h3&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
title: MachineClass
config:
  class:
    hideEmptyMembersBox: true
---
%%{init: { &amp;#39;themeVariables&amp;#39;: { &amp;#39;lineColor&amp;#39;: &amp;#39;#51565b&amp;#39;}}}%%
classDiagram
 %% MachineClass ---------------------------------
   note for MachineClass &amp;#34;Represents a template that contains cloud provider specific details used to create machines&amp;#34;
   MachineClass &amp;lt;|-- NodeTemplate
   class MachineClass{
   NodeTemplate nodeTemplate
   v1.SecretReference credentialsSecretRef
   RawExtension providerSpec
   string provider
   v1.SecretReference secretRef
   }
   note for MachineClass &amp;#34;credentialsSecretRef has cloud provider credentials&amp;lt;br&amp;gt;secretRef has cloud init script: userData containing bootstrap token, API server address, kubeconfig&amp;#34;
   note for MachineClass &amp;#34;provider specific configuration to create a node is specified in providerSpec of the extensible custom type rawExtension which permits instances of different structure types to be held within a single type&amp;#34;

   class NodeTemplate{
   v1.ResourceList capacity
   string instanceType
   string region
   string zone
   string* architecture
   }
&lt;/pre&gt;

&lt;h3 id=&#34;machine-set&#34;&gt;Machine Set&lt;/h3&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
title: MachineSet
config:
  class:
    hideEmptyMembersBox: true
---
%%{init: { &amp;#39;themeVariables&amp;#39;: { &amp;#39;lineColor&amp;#39;: &amp;#39;#51565b&amp;#39;}}}%%
classDiagram
 %% MachineSet ---------------------------------
   note for MachineSet &amp;#34;Ensures that the specified number of Machine replicas are running at any time&amp;#34;
   MachineSet &amp;lt;|-- MachineSetSpec
   MachineSet &amp;lt;|-- MachineSetStatus
   class MachineSet{
   MachineSetSpec spec
   MachineSetStatus status
   }

   MachineSetSpec &amp;lt;|-- ClassSpec
   MachineSetSpec &amp;lt;|-- MachineTemplateSpec
   class MachineSetSpec{
   int32 replicas
   v1.LabelSelector selector
   ClassSpec machineClass
   MachineTemplateSpec template
   int32 minReadySeconds
   }

   MachineTemplateSpec &amp;lt;|-- MachineSpec
   class MachineTemplateSpec{
   MachineSpec spec
   }

   MachineSetStatus &amp;lt;|-- MachineSetCondition
   MachineSetStatus &amp;lt;|-- LastOperation
   MachineSetStatus &amp;lt;|-- MachineSummary
   class MachineSetStatus{
   int32 replicas
   int32 fullyLabeledReplicas
   int32 readyReplicas
   int32 availableReplicas
   int64 observedGeneration
   []MachineSetCondition machineSetCondition
   LastOperation lastOperation
   MachineSummary failedMachines
   }

   MachineSummary &amp;lt;|-- LastOperation
   class MachineSummary{
   string name
   string providerID
   LastOperation lastOperation
   string ownerRef
   }

   class MachineSetCondition{
   MachineSetConditionType type: string
   ConditionStatus status: string
   v1.Time lastTransitionTime
   string reason
   string message
   }

   note for LastOperation &amp;#34;One has information about lastOp for Machine (summary) and the other is for MachineSet&amp;#34;
&lt;/pre&gt;

&lt;h3 id=&#34;machine-deployment&#34;&gt;Machine Deployment&lt;/h3&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
title: MachineDeployment
config:
  class:
    hideEmptyMembersBox: true
---
%%{init: { &amp;#39;themeVariables&amp;#39;: { &amp;#39;lineColor&amp;#39;: &amp;#39;#51565b&amp;#39;}}}%%
classDiagram
 %% Deployment ---------------------------------
   note for MachineDeployment &amp;#34;Provides a declarative update for MachineSet and Machines&amp;#34;
   MachineDeployment &amp;lt;|-- MachineDeploymentSpec
   MachineDeployment &amp;lt;|-- MachineDeploymentStatus
   class MachineDeployment{
   MachineDeploymentSpec spec
   MachineDeploymentStatus status
   }
   %%--
   MachineDeploymentSpec &amp;lt;|-- MachineTemplateSpec
   MachineDeploymentSpec &amp;lt;|-- MachineDeploymentStrategy
   class MachineDeploymentSpec{
   int32 replicas
   v1.LabelSelector selector
   MachineTemplateSpec template
   MachineDeploymentStrategy strategy
   int32 minReadySeconds
   int32* revisionHistoryLimit
   bool paused
   RollbackConfig* rollbackTo
   int32* progressDeadlineSeconds
   }

   MachineDeploymentStrategy &amp;lt;|-- RollingUpdateMachineDeployment
   class MachineDeploymentStrategy{
   MachineDeploymentStrategyType type: string
   RollingUpdateMachineDeployment rollingUpdate
   }

   class RollingUpdateMachineDeployment{
   IntOrString MaxUnavailable
   IntOrString MaxSurge
   }
   %%--
   MachineDeploymentStatus &amp;lt;|-- MachineDeploymentCondition
   MachineDeploymentStatus &amp;lt;|-- MachineSummary
   class MachineDeploymentStatus{
   int64 observedGeneration
   int32 replicas
   int32 updatedReplicas
   int32 readyReplicas
   int32 availableReplicas
   int32 unavailableReplicas
   []MachineDeploymentCondition condition
   int32* collisionCount
   MachineSummary failedMachines
   }

   class MachineDeploymentCondition{
   MachineDeploymentConditionType type: string
   ConditionStatus status: string
   v1.Time lastUpdateTime
   v1.Time lastTransitionTime
   string reason
   string message
   }
&lt;/pre&gt;

&lt;h3 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h3&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;These are added for reference purpose only, no need to delve too much into dissecting them.&lt;/p&gt;
&lt;/div&gt;
&lt;pre class=&#34;mermaid&#34;&gt;---
title: SafetyOptions &amp;amp; PodDisruptionBudget
config:
  class:
    hideEmptyMembersBox: true
---
classDiagram
class SafetyOptions{
 metav1.Duration	MachineCreationTimeout
 metav1.Duration	MachineHealthTimeout
 metav1.Duration	MachineDrainTimeout
 metav1.Duration	PvDetachTimeout
 metav1.Duration	PvReattachTimeout
 metav1.Duration	MachineSafetyAPIServerStatusCheckTimeout
 metav1.Duration	MachineSafetyAPIServerStatusCheckPeriod
 metav1.Duration	MachineSafetyOrphanVMsPeriod
	time.Time APIserverInactiveStartTime
	bool MachineControllerFrozen
	int32 MaxEvictRetries
}

PodDisruptionBudget &amp;lt;|-- PodDisruptionBudgetSpec
PodDisruptionBudget &amp;lt;|-- PodDisruptionBudgetStatus
class PodDisruptionBudget{
PodDisruptionBudgetSpec spec
PodDisruptionBudgetStatus status
}

class PodDisruptionBudgetSpec{
IntOrString* minAvailable
v1.LabelSelector* selector
IntOrString* maxUnavailable
}

class PodDisruptionBudgetStatus{
int64 observedGeneration
map[string]v1.Time disruptedPods
int32 disruptionsAllowed
int32 currentHealthy
int32 desiredHealthy
int32 expectedPods
[]v1.Condition conditions
}
&lt;/pre&gt;

&lt;pre class=&#34;mermaid&#34;&gt;---
title: VolumeAttachmentHandler
config:
  class:
    hideEmptyMembersBox: true
---
classDiagram
VolumeAttachmentHandler &amp;lt;|-- VolumeAttachment
note for VolumeAttachmentHandler &amp;#34;Distribute incoming VolumeAttachment requests to all listening workers&amp;#34;
class VolumeAttachmentHandler{
sync.Mutex
[]chan storagev1.VolumeAttachment* workers
dispatch()
AddWorker()
DeleteWorker()
}

VolumeAttachment &amp;lt;|-- VolumeAttachmentSpec
VolumeAttachment &amp;lt;|-- VolumeAttachmentStatus
note for VolumeAttachment &amp;#34;Captures the intent to attach/detach specified volume to/from the specified node&amp;#34;
class VolumeAttachment{
VolumeAttachmentSpec spec
VolumeAttachmentStatus status
}

VolumeAttachmentSpec &amp;lt;|-- VolumeAttachmentSource
class VolumeAttachmentSpec{
string attacher
VolumeAttachmentSource source
string nodeName
}

VolumeAttachmentStatus &amp;lt;|-- VolumeError
class VolumeAttachmentStatus{
bool attached
map[string]string attachmentMetadata
VolumeError* attachError
VolumeError* detachError
}

class VolumeAttachmentSource{
string* persistentVolumeName
v1.PersistentVolumeSpec* inlineVolumeSpec
}

class VolumeError{
metav1.Time time
string message
}
&lt;/pre&gt;

&lt;h2 id=&#34;machine-controller&#34;&gt;Machine Controller&lt;/h2&gt;
&lt;h3 id=&#34;reconcile-cluster-secret&#34;&gt;Reconcile Cluster Secret&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fetch secrets&lt;/li&gt;
&lt;li&gt;Get the &lt;code&gt;MachineClass&lt;/code&gt; referring to the passed secret&lt;/li&gt;
&lt;li&gt;In case there are machine classes that refer it, add the finalizer to the secret else remove it. (The removal of the finalizer is needed because if the secrets aren&amp;rsquo;t referred by &lt;code&gt;MachineClass&lt;/code&gt; then their deletion shouldn&amp;rsquo;t depend on the finalizer, &lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/finalizers/&#34;&gt;Ref&lt;/a&gt;)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reconcile-cluster-machine-class&#34;&gt;Reconcile Cluster Machine Class&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Fetch the &lt;code&gt;MachineClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Get all the &lt;code&gt;Machines&lt;/code&gt; referring to the &lt;code&gt;MachineClass&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there are machines that match given &lt;code&gt;MachineClass&lt;/code&gt; and the deletion hasn&amp;rsquo;t been requested yet for the &lt;code&gt;Class&lt;/code&gt; then add the finalizers to the class proceeding which all the machines referring to the class are enqueued for further processing. (&lt;code&gt;TODO&lt;/code&gt;: Learn about &lt;a href=&#34;https://pkg.go.dev/k8s.io/client-go/util/workqueue&#34;&gt;workqueue&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Otherwise if deletion isn&amp;rsquo;t scheduled and there are machines referring to the Class then add them to the &lt;code&gt;machineQueue&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there aren&amp;rsquo;t any machines referring to the &lt;code&gt;Class&lt;/code&gt;, then the finalizers, if any, on it can be deleted.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reconcile-cluster-machine&#34;&gt;Reconcile Cluster Machine&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch the required &lt;code&gt;Machine&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if the Machine controller is frozen (&lt;code&gt;MachineControllerFrozen&lt;/code&gt;) and machine isn&amp;rsquo;t scheduled for deletion. If so, retry reconciliation after &lt;code&gt;longRetry&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If machine isn&amp;rsquo;t frozen, then validate the &lt;code&gt;Machine&lt;/code&gt; (check Name and Kind for the Class shouldn&amp;rsquo;t be empty). Also validate the &lt;code&gt;MachineClass&lt;/code&gt;&amp;rsquo; &lt;code&gt;Nodetemplate&lt;/code&gt; fields (&lt;code&gt;capacity&lt;/code&gt;: cpu, gpu and memory; &lt;code&gt;instanceType&lt;/code&gt;, &lt;code&gt;region&lt;/code&gt; and &lt;code&gt;zone&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case the machine is scheduled for deletion, &lt;a href=&#34;#triggerdeletionflow&#34;&gt;TriggerDeletionFlow&lt;/a&gt; with a &lt;code&gt;DeleteMachineRequest&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If the &lt;code&gt;Machine&lt;/code&gt; isn&amp;rsquo;t scheduled for deletion, then add the finalizers on the machine if not present.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/FAQ.md#what-are-the-different-phases-of-a-machine&#34;&gt;Machine Phases State Diagram&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Check if the machine has an associated node (look for &lt;em&gt;label&lt;/em&gt; with key &amp;ldquo;&lt;code&gt;node&lt;/code&gt;&amp;rdquo;) and if the machine has been created (i.e. &lt;code&gt;phase&lt;/code&gt; != &amp;ldquo;&amp;rdquo;, if phase is empty string, that corresponds to machine being in creation stage). If so, then:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reconcile Machine Health: Updates the machine object with any change in node conditions or health. &lt;a href=&#34;https://elankath.github.io/mcmdesign/machine-controller/cluster_machine_reconcile.html#health-check-summary&#34;&gt;Ref&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sync Machine Name to Node: Syncs machine name on corresponding node object by adding machine name label to metadata.&lt;/li&gt;
&lt;li&gt;Sync Machine NodeTemplates: Syncs &lt;code&gt;nodeTemplate&lt;/code&gt; between the machine and the node object by fetching it, then syncs the &lt;em&gt;annotations&lt;/em&gt;, &lt;em&gt;labels&lt;/em&gt; and &lt;em&gt;taints&lt;/em&gt; ().&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If machine phase is &lt;code&gt;empty&lt;/code&gt; or &lt;code&gt;crashloopbackoff&lt;/code&gt; or &lt;code&gt;providerId&lt;/code&gt; is empty i.e. machine doesn&amp;rsquo;t exist then &lt;a href=&#34;#triggercreationflow&#34;&gt;TriggerCreationFlow&lt;/a&gt; with &lt;code&gt;CreateMachineRequest&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;triggerdeletionflow&#34;&gt;TriggerDeletionFlow&lt;/h4&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/FAQ.md#why-is-my-machine-deleted&#34;&gt;FAQ: Why is my machine deleted?&lt;/a&gt;
Check if finalizers are present on the machine, if not retry after a while. In case they are present and the machine isn&amp;rsquo;t in &lt;code&gt;terminating&lt;/code&gt; phase, then set it to &lt;code&gt;terminating&lt;/code&gt; (also sets &lt;code&gt;LastOperation&lt;/code&gt; state to &lt;code&gt;Processing&lt;/code&gt; and description to &lt;code&gt;GetVMStatus&lt;/code&gt;). If machine is in &lt;code&gt;terminating&lt;/code&gt; phase, then check &lt;code&gt;LastOperation Description&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If it contains the string &lt;code&gt;GetVMStatus&lt;/code&gt; i.e. &lt;em&gt;&amp;ldquo;Set machine status to termination. Now, getting VM Status&amp;rdquo;&lt;/em&gt; then &lt;code&gt;updateMachineStatus&amp;amp;NodeLabel&lt;/code&gt; is called which adds the &amp;ldquo;&lt;code&gt;node&lt;/code&gt;&amp;rdquo; label if not present while checking for any errors in getting machine error status. After confirming that the node label is updated, the LastOperation &lt;code&gt;type&lt;/code&gt; is set to &lt;code&gt;delete&lt;/code&gt; and LastOperation &lt;code&gt;description&lt;/code&gt; to &lt;code&gt;InitiateDrain&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it contains the string &lt;code&gt;InitiateDrain&lt;/code&gt; then call &lt;a href=&#34;#drainnode&#34;&gt;DrainNode&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;If its &lt;code&gt;DelVolumesAttachments&lt;/code&gt;, then &lt;code&gt;deleteNodeVA&lt;/code&gt; is invoked:
&lt;ul&gt;
&lt;li&gt;If node is not found or if &lt;code&gt;node.VolumesAttached&lt;/code&gt; is zero then &lt;code&gt;description&lt;/code&gt; is updated to &lt;code&gt;InitiateVMDeletion&lt;/code&gt; and &lt;code&gt;state&lt;/code&gt; is set to &lt;code&gt;Processing&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there are non-zero attached volumes then &lt;code&gt;getLiveVAForNode&lt;/code&gt; fetches all the volumes attached to our node not having DeletionTimestamp set.&lt;/li&gt;
&lt;li&gt;If there are live volumes, &lt;code&gt;deleteVAForNode&lt;/code&gt; removes them and when zero live volumes are attached then &lt;code&gt;InitiateVMDeletion&lt;/code&gt; is set as the &lt;code&gt;description&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After this the machine status is updated with the corresponding state and description.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When it&amp;rsquo;s &lt;code&gt;InitiateVMDeletion&lt;/code&gt;, then &lt;code&gt;deleteVM&lt;/code&gt; delgates the task to driver.&lt;a href=&#34;#deletemachine&#34;&gt;DeleteMachine&lt;/a&gt; method. If deletion is successful then description is set to &lt;code&gt;InitiateNodeDeletion&lt;/code&gt; with &lt;code&gt;processing&lt;/code&gt; &lt;code&gt;state&lt;/code&gt;. If there are any errors:
&lt;ul&gt;
&lt;li&gt;In case its &lt;code&gt;NotFound&lt;/code&gt;, then deletion flow is continued and &lt;code&gt;state&lt;/code&gt; is set to &lt;code&gt;processing&lt;/code&gt; with &lt;code&gt;description&lt;/code&gt; as &lt;code&gt;InitiateNodeDeletion&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If it&amp;rsquo;s &lt;code&gt;Unknown&lt;/code&gt;, &lt;code&gt;DeadlineExceeded&lt;/code&gt;, &lt;code&gt;Aborted&lt;/code&gt; or &lt;code&gt;Unavailable&lt;/code&gt; or any other error code(&lt;code&gt;default&lt;/code&gt;) or failure in decoding the machineErr itself: the &lt;code&gt;state&lt;/code&gt; is set as &lt;code&gt;failed&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; remains &lt;code&gt;InitiateVMDeletion&lt;/code&gt; as deletion is re-tried.&lt;/li&gt;
&lt;li&gt;After this the machine status is updated with the corresponding state and description.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whereas &lt;code&gt;InitiateNodeDeletion&lt;/code&gt; calls upon &lt;code&gt;deleteNodeObject&lt;/code&gt; which if it can&amp;rsquo;t find the associated node, continues the deletion flow with &lt;code&gt;description&lt;/code&gt; set to &lt;code&gt;InitiateFinalizerRemoval&lt;/code&gt; and sets the &lt;code&gt;state&lt;/code&gt; as &lt;code&gt;Processing&lt;/code&gt; otherwise &lt;code&gt;Delete()&lt;/code&gt; is called for the node which on success moves the state to &lt;code&gt;Processing&lt;/code&gt; and &lt;code&gt;InitiateFinalizerRemoval&lt;/code&gt; stages however on error switches to &lt;code&gt;failed&lt;/code&gt; state (any error other than object not found). After this the machine status is updated.&lt;/li&gt;
&lt;li&gt;At last when we have &lt;code&gt;InitiateFinalizerRemoval&lt;/code&gt;, &lt;code&gt;deleteMachineFinalizers&lt;/code&gt; is invoked which deletes &lt;code&gt;MCMFinalizerName&lt;/code&gt; if present, if there are any errors while updating the machine with the new set of finalizers, then re-queue is triggered after a ShortRetry.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;drainnode&#34;&gt;DrainNode&lt;/h4&gt;
&lt;p&gt;Check out &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/FAQ.md#how-is-the-drain-of-a-machine-implemented&#34;&gt;FAQ: How is drain implemented?&lt;/a&gt;, and the &lt;a href=&#34;https://elankath.github.io/mcmdesign/machine-controller/mc_helper_methods.html#controllerdrainnode&#34;&gt;flowchart&lt;/a&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check that the nodeName is valid, if not set &lt;code&gt;skipDrain&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check if machine is in &lt;code&gt;Ready&lt;/code&gt; or &lt;code&gt;ReadOnly&lt;/code&gt; state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If node condition is not empty and its &lt;code&gt;not Ready&lt;/code&gt; or its &lt;code&gt;ReadOnly&lt;/code&gt; and it&amp;rsquo;s been 5mins, then &lt;code&gt;forceDeleteMachines&lt;/code&gt; and &lt;code&gt;forceDeletePods&lt;/code&gt; labels are set, &lt;code&gt;printLogInitError()&lt;/code&gt; is called i.e. &lt;code&gt;description&lt;/code&gt; is set to &lt;code&gt;InitiateVMDeletion&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If skip isn&amp;rsquo;t set, then check if (MachineDrainTimeout) has occured.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;code&gt;force-deletion&lt;/code&gt; label is present on the machine or if timeout has happened then &lt;code&gt;forceDeleteMachines&lt;/code&gt; and &lt;code&gt;forceDeletePods&lt;/code&gt; labels are set and &lt;em&gt;force deletion&lt;/em&gt; is triggered otherwise &lt;em&gt;normal deletion&lt;/em&gt; is triggered.&lt;/li&gt;
&lt;li&gt;After that, &lt;code&gt;UpdateNode TerminationCondition&lt;/code&gt; is called, which checks that the &lt;code&gt;phase&lt;/code&gt; is not &lt;code&gt;CrashLoopBackOff&lt;/code&gt; or &lt;code&gt;empty&lt;/code&gt; i.e. machine is not in creation stage. Then we check if there are nodes that are already in &lt;code&gt;terminating&lt;/code&gt; condition, if not, then if &lt;code&gt;phase&lt;/code&gt; is &lt;code&gt;failed&lt;/code&gt; then &lt;code&gt;terminationCondition&lt;/code&gt; reason is set to &lt;code&gt;Unhealthy&lt;/code&gt;, otherwise it&amp;rsquo;s set to &lt;code&gt;ScaleDown&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If termination condition update results in an error in a &lt;em&gt;normal deletion&lt;/em&gt; then, &lt;code&gt;skipDrain&lt;/code&gt; is set and &lt;code&gt;state&lt;/code&gt; is set to &lt;code&gt;failed&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If termination condition update doesn&amp;rsquo;t result in an error then &lt;a href=&#34;#rundrain&#34;&gt;RunDrain&lt;/a&gt; is invoked; if drain is successful then &lt;code&gt;state&lt;/code&gt; is set to &lt;code&gt;Processing&lt;/code&gt; &amp;amp; if it&amp;rsquo;s &lt;em&gt;normal deletion&lt;/em&gt; &lt;code&gt;description&lt;/code&gt; is set to &lt;code&gt;InitiateVMDeletion&lt;/code&gt; (since regular deletion already waits for volume detach/attach) otherwise if it&amp;rsquo;s &lt;em&gt;force deletion&lt;/em&gt; then &lt;code&gt;description&lt;/code&gt; is set to &lt;code&gt;DelVolumesAttachments&lt;/code&gt;  alongwith &lt;code&gt;Processing&lt;/code&gt; &lt;code&gt;state&lt;/code&gt;. If &lt;code&gt;RunDrain&lt;/code&gt; is unsuccessful however and its &lt;em&gt;normal deletion&lt;/em&gt; then &lt;code&gt;description&lt;/code&gt; is set to &lt;code&gt;InitiateDrain&lt;/code&gt; with &lt;code&gt;failed&lt;/code&gt; &lt;code&gt;state&lt;/code&gt; for a retry.&lt;/li&gt;
&lt;li&gt;To summarize the above:
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;   To perform forceful machine drain/delete either:
   1. force-deletion: &amp;#34;True&amp;#34; label must be present
   2. Deletion operation is more than drain-timeout minutes old
   3. Last machine drain had failed
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;skipDrain&lt;/code&gt; is set, then set the state to &lt;code&gt;Processing&lt;/code&gt;, LastOperation &lt;code&gt;type&lt;/code&gt; to &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt; is set to &lt;code&gt;InitiateVMDeletion&lt;/code&gt; by &lt;code&gt;printLogInitError()&lt;/code&gt; and it&amp;rsquo;s re-queued.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;rundrain&#34;&gt;RunDrain&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;drainContext&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RunCordonOrUncordon&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;First we try to get the associated node, if it results in an error that means the node doesn&amp;rsquo;t exist i.e. deletion was triggered during the machine creation process hence there&amp;rsquo;s nothing to do. If the node is there and it&amp;rsquo;s &lt;code&gt;Spec.Unschedulable&lt;/code&gt; is true, then there&amp;rsquo;s nothing to do otherwise &lt;code&gt;Unschedulable&lt;/code&gt; is set to true. (&lt;em&gt;Cordoning&lt;/em&gt; means sealing off/preventing access)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;WaitForCacheSync&lt;/code&gt; is processed for the pod informer cache to sync.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;deleteOrEvictPodsSimple&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Calls &lt;code&gt;getPodsForDeletion&lt;/code&gt; which lists all &lt;code&gt;pods.Spec.NodeName&lt;/code&gt; matching our node, (TODO: check podFilter) and if there aren&amp;rsquo;t any errors, then returns the list of pods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Following which we &lt;code&gt;deleteOrEvictPods&lt;/code&gt;: Here, we first check if the server supports eviction by &lt;code&gt;SupportEviction&lt;/code&gt; and if &lt;code&gt;ForceDeletePods&lt;/code&gt; is false then we call &lt;code&gt;evictPods&lt;/code&gt; which performs &lt;em&gt;normal eviction&lt;/em&gt; of the pods, parallelly &lt;code&gt;evictPodsWithoutPv&lt;/code&gt; and serially (by sorting by Priority) &lt;code&gt;evictPodsWithPv&lt;/code&gt; for ones having volume attached since it needs to wait for volume detachment. Both of these ways attempt to &lt;code&gt;evictPod&lt;/code&gt; if supported for &lt;code&gt;MaxEvictRetries&lt;/code&gt; times failing which they &lt;code&gt;deletePod&lt;/code&gt;. If &lt;code&gt;forceDeletePods&lt;/code&gt; is true, then &lt;em&gt;forceful eviction&lt;/em&gt; of the pods happens and all pods are evicted parallelly by calling &lt;code&gt;evictPodsWithPv&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case there are errors while performing either &lt;em&gt;evictPod&lt;/em&gt; or &lt;em&gt;deletePod&lt;/em&gt;, it could be that the pod wasn&amp;rsquo;t evicted due to PDB violation, hence we get the PDB for the pod and check if its misconfigured by verifying that the &lt;code&gt;Generation&lt;/code&gt; is same as &lt;code&gt;Status.ObservedGeneration&lt;/code&gt; and that &lt;code&gt;CurrentHealthy&lt;/code&gt; pods are more than &lt;code&gt;ExpectedPods&lt;/code&gt; (which should be more than 0) and &lt;code&gt;DisruptionsAllowed&lt;/code&gt; is zero. All these scenarios result in a misconfigured PDB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If it&amp;rsquo;s not a case of misconfigured PDB then we sleep for &lt;code&gt;PodEvictionRetryInterval&lt;/code&gt; and then move to next iteration of the eviction attempt. &lt;code&gt;TODO&lt;/code&gt; &lt;code&gt;TerminationGracePeriod&lt;/code&gt;, &lt;code&gt;waitForDelete&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;References: &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/disruptions/&#34;&gt;Disruptions&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/tasks/run-application/configure-pdb/&#34;&gt;Configuring PDB&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/concepts/scheduling-eviction/api-eviction/&#34;&gt;API Eviction&lt;/a&gt;, &lt;a href=&#34;https://elankath.github.io/mcmdesign/machine-controller/node_drain.html#drainoptionsevictpodwithoutpvinternal&#34;&gt;evictPodsWoPVInternal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Check &lt;a href=&#34;https://elankath.github.io/mcmdesign/machine-controller/node_drain.html#drainoptionsevictpodswithpvinternal&#34;&gt;evictPodsWithPVInternal&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If there are any failures in &lt;code&gt;deleteOrEvictPods&lt;/code&gt;, they are reported as pendingPods.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;triggercreationflow&#34;&gt;TriggerCreationFlow&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Update MachineRequest&amp;rsquo;s secret by processing the secret with (TODO) &lt;code&gt;addBootstrapTokenToUserData&lt;/code&gt; and &lt;code&gt;addMachineNameToUserData&lt;/code&gt; which checks if &lt;code&gt;secret[&amp;quot;userData&amp;quot;]&lt;/code&gt; exists, then replacing &lt;code&gt;MachineNamePlaceholder&lt;/code&gt; &amp;lt;MACHINE_NAME&amp;gt; with the actual &lt;code&gt;machine.Name&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;After that, the secret is used alongwith the Machine and MachineClass to create a &lt;a href=&#34;#getmachinestatus&#34;&gt;GetMachineStatus&lt;/a&gt;Request which responds with &lt;code&gt;providerId&lt;/code&gt; and associated &lt;code&gt;nodeName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If there is no error with the GetMachineStatusRequest and the machine&amp;rsquo;s &amp;ldquo;node&amp;rdquo; label or &lt;code&gt;providerID&lt;/code&gt; is empty then the required VM is found and the node and providerID for the machine is updated. (&lt;code&gt;updateLabels&lt;/code&gt;: adds the necessary labels, annotations with MachinePriority as 3 if unset and updates the providerID)&lt;/li&gt;
&lt;li&gt;If there is an error in getting the machine status and the ErrCode is &lt;code&gt;NotFound&lt;/code&gt; or &lt;code&gt;Unimplemented&lt;/code&gt; and if the &amp;ldquo;node&amp;rdquo; label is not present on the machine then: driver.&lt;a href=&#34;#createmachine&#34;&gt;CreateMachine&lt;/a&gt;() is invoked which on success gives us the &lt;code&gt;providerId&lt;/code&gt; and the &lt;code&gt;nodeName&lt;/code&gt;, then we try to &lt;code&gt;Get()&lt;/code&gt; the returned &lt;code&gt;nodeName&lt;/code&gt; to check if a node object already exists. If so, it is treated as a stale node and &lt;code&gt;driver.DeleteMachine()&lt;/code&gt; is triggered and the machine object is marked as &lt;code&gt;state&lt;/code&gt; &lt;code&gt;failed&lt;/code&gt;, &lt;code&gt;phase&lt;/code&gt; being &lt;code&gt;failed&lt;/code&gt;  with LastOperation &lt;code&gt;description&lt;/code&gt; set as &amp;ldquo;&lt;code&gt;VM using old node obj&lt;/code&gt;&amp;rdquo; and then its status is updated. NOTE: Also, &lt;code&gt;uninitializedMachine&lt;/code&gt; is set to true.&lt;/li&gt;
&lt;li&gt;If the returned codes are &lt;code&gt;Unknown&lt;/code&gt;, &lt;code&gt;DeadlineExceeded&lt;/code&gt;, &lt;code&gt;Aborted&lt;/code&gt; or &lt;code&gt;Unavailable&lt;/code&gt;, then again &lt;code&gt;machineStatusUpdate&lt;/code&gt; is called with &lt;code&gt;state&lt;/code&gt; set to &lt;code&gt;failed&lt;/code&gt; and &lt;code&gt;phase&lt;/code&gt; being &lt;code&gt;failed&lt;/code&gt; or &lt;code&gt;crashloopbackoff&lt;/code&gt; depending upon whether or not MachineCreationTimeout happened.&lt;/li&gt;
&lt;li&gt;Whereas the case when returned code is &lt;code&gt;Uninitialized&lt;/code&gt;, the flag &lt;code&gt;uninitializedMachine&lt;/code&gt; is set to true. In any other scenario, a &lt;code&gt;machineStatusUpdate&lt;/code&gt; call similar to the previous case is made with a re-queue call.&lt;/li&gt;
&lt;li&gt;In case the &lt;code&gt;uninitializedMachine&lt;/code&gt; flag is set, &lt;code&gt;initializeMachine&lt;/code&gt; is called for starting the VM instance for the machine, it delegates the task to driver.&lt;a href=&#34;#initializemachine&#34;&gt;InitializeMachine&lt;/a&gt; which if it returns &lt;code&gt;Unimplemented&lt;/code&gt; error code, then VM initialization is skipped as provider doesn&amp;rsquo;t support it otherwise &lt;code&gt;machineStatusUpdate&lt;/code&gt; call is made with &lt;code&gt;failed&lt;/code&gt; &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;crashloopbackoff&lt;/code&gt; or &lt;code&gt;failed&lt;/code&gt; &lt;code&gt;phase&lt;/code&gt; based on MachineCreationTimeout. Upon successful initialization, an error is returned by &lt;code&gt;triggerCreationFlow&lt;/code&gt; for another re-queue.&lt;/li&gt;
&lt;li&gt;If however the machine &lt;code&gt;phase&lt;/code&gt; is &lt;code&gt;empty&lt;/code&gt; (creation) or &lt;code&gt;crashloopbackoff&lt;/code&gt; then &lt;code&gt;state&lt;/code&gt; is set as &lt;code&gt;Processing&lt;/code&gt;, &lt;code&gt;phase&lt;/code&gt; as &lt;code&gt;Pending&lt;/code&gt; and a &lt;code&gt;UpdateStatus&lt;/code&gt; call is made for the machine.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;safety-controller&#34;&gt;Safety Controller&lt;/h2&gt;
&lt;h3 id=&#34;reconcile-cluster-machine-safety-orphan-vms&#34;&gt;Reconcile Cluster Machine Safety Orphan VMs&lt;/h3&gt;
&lt;p&gt;It lists all the VMs in the cloud matching the &lt;code&gt;tag&lt;/code&gt; of given cluster name and maps the VMs with the &lt;code&gt;machine&lt;/code&gt; objects using the &lt;code&gt;ProviderID&lt;/code&gt; field. VMs without any backing machine objects are logged and deleted after confirmation. It runs every &lt;code&gt;MachineSafetyOrphanVMsPeriod&lt;/code&gt; duration (15 mins). It runs:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;checkMachineClasses&lt;/code&gt;: fetches all the MachineClasses and for each of them calls &lt;code&gt;checkMachineClass&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;It fetches their &lt;code&gt;secretData&lt;/code&gt;, lists all the &lt;code&gt;Machines&lt;/code&gt; referencing that class, updates their cache via &lt;code&gt;WaitForCacheSync&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then it iterates over the MachineList returned by &lt;a href=&#34;#listmachines&#34;&gt;ListMachines&lt;/a&gt;: &lt;code&gt;&amp;lt;providerID, machineName&amp;gt;&lt;/code&gt;, fetching each machine and ensuring that the providerID matches.&lt;/li&gt;
&lt;li&gt;If it doesn&amp;rsquo;t and the &lt;code&gt;phase&lt;/code&gt; is &amp;quot;&amp;quot; or &lt;code&gt;crashloopbackoff&lt;/code&gt;, then it continues iterating otherwise it creates a dummy machine object for &lt;code&gt;DeleteMachineRequest&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AnnotateNodesUnmanagedByMCM&lt;/code&gt;: fetches all the nodes on the target cluster then iterates over them:
&lt;ul&gt;
&lt;li&gt;Calls &lt;code&gt;getMachineFromNode&lt;/code&gt; which returns &lt;code&gt;errMultipleMachineMatch&lt;/code&gt; or &lt;code&gt;errNoMachineMatch&lt;/code&gt; depending on the number of machines associated with the node. If there&amp;rsquo;s only one machine, then it returns the machine.&lt;/li&gt;
&lt;li&gt;If we get &lt;code&gt;errNoMachineMatch&lt;/code&gt; then we compare &lt;code&gt;currentTime - nodeCreationTime&lt;/code&gt; with MachineCreationTimeout, if timeout has occured and the node doesn&amp;rsquo;t have &lt;code&gt;NotManagedByMCM&lt;/code&gt; annotation present on it then it means there&amp;rsquo;s no backing machine object for the node. So we annotate it with &lt;code&gt;NotManagedByMCM&lt;/code&gt; and then update the node.&lt;/li&gt;
&lt;li&gt;If it returns the machine having &lt;code&gt;NotManagedByMCM&lt;/code&gt; annotation then we remove the annotation and update the node.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reconcile-cluster-machine-safety-api-server&#34;&gt;Reconcile Cluster Machine Safety API Server&lt;/h3&gt;
&lt;p&gt;Freezes &lt;code&gt;MachineDeployment&lt;/code&gt; and &lt;code&gt;MachineSet&lt;/code&gt; controller if number of &lt;code&gt;machine&lt;/code&gt; objects goes beyond a certain threshold on top of &lt;code&gt;Spec.Replicas&lt;/code&gt; by applying a &lt;code&gt;freeze&lt;/code&gt; label. It also freezes the functionality of MCM if &lt;code&gt;target-apiserver&lt;/code&gt; or &lt;code&gt;control-apiserver&lt;/code&gt; is not reachable and unfreezes once situation becomes normal.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Checks if &lt;code&gt;MachineControllerFrozen&lt;/code&gt; is true if it is, then it checks if &lt;code&gt;isApiServerUp&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;isApiServerUp&lt;/code&gt; makes a dummy call to control APIServer (&lt;code&gt;controlMachineClient&lt;/code&gt;) and target APIServer (&lt;code&gt;targetCoreClient&lt;/code&gt;) and if either gives an error different from isNotFound error, it returns false. If it returns true then we unfreeze them by iterating over them and if their &lt;code&gt;phase&lt;/code&gt; is &lt;code&gt;Unknown&lt;/code&gt;, we get machine from &lt;code&gt;controlMachineClient&lt;/code&gt; and set the phase as &lt;code&gt;Running&lt;/code&gt;, &lt;code&gt;state&lt;/code&gt; as &lt;code&gt;successful&lt;/code&gt; and &lt;code&gt;description&lt;/code&gt; as &lt;em&gt;&amp;ldquo;Machine Health Timeout was reset due to APIServer being unreachable&amp;rdquo;&lt;/em&gt;. After which we update the status and &lt;code&gt;enqueueMachineAfter&lt;/code&gt; 30 seconds for reconcile and set &lt;code&gt;MachineControllerFrozen&lt;/code&gt; to false &amp;amp; &lt;code&gt;APIserverInactiveStartTime&lt;/code&gt; to nil.&lt;/li&gt;
&lt;li&gt;If initially &lt;code&gt;MachineControllerFrozen&lt;/code&gt; was false, and &lt;code&gt;isApiServerUp&lt;/code&gt; returned false i.e. its not up then we set &lt;code&gt;APIserverInactiveStartTime&lt;/code&gt; as current time if its unset and check if time passed since Inactive time is more than &lt;code&gt;MachineSafety APIServer StatusCheckTimeout&lt;/code&gt;, if so we set &lt;code&gt;MachineControllerFrozen&lt;/code&gt; to true and then re-enqueue the API Server check.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;machine-controller-manager&#34;&gt;Machine Controller Manager&lt;/h2&gt;
&lt;p&gt;Handles reconciliation of &lt;code&gt;MachineDeployment&lt;/code&gt; and &lt;code&gt;MachineSet&lt;/code&gt; objects.&lt;/p&gt;
&lt;h3 id=&#34;reconcile-cluster-machine-set&#34;&gt;Reconcile Cluster Machine Set&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fetch the &lt;code&gt;MachineSet&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ValidateMachineSetSpec&lt;/code&gt;: Ensures that &lt;code&gt;spec.Replicas&lt;/code&gt; is greater than or equal to zero and &lt;code&gt;selector.matchLabels&lt;/code&gt; matches &lt;code&gt;template.metadata.labels&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If DeletionTimestamp is not set, then &lt;code&gt;addMachineSetFinalizers&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LabelSelectorAsSelector converts MachineSet selector to a selector object that&amp;rsquo;s used by &lt;code&gt;claimMachines&lt;/code&gt; function that creates a &lt;code&gt;*Machine Controller Ref Manager*&lt;/code&gt; tagged with a &lt;code&gt;CanAdopt&lt;/code&gt; function that first fetches &lt;code&gt;fresh&lt;/code&gt; i.e. latest version of the machineSet and then verifies its UID with the existing &lt;code&gt;machineSet&lt;/code&gt;&amp;rsquo;s UID to ensure that the machineSet isn&amp;rsquo;t being deleted. (This function is later used by &lt;code&gt;AdoptMachine&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ClaimMachine&lt;/code&gt; indirectly calls &lt;code&gt;ClaimObject&lt;/code&gt; with &lt;code&gt;Match&lt;/code&gt;, &lt;code&gt;Adopt&lt;/code&gt; and &lt;code&gt;Release&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Match&lt;/code&gt;: Checks if the selector matches, after which it runs a set of &lt;code&gt;filter&lt;/code&gt; functions. On success, it returns true.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AdoptMachine&lt;/code&gt; (Adopt): Runs the previously created &lt;code&gt;CanAdopt&lt;/code&gt; function to verify that the machine can be adopted by the machineSet, if so then &lt;code&gt;PatchMachine&lt;/code&gt; with the &lt;em&gt;OwnerRef&lt;/em&gt; to the MachineSet and add to &lt;code&gt;claimedMachines&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReleaseMachine&lt;/code&gt; (Release): Sends a &lt;code&gt;deleteOwnerRefPatch&lt;/code&gt; to free the Machine from controller. On patching, &lt;code&gt;NotFound&lt;/code&gt; and &lt;code&gt;IsInvalid&lt;/code&gt; errors are ignored since if the machine doesn&amp;rsquo;t exist or if it has no ownerRef or if the UID doesn&amp;rsquo;t match (implies machine was recreated after deletion) then it&amp;rsquo;s fine.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ClaimObject:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;It will reconcile the following:
​  - Adopt orphans if the match function returns true.
​  - Release owned objects if the match function returns false.
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;Get the &lt;code&gt;ownerRef&lt;/code&gt; using &lt;code&gt;GetControllerOf&lt;/code&gt;, it it&amp;rsquo;s not nil, check if
ownerRef.UID is the same as the machineSet&amp;rsquo;s UUID. (&lt;a href=&#34;https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids&#34;&gt;UID&lt;/a&gt; is k8s system generated string to uniquely identify object).  If the DeletionTimestamp is not set (nil), and the selector &lt;code&gt;match&lt;/code&gt; fails, then attempt a &lt;code&gt;release&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;In case the ownerRef was nil, check if machineSet is not scheduled for deletion (&lt;code&gt;DeletionTimestamp&lt;/code&gt; nil) and the &lt;code&gt;match&lt;/code&gt; was succesful. If so, then if the machine isn&amp;rsquo;t scheduled for deletion, attempt &lt;code&gt;Adopt&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After the list of claimedMachines if procured, we call &lt;code&gt;syncMachinesNodeTemplates&lt;/code&gt;, &lt;code&gt;syncMachinesConfig&lt;/code&gt; &amp;amp; &lt;code&gt;syncMachineClassKind&lt;/code&gt; which goes through the list and checks if a machine requires updation of the &lt;code&gt;Nodetemplate&lt;/code&gt;, &lt;code&gt;MachineConfiguration&lt;/code&gt; and &lt;code&gt;Class.Kind&lt;/code&gt; and copies them from the &lt;code&gt;machineSet&lt;/code&gt; to the &lt;code&gt;machine&lt;/code&gt; if needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then check if the &lt;em&gt;machineSet&lt;/em&gt; is scheduled for deletion i.e. &lt;code&gt;DeletionTimestamp&lt;/code&gt; is not nil, if there aren&amp;rsquo;t any claimedMachines for this machineSet (len(filteredMachines) is 0) then remove the finalizer from the &lt;em&gt;machineSet&lt;/em&gt; otherwise trigger deletion of the claimedMachines via &lt;code&gt;terminateMachines&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In case the &lt;em&gt;machineSet&lt;/em&gt; wasn&amp;rsquo;t scheduled for deletion, &lt;code&gt;manageReplicas&lt;/code&gt; is called:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Gets the MetaNameSpaceKey for the &lt;em&gt;machineSet&lt;/em&gt; and creates a list of activeMachines (&lt;code&gt;phase&lt;/code&gt; != &lt;code&gt;failed&lt;/code&gt; or &lt;code&gt;terminating&lt;/code&gt;) and staleMachines (&lt;code&gt;phase&lt;/code&gt; is &lt;code&gt;failed&lt;/code&gt;) from the list of claimedMachines.&lt;/li&gt;
&lt;li&gt;If there are staleMachines then they are scheduled for deletion, &lt;code&gt;terminateMachines&lt;/code&gt; is called.&lt;/li&gt;
&lt;li&gt;Then we check the difference between the number of activeMachines and the number of &lt;code&gt;Replicas&lt;/code&gt; specified by the &lt;em&gt;machineSet&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;If the activeMachines are less, then count (diff) is set to &lt;code&gt;min(BurstReplicas: 100, Replicas - len(activeMachines))&lt;/code&gt; and &amp;lt;TODO ExpectCreations&amp;gt; &lt;code&gt;slowStartBatch&lt;/code&gt; is called which calls a function &lt;code&gt;CreateMachines With ControllerRef&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; times, starting slow with group of &lt;code&gt;SlowStartInitialBatchSize&lt;/code&gt; (1) to check for errors, then speeding up if calls succeed. Within each batch, it may call the function multiple times concurrently. If a whole batch succeeds, the next batch gets exponentially larger.&lt;/li&gt;
&lt;li&gt;&amp;lt;TODO&amp;gt; skippedMachines CreationObserved&lt;/li&gt;
&lt;li&gt;In case the activeMachines are more than the &lt;code&gt;Replica&lt;/code&gt; count, then deletion must be triggered. &lt;code&gt;diff&lt;/code&gt; is set to &lt;code&gt;min(BurstReplicas: 100, len(activeMachines) - Replicas)&lt;/code&gt; and then the activeMachines are sorted in the order &lt;code&gt;NonReady, Ready, Unscheduled, Scheduled, Pending, Running&lt;/code&gt;. &amp;lt;TODO: ExpectDeletions&amp;gt;. After getting the sorted list, the machines are deleted by called &lt;code&gt;terminateMachines&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then MachineSet status is calculated and updated following which reconcile is enqueued after 10 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;expectations&#34;&gt;Expectations&lt;/h4&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/elastic/cloud-on-k8s/blob/6c1bf954555e5a65a18a17450ccddab46ed7e5a5/pkg/controller/common/expectations/expectations.go#L16-L78&#34;&gt;Reference&lt;/a&gt;, and &lt;a href=&#34;https://github.com/elastic/cloud-on-k8s/blob/b16c2c085d993b9287276a2b833d090437221b41/pkg/controller/elasticsearch/driver/expectations.go#L17&#34;&gt;implementation&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Expectations are in-memory data structures that we use to register an action we performed during a reconciliation. They are needed since kubernetes client caches all resources locally, and relies on apiserver watches to maintain the cache up-to-date, and they are helpful when trying to control how many creations/deletions/upgrades happen in parallel. A controller isn&amp;rsquo;t synced till its expectations are either fulfilled, or expire and controllers that don&amp;rsquo;t set expectations will get woken up for every matching controllee.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a &lt;code&gt;SatisfiedExpectations&lt;/code&gt; method that returns true if the required &lt;em&gt;adds/dels&lt;/em&gt; for the given controller have been observed. &lt;em&gt;Add/del&lt;/em&gt; counts are established by the controller at sync time, and updated as controllees are observed by the controller manager. That is, if the resources in local cache do not match what is expected, its safer to not move on with reconciliation as that may lead to unexpected number of creations/deletions.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;machineSet&lt;/code&gt; controller, the &lt;code&gt;Satisfied&lt;/code&gt; method is inactive hence all the creation/deletion expectations that are modified are ineffective and can be ignored for now.&lt;/p&gt;
&lt;h3 id=&#34;reconcile-cluster-machine-deployment&#34;&gt;Reconcile Cluster Machine Deployment&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Fetch the deployment by getting the name from &lt;code&gt;SplitMetaNamespaceKey&lt;/code&gt;, then validate it by ensuring &lt;code&gt;Replicas&lt;/code&gt; is not negative and that &lt;code&gt;selector.matchLabels&lt;/code&gt; is consistent with &lt;code&gt;template.metadata.labels&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add finalizers if DeletionTimestamp is nil, then check if &lt;code&gt;Selector&lt;/code&gt; is empty i.e. the deployment is selecting all machines, if so record that event and set &lt;code&gt;Status.ObservedGeneration&lt;/code&gt; to &lt;code&gt;Generation&lt;/code&gt; if it&amp;rsquo;s less and then update the status.&lt;/li&gt;
&lt;li&gt;Then &lt;code&gt;getMachineSets&lt;/code&gt; is called which uses a controller reference manager to handle ownership and internally calls &lt;code&gt;ClaimMachineSets&lt;/code&gt; (acts in a similar fashion to &lt;code&gt;ClaimMachine&lt;/code&gt; in &lt;a href=&#34;#reconcile-cluster-machine-set&#34;&gt;Reconcile Cluster Machine Set&lt;/a&gt; by leveraging &lt;code&gt;ClaimObject&lt;/code&gt; however it doesn&amp;rsquo;t run any filters) to get the machineSets owned by the deployment via adoption/orphaning with a similar &lt;code&gt;CanAdopt&lt;/code&gt; function that fetches a fresh copy of the deployment object and compares UID to ensure that the deployment isn&amp;rsquo;t being deleted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getMachineMap&lt;/code&gt;: Creates a map from MachineSet UID to list of Machines it controls; used to verify machine labels and handle recreate deployments; it groups machines by their controller reference.&lt;/li&gt;
&lt;li&gt;If DeletionTimestamp is set &lt;strong&gt;and&lt;/strong&gt; deployment has &lt;code&gt;DeleteFinalizerName&lt;/code&gt; &lt;strong&gt;and&lt;/strong&gt; if there are no MachineSets referring to the deployment &lt;em&gt;then&lt;/em&gt; remove the finalizers. If there are MachineSets owned by the deployment then &lt;code&gt;terminateMachineSets&lt;/code&gt; is called after which &lt;code&gt;syncStatusOnly&lt;/code&gt; calls &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; that lists the &lt;em&gt;old&lt;/em&gt; and new (&lt;strong&gt;with updated revision&lt;/strong&gt;) MachineSets and machines for the deployment and applies &lt;code&gt;machine-template-hash&lt;/code&gt; to the adopted ones and then deployment status is synced.&lt;/li&gt;
&lt;li&gt;Ref: &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#pausing-and-resuming-a-deployment&#34;&gt;Pausing a deployment&lt;/a&gt;, &lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#deployment-status&#34;&gt;Deployment Status&lt;/a&gt; &amp;lt;TODO: Why?! are we doing this&amp;gt;
&lt;code&gt;checkPausedConditions&lt;/code&gt; fetches the condition with &lt;code&gt;type&lt;/code&gt; as &lt;code&gt;Progressing&lt;/code&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;code&gt;cond.Reason&lt;/code&gt; is &lt;code&gt;TimedOutReason&lt;/code&gt;, return without overwriting with  paused condition.&lt;/li&gt;
&lt;li&gt;Check if &lt;code&gt;pausedCondExists&lt;/code&gt; by seeing if cond.Reason is &lt;code&gt;PausedMachineDeployReason&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;Spec.Paused&lt;/code&gt; is true and &lt;code&gt;pausedCondExists&lt;/code&gt; is false, then update the condition with &lt;code&gt;Reason&lt;/code&gt; as &lt;code&gt;PausedMachineDeployReason&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; as &lt;em&gt;&amp;ldquo;Deployment is paused&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Otherwise if &lt;code&gt;Spec.Paused&lt;/code&gt; is false and &lt;code&gt;pausedCondExists&lt;/code&gt; is true, then update the condition with &lt;code&gt;Reason&lt;/code&gt; as &lt;code&gt;ResumedMachineDeployReason&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; as &lt;em&gt;&amp;ldquo;Deployment is resumed&amp;rdquo;&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Update the deployment status.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Then we check if &lt;code&gt;Spec.Paused&lt;/code&gt; is true, if so it implies that &lt;em&gt;Scaling was detected for deployment which is paused&lt;/em&gt;, so &lt;code&gt;sync&lt;/code&gt; is called (which has the responsibility of reconciling deployments on scaling/when paused)
&lt;ol&gt;
&lt;li&gt;First &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; is called to get list of new and old machineSets.&lt;/li&gt;
&lt;li&gt;Then &lt;a href=&#34;#scale&#34;&gt;Scale&lt;/a&gt;() method is invoked, following which &lt;code&gt;spec.Paused&lt;/code&gt; is checked, if deployment is paused and there&amp;rsquo;s no rollback in progress i.e. &lt;code&gt;spec.RollbackTo&lt;/code&gt; is nil, then deployment &lt;code&gt;cleanup&lt;/code&gt; is called for. The cleanup filters the old machineSet to get ones which are currently active (i.e. DeletionTimestamp is not set) and then deletes (note that if any delete fails, it stops the cleanup process since the failure could be due to api server overload) all but &lt;code&gt;RevisionHistoryLimit&lt;/code&gt; number of machineSets (in this process it checks if the filtered machineSets have non-zero replica counts and avoids deleting them).&lt;/li&gt;
&lt;li&gt;Otherwise the new machineSets, if any are added to set of all machineSets and their status is synced by calling &lt;code&gt;sync MachineDeployment Status&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If the deployment wasn&amp;rsquo;t paused and &lt;code&gt;Spec.RollbackTo&lt;/code&gt; is non-nil i.e. there exists a revision that the deployment is rolling back to, the &lt;code&gt;rollback()&lt;/code&gt; method is invoked:
&lt;ol&gt;
&lt;li&gt;First &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; is called to get list of new and old machineSets.&lt;/li&gt;
&lt;li&gt;Ref: &lt;a href=&#34;https://learnk8s.io/kubernetes-rollbacks&#34;&gt;k8s rollbacks&lt;/a&gt;, Then we check the rollback revision version (&lt;code&gt;RollbackTo.Revision&lt;/code&gt;), if its zero then we find the &lt;code&gt;LastRevision()&lt;/code&gt; i.e. second max revision number by iterating over all machineSets and if its also zero, then that means we were unable to find the last revision and we give up rollback (&lt;em&gt;update Deployment and Clear Rollback&lt;/em&gt; To is called)&lt;/li&gt;
&lt;li&gt;Otherwise we proceed with the rollback: Iterating over the list of machineSets, we get the &lt;code&gt;Revision&lt;/code&gt; for each machineSet and if it matches the &lt;code&gt;RollbackTo.Revision&lt;/code&gt;, then the &lt;code&gt;PreferNoSchedule&lt;/code&gt; taint is removed from the nodes which are backing that machineSet.&lt;/li&gt;
&lt;li&gt;After taint removal, &lt;code&gt;rollbackToTemplate()&lt;/code&gt; method is called which compares the templates (hash) of the deployment with the matching machineSet and updates the the &lt;em&gt;template&lt;/em&gt; of the deployment incase they&amp;rsquo;re different (Set From Machine Set Template) and the &lt;em&gt;annotations&lt;/em&gt; of the deployment to the rollbacked machineSet revision (Set Machine Deployment Annotations To).&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If it wasn&amp;rsquo;t a rollback event either, then we check if its a &lt;code&gt;ScalingEvent&lt;/code&gt; i.e. there are activeMachineSets (found by filtering as new MachineSets with Replicas more than 0). For scaling events &lt;code&gt;sync&lt;/code&gt; is called (check above Paused discussion to see what it does)
&lt;ol&gt;
&lt;li&gt;In case there&amp;rsquo;s no activeMachineSets and the &lt;code&gt;Replicas&lt;/code&gt; on the deployment is more than 0 i.e. its a &lt;em&gt;scale from zero&lt;/em&gt; scenario so its considered as a scalingEvent.&lt;/li&gt;
&lt;li&gt;Otherwise when there are activeMachineSets with &lt;code&gt;desired-replicas&lt;/code&gt; annotation not equal to the deployment replicas then also its a scalingEvent.&lt;/li&gt;
&lt;li&gt;If no such machineSets exist i.e. all the active ones have the same amount of desired-replicas as the deployment replica then its not a scaling event.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;In case none of the scenarios were true i.e. not paused, not rolling back, and not scaling, then we execute the deployment strategy which is either &lt;a href=&#34;#recreate&#34;&gt;Recreate&lt;/a&gt; or &lt;a href=&#34;#rolling&#34;&gt;Rolling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;scale&#34;&gt;Scale&lt;/h4&gt;
&lt;h4 id=&#34;recreate&#34;&gt;Recreate&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;First &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; is called to get list of new and old machineSets. Old MS is filtered to find the active ones i.e. those having non-zero replicas.&lt;/li&gt;
&lt;li&gt;Create annotations to disable CA performing scale-downs during rollout and apply them to all machineSets if &lt;code&gt;autoscaler ScaleDown Annotation During Rollout&lt;/code&gt; bool is true &lt;em&gt;and&lt;/em&gt; there are old MS that haven&amp;rsquo;t been scaled to zero yet.&lt;/li&gt;
&lt;li&gt;Then activeOld MS are scaled down:
&lt;ol&gt;
&lt;li&gt;If replica for the MS is already zero then scaling is not required.&lt;/li&gt;
&lt;li&gt;Otherwise MS has to be scaled-down, its annotated with &lt;code&gt;desiredReplicas&lt;/code&gt; being the deployment Replicas and the &lt;code&gt;maxReplicas&lt;/code&gt; being &lt;code&gt;maxSurge&lt;/code&gt; amount more than that. &lt;code&gt;maxSurge&lt;/code&gt; is 0 for &lt;em&gt;non-rolling&lt;/em&gt; updates.&lt;/li&gt;
&lt;li&gt;In case scaling was required, after adding the annotations, the old MS is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If a scale-down occured or if there are old MS having non-zero replicas then, &lt;code&gt;Sync RolloutStatus&lt;/code&gt; is invoked:
&lt;ol&gt;
&lt;li&gt;TODO calculateDeploymentStatus&lt;/li&gt;
&lt;li&gt;Then we get all the MD conditions having &lt;code&gt;type&lt;/code&gt; as &lt;code&gt;Progressing&lt;/code&gt; and check if the current deployment is complete or not by:
&lt;ul&gt;
&lt;li&gt;Ensuring &lt;code&gt;Replicas&lt;/code&gt; and &lt;code&gt;UpdatedReplicas&lt;/code&gt; are the same&lt;/li&gt;
&lt;li&gt;There is a MD condition of &lt;code&gt;Progressing Type&lt;/code&gt; having &lt;code&gt;Reason&lt;/code&gt; as &amp;ldquo;&lt;em&gt;New Machine Set Available&lt;/em&gt;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If its not a complete deployment then i.e. rollout hasn&amp;rsquo;t happened then progress estimation happens:
&lt;ul&gt;
&lt;li&gt;In case deployment is &lt;strong&gt;completed&lt;/strong&gt; (UpdatedReplicas, AvailableReplicas and Replicas are the same and new ObserverGen is more than or equal to MD generation) i.e. all desired replicas are updated and available, no old machine are running; then the condition is updated to &lt;code&gt;Progressing&lt;/code&gt; with  &amp;ldquo;&lt;em&gt;New Machine Set Available&lt;/em&gt;&amp;rdquo; (The conditions talked about in the previous point).&lt;/li&gt;
&lt;li&gt;If its in &lt;strong&gt;progressing&lt;/strong&gt; state, then the progress is estimated by comparing the current and new status of the deployment. Specifically, when new machines are scaled up or become ready/available or old machines are scaled down. In this case, the &lt;code&gt;Reason&lt;/code&gt; is set to &amp;ldquo;&lt;em&gt;Machine Set Updated&lt;/em&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;If its in &lt;strong&gt;timed out&lt;/strong&gt; state, then &amp;ldquo;Progressing&amp;rdquo; state is set to false and the reason is updated as &amp;ldquo;&lt;em&gt;Progress Deadline Exceeded&lt;/em&gt;&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Then we fetch all the failure conditions of the &lt;code&gt;type&lt;/code&gt; &amp;ldquo;&lt;em&gt;Replica Failure&lt;/em&gt;&amp;rdquo; for MS and convert them to deployment conditions. In case we don&amp;rsquo;t find any, we remove &amp;ldquo;Replica Failure&amp;rdquo; condition from the deployment if present.&lt;/li&gt;
&lt;li&gt;If there aren&amp;rsquo;t any status changes to be done on the deployment, then its re-queued otherwise the status is updated.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;If there is a need to create new MS i.e. new MS from initial &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; is nil, then the function is called again with the creation flag set to true which creates the new MS.&lt;/li&gt;
&lt;li&gt;The new MS are scaled up to deployment&amp;rsquo;s &lt;code&gt;Replicas&lt;/code&gt; count and the annotations for &lt;code&gt;desiredReplicas&lt;/code&gt; and &lt;code&gt;maxReplicas&lt;/code&gt; are added.&lt;/li&gt;
&lt;li&gt;Again the progress is estimated and if deployment is &lt;strong&gt;completed&lt;/strong&gt; then, autoscaler annotations are removed, deployment is &lt;em&gt;cleaned up&lt;/em&gt;. At the end &lt;code&gt;Sync RolloutStatus&lt;/code&gt; is called again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;rolling&#34;&gt;Rolling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;First &lt;code&gt;getMSAndSyncRevision&lt;/code&gt; is called to get list of new and old machineSets. Create annotations to disable CA performing scale-downs during rollout and apply them to all machineSets if &lt;code&gt;autoscaler ScaleDown Annotation During Rollout&lt;/code&gt; bool is true &lt;em&gt;and&lt;/em&gt; there are old MS that haven&amp;rsquo;t been scaled to zero yet.&lt;/li&gt;
&lt;li&gt;Also, nodes backing all the old MS have &amp;ldquo;PreferNoSchedule&amp;rdquo; taint added to them to avoid scheduling on them. And &lt;code&gt;reconcileNewMS&lt;/code&gt; is called to try to scale up, if possible:
&lt;ol&gt;
&lt;li&gt;Check if newMS.Replicas is same as deployment&amp;rsquo;s Replicas, that means there&amp;rsquo;s no scaling needed.&lt;/li&gt;
&lt;li&gt;If newMS.Replicas are more then scale-down needs to happen alongwith updation of &lt;code&gt;desiredReplicas&lt;/code&gt; and &lt;code&gt;maxReplicas&lt;/code&gt; annotation. In cases of rolling updates, &lt;code&gt;surge&lt;/code&gt; is not simply 0 it is calculated via &lt;code&gt;ResolveFenceposts&lt;/code&gt; as \(surge = \lceil\frac{maxSurge * Replicas}{100}\rceil\) when &lt;code&gt;maxSurge&lt;/code&gt; is passed as a % value otherwise its taken as is. And the &lt;code&gt;maxReplicas&lt;/code&gt; value is annotated as &lt;code&gt;Replicas + surge&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;If its neither, then scale-up needs to happen, &lt;code&gt;NewISNewReplicas&lt;/code&gt; is used to get the target Replicas count, first &lt;code&gt;surge&lt;/code&gt; is computed in a similar fashion as above and then &lt;code&gt;maxReplicas&lt;/code&gt; is compared with currently active MS replica count. If the current count is more i.e. scale up is not possible and target count is returned the same as newMS replicas count otherwise scale up needs to happen by
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;min(max - current, dep.Replicas - newMS.Replicas)
&lt;/code&gt;&lt;/pre&gt;and &lt;code&gt;scaleUp + newIS.Replicas&lt;/code&gt; is returned as the target replicas count.&lt;/li&gt;
&lt;li&gt;If any scaling happens, then &lt;code&gt;Sync RolloutStatus&lt;/code&gt; is called to update the deployment status.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;After this an attempt is made to scale-down the active oldMS. First check if their total replica count is 0 in which case no further scale-down is possible. Otherwise we attempt the scale-down:
&lt;ol&gt;
&lt;li&gt;Check minAvailable needed number of replicas, &lt;code&gt;deployment.Replicas - unavailable&lt;/code&gt; where it is calculated via &lt;code&gt;ResolveFenceposts&lt;/code&gt; as \(unavail = \lfloor\frac{maxUnavailable * Replicas}{100}\rfloor\) when &lt;code&gt;maxAvailable&lt;/code&gt; is passed as a % value otherwise its taken as is.&lt;/li&gt;
&lt;li&gt;Check newMS that are still unavailable, &lt;code&gt;newMS.Replicas - newMS.AvailableReplicas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Hence there by removing (minAvailable + newMSUnavailable) from total active replicas, we get the number of replicas that can be cleanup up without any issues. (maxScaledDown)&lt;/li&gt;
&lt;li&gt;An attempt is made to clean up those replicas from the oldMS where first oldMS are sorted in the order &lt;code&gt;notready, ready, unscheduled, scheduled, pending, running&lt;/code&gt; so that unhealthy replicas are cleaned up before to not increase unavailability:
&lt;ul&gt;
&lt;li&gt;Iterating over the sorted oldMS, we first check if the targetMS&amp;rsquo;s replica count is 0 or equal to its availableReplicas in which cases it can&amp;rsquo;t be downscaled or has no unhealthy replicas so we skip its cleanup.&lt;/li&gt;
&lt;li&gt;Otherwise compute &lt;code&gt;scaledownCount&lt;/code&gt; for the targetMS by
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;min(maxCleanupCount - totalScaledDown, Replicas - AvailableReplicas)
&lt;/code&gt;&lt;/pre&gt;where &lt;code&gt;totalScaledDown&lt;/code&gt; keeps incrementing by &lt;code&gt;scaleDownCount&lt;/code&gt; as we iterate over all oldMS.&lt;/li&gt;
&lt;li&gt;We then compute &lt;code&gt;newReplicacount&lt;/code&gt; as &lt;code&gt;Replicas - scaledownCount&lt;/code&gt; and attempt to scaledown the targetMS to it. &amp;lt;TODO: Rewrite this&amp;gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;After attempting the cleanup of old unhealthy MS, we them attempt a scaledown by first checking if its possible, computing &lt;code&gt;minAvailable&lt;/code&gt; needed replica count and &lt;code&gt;totalAvailable&lt;/code&gt; and seeing if total&amp;rsquo;s less than min in which case we can&amp;rsquo;t scale down. Otherwise we compute &lt;code&gt;totalScaledDownCount&lt;/code&gt; (aka target) as &lt;code&gt;total - min&lt;/code&gt; available replica count &amp;amp; sort oldMS similar to how we did in the cleanup process above and start iterating over them:
&lt;ul&gt;
&lt;li&gt;Check if scaling&amp;rsquo;s done by comparing &lt;code&gt;totalScaledDown&lt;/code&gt; number with the target in which case we stop.&lt;/li&gt;
&lt;li&gt;If MS&amp;rsquo;s replicas is 0 then scaling isnt possible for it, so skip it.&lt;/li&gt;
&lt;li&gt;Otherwise scaledown is attempted with &lt;code&gt;scaleDownCount&lt;/code&gt; being
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;min(Replicas, target - totalScaledDown)
&lt;/code&gt;&lt;/pre&gt;and &lt;code&gt;newReplicacount&lt;/code&gt; as &lt;code&gt;Replicas - scaleDownCount&lt;/code&gt; after which &lt;code&gt;totalScaledDown&lt;/code&gt; is updated with &lt;code&gt;scaleDownCount&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If any scaling happens, then &lt;code&gt;sync RolloutStatus&lt;/code&gt; is invoked later for updating the status.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;At the end, the progress is estimated and if deployment is &lt;strong&gt;completed&lt;/strong&gt; then, autoscaler annotations are removed, deployment is &lt;em&gt;cleaned up&lt;/em&gt;. At the end &lt;code&gt;Sync RolloutStatus&lt;/code&gt; is called again.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;reconcile-machine-safety-overshooting&#34;&gt;&lt;span class=&#34;org-todo todo TODO&#34;&gt;TODO&lt;/span&gt; Reconcile Machine Safety Overshooting&lt;/h3&gt;
&lt;h2 id=&#34;extension&#34;&gt;Extension&lt;/h2&gt;
&lt;p&gt;All methods in &lt;code&gt;Driver&lt;/code&gt; interface take a &lt;code&gt;Request&lt;/code&gt; and provide a &lt;code&gt;Response&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Driver&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;CreateMachine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CreateMachineRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CreateMachineResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;InitializeMachine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;InitializeMachineRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;InitializeMachineResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;DeleteMachine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeleteMachineRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeleteMachineResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;GetMachineStatus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetMachineStatusRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetMachineStatusResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;ListMachines&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListMachinesRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ListMachinesResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;GetVolumeIDs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetVolumeIDsRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GetVolumeIDsResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/development/machine_error_codes.md&#34;&gt;Machine Error Codes&lt;/a&gt; document goes a bit more in-depth into the workings of the various driver interface methods.&lt;/p&gt;
&lt;p&gt;All methods follow a similar pattern at the start where they first check that the &lt;code&gt;MachineClass.provider&lt;/code&gt; in the request is the correct one otherwise &lt;code&gt;InvalidArgument&lt;/code&gt; is returned as the error code. Then the request&amp;rsquo;s &lt;code&gt;MachineClass&lt;/code&gt; and &lt;code&gt;Secret&lt;/code&gt; are used to extract the &lt;code&gt;providerSpec&lt;/code&gt;, validation of the spec happens during the extraction process. If there&amp;rsquo;s an issue while &lt;em&gt;unmarshalling&lt;/em&gt; the &lt;code&gt;rawSpec&lt;/code&gt;, &lt;code&gt;internal&lt;/code&gt; error is returned and if there&amp;rsquo;s an issue with validation, &lt;code&gt;InvalidArgument&lt;/code&gt; is returned. The other common part is creation of a &lt;em&gt;service client&lt;/em&gt; which is handled by the &lt;code&gt;createSVC&lt;/code&gt; method (takes in &lt;em&gt;region&lt;/em&gt; and &lt;em&gt;secret&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Note that during the invocation of some methods, &lt;code&gt;Record Driver API Metric&lt;/code&gt; function runs which captures the duration of the operation and records any failures. Coming to the specifics of the methods:&lt;/p&gt;
&lt;h3 id=&#34;createmachine&#34;&gt;CreateMachine&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Secret&amp;rsquo;s &lt;code&gt;userData&lt;/code&gt; is checked for existence and is encoded if found. (Later used in &lt;code&gt;RunInstancesInput&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Validate given AMI&amp;rsquo;s (Amazon Machine Image) existence, verify that the image exists and is valid using &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeImages.html&#34;&gt;DescribeImages&lt;/a&gt; &lt;code&gt;POST&lt;/code&gt; request.&lt;/li&gt;
&lt;li&gt;Block devices are the &lt;em&gt;storage volumes&lt;/em&gt; attached to an &lt;code&gt;Instance&lt;/code&gt;. And &lt;code&gt;BlockDeviceMappings&lt;/code&gt; define the EBS volumes and instance store volumes to attach to an instance at launch. So using the list of devices from providerSpec and the &lt;code&gt;RootDeviceName&lt;/code&gt; from the image, block device mappings are generated for storage.&lt;/li&gt;
&lt;li&gt;Then tags are generated for &lt;code&gt;instance&lt;/code&gt;, &lt;code&gt;volume&lt;/code&gt; and &lt;code&gt;NetworkInterface&lt;/code&gt;. These tags are useful as they act as identifiers which map the clusters that resources belong to and for management (cleanup, securtiy) etc. Failure in tag generation results in an &lt;code&gt;Internal&lt;/code&gt; error code being returned.&lt;/li&gt;
&lt;li&gt;Afterwards, &lt;code&gt;NetworkInterfaceSpec&lt;/code&gt; is defined for all the interfaces and by iterative over providerSpec NetworkInterfaces. And &lt;code&gt;IamInstanceProfile&lt;/code&gt; is set up by going through &lt;em&gt;IAM name and ARN&lt;/em&gt;. And after that &lt;em&gt;instance metadata options&lt;/em&gt; are initialized.&lt;/li&gt;
&lt;li&gt;Following all this, the &lt;code&gt;RunInstancesInput&lt;/code&gt; config is initialized using all the above fetched/initialized fields. Some additional fields such as &lt;code&gt;Placement&lt;/code&gt;, &lt;code&gt;Capacity Reservation Target&lt;/code&gt;, &lt;code&gt;CPU Options&lt;/code&gt; and &lt;code&gt;Spot Price&lt;/code&gt; are further set up before the &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_RunInstances.html&#34;&gt;RunInstance&lt;/a&gt; call which launches the EC2 instance.&lt;/li&gt;
&lt;li&gt;Then we wait for the VM with &lt;code&gt;ProviderID&lt;/code&gt; for machine &lt;code&gt;Name&lt;/code&gt; to be visible to AWS endpoints by checking using &lt;code&gt;confirmInstance&lt;/code&gt; calls following which&amp;rsquo;s success the &lt;em&gt;MachineResponse&lt;/em&gt; consisting of the &lt;code&gt;ProviderID&lt;/code&gt; and &lt;code&gt;Machine Name&lt;/code&gt; is returned.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;initializemachine&#34;&gt;InitializeMachine&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;InitializeMachine&lt;/code&gt; method should only be invoked as a post VM creation initialization to configure network configuration etc.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First we decode spec, create a service request and then we fetch the running &lt;code&gt;instances&lt;/code&gt; for the requested &lt;code&gt;Machine&lt;/code&gt; by leveraging the &lt;code&gt;tags&lt;/code&gt; populated earlier. In case searching via tags fails, fall back to using &lt;code&gt;instanceID&lt;/code&gt; from &lt;code&gt;providerID&lt;/code&gt; for fetching the VM instances. Failure returns &lt;code&gt;codes.Uninitialized&lt;/code&gt; as the error code.&lt;/li&gt;
&lt;li&gt;After getting the instance, we disable &lt;code&gt;SrcDstCheck&lt;/code&gt; for NAT instances if specified as false by targeting the &lt;code&gt;instanceID&lt;/code&gt;. If this operations fails, &lt;code&gt;Uninitialized&lt;/code&gt; is retured as the error code.&lt;/li&gt;
&lt;li&gt;Then we iterate over the &lt;code&gt;Network Interfaces&lt;/code&gt; and assigns IPv6 prefixes to them if configured. Failure returns &lt;code&gt;codes.Uninitialized&lt;/code&gt; as the error code. If everything is successful, we return &lt;code&gt;Response&lt;/code&gt; with providerID and node name.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deletemachine&#34;&gt;DeleteMachine&lt;/h3&gt;
&lt;p&gt;We do provider check and decode the spec, create the service client. Afterwards we check if the requested Machine has &lt;code&gt;providerID&lt;/code&gt; populated, if so we extract the &lt;code&gt;instanceID&lt;/code&gt; from it and invoke &lt;a href=&#34;https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_TerminateInstances.html&#34;&gt;terminateInstance&lt;/a&gt;. If &lt;code&gt;providerID&lt;/code&gt; is not populated, then we get the instances by &lt;code&gt;tags&lt;/code&gt; and &lt;em&gt;terminate&lt;/em&gt; them.&lt;/p&gt;
&lt;h3 id=&#34;getmachinestatus&#34;&gt;GetMachineStatus&lt;/h3&gt;
&lt;p&gt;Again we start with checking the provider, decoding the spec and creating the service client. Then we get the matching instances by &lt;code&gt;tags&lt;/code&gt; or &lt;code&gt;instanceID&lt;/code&gt; failing the fetching by former. If multiple VM instances are returned for the machine object, it is flagged as &lt;code&gt;OutOfRange&lt;/code&gt; error and returned.&lt;/p&gt;
&lt;p&gt;Otherwise we check if the &lt;code&gt;SourceDestCheck&lt;/code&gt; on the instance matches the one on &lt;code&gt;providerSpec&lt;/code&gt;, in case they don&amp;rsquo;t match it returns &lt;code&gt;Uninitialized&lt;/code&gt; else we return the response with &lt;code&gt;NodeName&lt;/code&gt; and &lt;code&gt;ProviderID&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;listmachines&#34;&gt;ListMachines&lt;/h3&gt;
&lt;p&gt;Do the needful provider check, spec decoding and service creation following which we iterate over the &lt;code&gt;tags&lt;/code&gt; to check if they contain the &lt;code&gt;clusterName&lt;/code&gt; tag or the &lt;code&gt;nodeRole&lt;/code&gt; tag. These are then used to create &amp;ldquo;tag-key&amp;rdquo; filters alongwith a &amp;ldquo;instance-state-name&amp;rdquo; filter (with &lt;em&gt;pending, running, stopping &amp;amp; stopped&lt;/em&gt; values). These filters are used to fetch the relevant VM &lt;code&gt;instances&lt;/code&gt; for the machineClass. After getting the instances, a map of &lt;code&gt;providerID&lt;/code&gt; to the &lt;code&gt;machineName&lt;/code&gt; is created and and returned as the response.&lt;/p&gt;
&lt;h3 id=&#34;getvolumeids&#34;&gt;GetVolumeIDs&lt;/h3&gt;
&lt;p&gt;Extracts EBS volume IDs from PersistentVolume specification by handling both in-tree AWS EBS volumes and CSI driver volumes and returns list of volume IDs as response. (Invoked indirectly by &lt;code&gt;evictPodsWithPv&lt;/code&gt;)&lt;/p&gt;
&lt;h2 id=&#34;queries&#34;&gt;Queries&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How is MCM different from CCM? Is there any overlap between the two?&lt;/li&gt;
&lt;li&gt;How much access/info does the end user have about machines? How much can they control them or is the access restricted to editing nodes only?&lt;/li&gt;
&lt;li&gt;Check control and target clusters, inClusterConfig. Control cluster is the one where the machine-* objects are stored. Target cluster is where all the node objects are registered.&lt;/li&gt;
&lt;li&gt;When node deletion checks are happening, how is the &lt;code&gt;ReadOnlyFileSystem&lt;/code&gt; flag checked for?&lt;/li&gt;
&lt;li&gt;Why is this required in two places? &lt;a href=&#34;https://github.com/gardener/machine-controller-manager/blob/master/docs/FAQ.md#i-need-to-change-the-apis-what-are-the-recommended-steps&#34;&gt;FAQ: API Change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Is local setup guide enough to get started or is there something else to look out for as well?&lt;/li&gt;
&lt;li&gt;In the &lt;code&gt;ClaimMachines&lt;/code&gt; function, we&amp;rsquo;re not passing the filters, what&amp;rsquo;s the point of having them then? In what scenarios will they be needed?&lt;/li&gt;
&lt;li&gt;&lt;del&gt;How is the &lt;code&gt;CanAdopt()&lt;/code&gt; function working?&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;What is this controllerRef for?&lt;/li&gt;
&lt;li&gt;&lt;del&gt;What is the &lt;code&gt;KeyFunc()&lt;/code&gt; doing in manageReplicas: cache.MetaNameSpaceKeyFunc&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;What is this ControllerExpectations, why is it needed? Handle race conditions, Expectations are supposed to be used to await previous controller actions to be seen in watch. ContExpectations is a cache mapping controllers to what they expect to see before being woken up for a sync.&lt;/li&gt;
&lt;li&gt;What is this &lt;code&gt;FakeDriver&lt;/code&gt; business?&lt;/li&gt;
&lt;li&gt;&lt;del&gt;In a lot of functions, we clone the resource, then work with the cloned copy, why is that necessary?&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Why is bootstrap token deletion required when machine creation goes through?&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;What is this permit that&amp;rsquo;s used when &lt;code&gt;Unknown&lt;/code&gt; phase and machine times out&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Why is internalExternalScheme conversion needed?&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Docker Kubernetes Notes</title>
      <link>https://brongulus.github.io/notes/20241108t095209--docker-k8s-training__k8s_sap/</link>
      <pubDate>Fri, 08 Nov 2024 09:52:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/20241108t095209--docker-k8s-training__k8s_sap/</guid>
      <description>&lt;h2 id=&#34;docker&#34;&gt;Docker&lt;/h2&gt;
&lt;p&gt;A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. The Linux kernel does not know about containers at all – for it, containers are nothing more than just regular processes running on the system. It however offers several features that Docker and other container engines leverage to achieve an almost complete isolation of processes from each other. Some of them being&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Chroot : Changes the root directory for a process to any given directory, processes running in that chroot can only see those parts of the filesystem which are subdirectories of it&lt;/li&gt;
&lt;li&gt;Namespaces : Different processes see different environments even though they are on the same host/OS&lt;/li&gt;
&lt;li&gt;cgroups : manage/limit resource allocation to individual processes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When talking about a “container”, we are referring to the combination of read-only layers from the image and one read-write layer on top of it (&lt;a href=&#34;https://iammathew.com/blog/understanding-docker-images/filesystem&#34;&gt;overlayfs&lt;/a&gt;). You can derive/instantiate an indefinite number of containers from the same image. They only vary by the read-write layer on top. Or stated another way: A container consists of just the read-write layer, some meta data (settings, flags pass on start) and a reference to the image.&lt;/p&gt;
&lt;p&gt;Creating a Docker image involves two things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;Dockerfile&lt;/em&gt; containing directives on how the image is meant to be built&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;build-context&lt;/em&gt; (or PATH) which is a directory on your hard disk; every file to be added to the image must be inside the build-context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each line in a Dockerfile is executed in a temporary container which gets persisted as a new layer on top of the existing layers. Some directives to keep in mind are &lt;code&gt;FROM, ENV, LABEL, COPY, ADD, RUN, EXPOSE, CMD, ENTRYPOINT, USER&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multistage builds&lt;/strong&gt; are another powerful feature of the container ecosystem. Typically, you do not want ship your build environment, but have a dedicated runtime environment. Multistage builds are an elegant way to separate these two things. The first stage is a build environment with a compiler or whatever is needed. The 2nd stage is much smaller in size/content (e.g. distroless) and should contain only those things needed to run the application. The stages are referred later on by specifying their names as &lt;code&gt;FROM &amp;lt;stage/image&amp;gt; AS &amp;lt;stage-name&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;h:06603D16-4A5E-4AC0-8A9C-8C7F5EE20433&#34;&gt;Kubernetes&lt;/h2&gt;
&lt;p&gt;Kubernetes makes the core design decision that all configuration is declarative, and that all configuration is implemented by way of “operators” which function as control loops: They continually compare the desired configuration with the state of reality, and then attempt to take actions to bring reality in line with the desired state. (&lt;a href=&#34;https://buttondown.com/nelhage/archive/two-reasons-kubernetes-is-so-complex&#34;&gt;Ref&lt;/a&gt;, &lt;a href=&#34;https://cloud.google.com/kubernetes-engine/kubernetes-comic&#34;&gt;A nice introductory comic&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Kubernetes is just a container orchestrator. The central part remains our image, which contains the application we want to run. In the end Kubernetes runs lots and lots of containers – however in a smart way.&lt;/p&gt;
&lt;h3 id=&#34;building-blocks&#34;&gt;Building blocks&lt;/h3&gt;
&lt;p&gt;Kubernetes doesn’t allow you to schedule individual containers, it wraps the container into something called a &lt;em&gt;pod&lt;/em&gt; – which can be considered as a logical host with one or more containers that share storage and network resources. Put another way, a Kubernetes Pod is a set of containers that perform an interrelated function and that operate as part of the same workload.&lt;/p&gt;
&lt;p&gt;Containers in a pod share storage/network interface. Usually its one or two containers per pod, following the &lt;a href=&#34;https://labs.iximiuz.com/tutorials/kubernetes-native-sidecars&#34;&gt;sidecar&lt;/a&gt; (2nd container provides augmentation to improve the application container) or adapter (provides abstraction to entities outside of pod) pattern. (&lt;a href=&#34;https://labs.iximiuz.com/tutorials/containers-vs-pods&#34;&gt;Containers vs Pods&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Although you could add all the containers for your application into the same Pod, it is a good practice to have one container per Pod. Then, group all the Pods that conform one application into a Namespace.&lt;/p&gt;
&lt;p&gt;A Kubernetes node is a physical or virtual machine that operates as part of a Kubernetes cluster. Pods can run on nodes, but the purpose of a node is to provide host infrastructure, not define and deploy applications. Pods do the latter. Thus, while Pods are the fundamental building blocks of Kubernetes workloads, nodes are the fundamental building blocks of Kubernetes infrastructure.&lt;/p&gt;
&lt;p&gt;While deploying a pod manually works, it doesn’t allow to scale nor to run reliably. With &lt;em&gt;deployments&lt;/em&gt; etc we get different constructs allowing to run one to many pods with different characteristics.&lt;/p&gt;
&lt;p&gt;The networking entities provide cluster internal as well as external connectivity. &lt;em&gt;Policies&lt;/em&gt; provide a runtime security context on networking as well as container level. Resources have also an API representation – you can get information about nodes and manage consumption per pod etc.&lt;/p&gt;
&lt;p&gt;You don’t want to know and manage individual pods. You would like to specify a template and instantiate it as often as you wish. Also you want to manage the group of pods e.g. in terms of docker image used. The &lt;strong&gt;deployment&lt;/strong&gt; gives you these management capabilities. In it’s resource description (yaml file) you specify a pod template, how pods should be labeled and of course a corresponding selector to identify your pods. The deployment creates and manages a replicaSet which in turn manages the pods.&lt;/p&gt;
&lt;p&gt;Further details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DaemonSet: Ensures that all (or explicitly specified) nodes run a copy of a pod. They ensure that a pod is replicated on some or all of the nodes. When a new node is added to a Kubernetes cluster, a new pod will be created on that node. For example a kube-proxy can run as a pod on every node managed by a daemonSet. A daemonset works almost similar to a deployment. However the replica count is determined by the number of cluster nodes.&lt;/li&gt;
&lt;li&gt;StatefulSet: Manages the deployment and scaling of a set of pods, and &lt;strong&gt;provides guarantees about the ordering and uniqueness&lt;/strong&gt; of these pods. Deployments are like running identical workers at a factory (completely interchangeable), while StatefulSets are like running a team where each person has their own specific role and resources (not interchangeable).Similar to deployments, however it provides &lt;em&gt;more stability&lt;/em&gt; with regards to names/identifiers. Service routes traffic to a &lt;strong&gt;specific&lt;/strong&gt; pod based on labels and &lt;strong&gt;names&lt;/strong&gt; and pods have stable names, individual persistent storage and are ordered unlike in the case of deployments.&lt;/li&gt;
&lt;li&gt;Headless Service: Allows you to connect directly to a pod while using dns names instead of IP addresses. A headless service is created, by specifying “None” as the value for “ClusterIP”. They are needed to make StatefulSets work.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-replicasets-overview/&#34;&gt;ReplicaSet&lt;/a&gt;: Kubernetes object used to maintain a stable set of replicated pods running within a cluster at any given time. Deployments are an alternative to ReplicaSets,  as they are used to manage ReplicaSets . They are handy when it comes to rolling out changes to a set of pods via a ReplicaSet. You can simply roll back to a previous Deployment revision when managing a ReplicaSet using a Deployment or create a new revision.&lt;/li&gt;
&lt;li&gt;Resource Quotas: Set quotas on namespace level, limit the number of resources (Pod, PVC, Service…) allowed in this namespace. Can also enforce applications to specify minimal resources required and max resources (limit) wanted.&lt;/li&gt;
&lt;li&gt;Roles: a role defines a setup of API objects that can be accessed in a certain way. For example, a role can allow only list/read access to pods. Another role could also allow to list/read, create &amp;amp; delete pods&lt;/li&gt;
&lt;li&gt;Role Bindings: assign roles to service accounts /technical users (&lt;a href=&#34;https://sysdig.com/learn-cloud-native/kubernetes-rbac-explained/&#34;&gt;rbac explained&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Reconciliation consists of three stages - &amp;ldquo;Observe, Analyze, Act&amp;rdquo;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Observe: Control loop watches API for changes&lt;/li&gt;
&lt;li&gt;Analyze: Check current state against the desired, look for any deltas&lt;/li&gt;
&lt;li&gt;Act: If there is a delta, controller should act and trigger a defined action to bring the observed objects into desired state&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;GVK: Groups are a collection of related functionality, versions are specific implementations and kinds are types. Namespaces group a set of resources.
&lt;code&gt;/api/&amp;lt;version&amp;gt;/&lt;/code&gt; or &lt;code&gt;/apis/&amp;lt;g&amp;gt;/&amp;lt;v&amp;gt;/namespaces/&amp;lt;name&amp;gt;/&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;communication&#34;&gt;Communication&lt;/h3&gt;
&lt;p&gt;Communication between pods requires something called as a &amp;ldquo;service&amp;rdquo;, it&amp;rsquo;s not sensible to rely on IP addresses for pods are they can change if a pod dies/restarts. Services act as a reliable and stable endpoint that provides cluster-internal and external connectivity. Services determine their managed pods by labels and corresponding selectors. Kubernetes also offers a way to name any port on a container/service level which can then be used as a reference even if the port value changes over time without impacting the application. (&lt;a href=&#34;https://sysdig.com/learn-cloud-native/what-is-kubernetes-networking/&#34;&gt;k8s networking&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;To expose a service to the outside world (outside of cluster scoped DNS/IP range), we can use NodePorts or LoadBalancer. The types of services available are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cluster IP&lt;/li&gt;
&lt;li&gt;LoadBalancer: A single network endpoint with a unique IP which will be associated with a service. Incoming traffic to this IP on the service port will be forwarded through the service to the pods matching the labels specified in the service description.&lt;/li&gt;
&lt;li&gt;NodePort: A port that is opened on every node of the cluster. It is associated with a service and any incoming traffic at this nodePort will be routed to the corresponding service. From there it will be forwarded to service’s pods, regardless on which node it they actually run.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Ingress exposes HTTP and HTTPS routes from outside the cluster to services within the cluster. Only creating an Ingress resource has no effect. You may need to deploy an Ingress controller such as ingress-nginx. Ingress controller is typically exposed via a LoadBalancer service and it handles traffic according to ingress specifications.&lt;/p&gt;
&lt;p&gt;The easiest way of using an Ingress is as an entry point to a single service with one to multiple pods. The ingress is created for a dedicated URL. From the services&amp;rsquo; perspective everything works as usual. A port and a target port are specified and base on labels and selectors the traffic is routed. Rules define forwarding of incoming traffic to backends. In this case traffic is sent to a service.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/ingress/#types-of-ingress&#34;&gt;Types of ingress&lt;/a&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;An Ingress with no rules sends all traffic to a single default backend and &lt;code&gt;.spec.defaultBackend&lt;/code&gt; is the backend that should handle requests in that case.&lt;/li&gt;
&lt;li&gt;A fanout configuration routes traffic from a single IP address to more than one Service, based on the HTTP URI being requested.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​    - host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo.bar.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​        - path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​        - path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;/bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Name-based virtual hosts support routing HTTP traffic to multiple host names at the same IP address.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nt&#34;&gt;spec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rules&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​    - host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;foo.bar.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# foo bar&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​        - path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service1&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​    - host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;bar.foo.com&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;c&#34;&gt;# bar foo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;paths&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;​        - path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pathType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Prefix&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;          &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;            &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;              &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;service2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;persistence&#34;&gt;Persistence&lt;/h3&gt;
&lt;p&gt;Pods can die/restart unexpectedly and lose all the data that&amp;rsquo;s local to them, to solve the problem of persistence kubernetes offers PV/PVCs. A PersistentVolume (PV) is a piece of storage in the cluster that has been provisioned by an administrator having a lifecycle independent of the pods using the PV. A PersistentVolumeClaim (PVC) is a request for a storage by a user.&lt;/p&gt;
&lt;p&gt;Claims can request specific sizes and access modes and claims bind pod storage to PVs. PV size must match or exceed PVC requested size. Due to the PV-PVC bind mechanism, it might happen that storage is claimed by the “wrong” requests. &lt;em&gt;Storage classes&lt;/em&gt; overcome this issue of manually provisioning PV by reversing the order. Firstly create a PVC and the storage class provides a fitting PV.&lt;/p&gt;
&lt;p&gt;CSI – Container Storage Interface:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;User requests a PVC&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StorageClass&lt;/code&gt; is triggered to provision a PV&lt;/li&gt;
&lt;li&gt;PV is backed by a physical volume, which is made available via the container storage interface.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Upon deletion of the claim object, PV becomes &amp;ldquo;unbound&amp;rdquo;, then it can either be retained, deleted or recycled (deprecated). The access modes a PVC can specify are &lt;code&gt;RWO&lt;/code&gt; (ReadWriteOnce) where a single node can mount a PVC at a time but if multiple pods are running on the same node they can all access it for restricting that to a single Pod use &lt;code&gt;RWOP&lt;/code&gt; (ReadWriteOncePod). There&amp;rsquo;s also &lt;code&gt;ROX&lt;/code&gt; (ReadOnlyMany) and &lt;code&gt;RWX&lt;/code&gt; (ReadWriteMany) where the volumes can be mounted as specified by many nodes.&lt;/p&gt;
&lt;h3 id=&#34;additional-setup&#34;&gt;Additional Setup&lt;/h3&gt;
&lt;p&gt;An application container certainly needs configuration. However, adding this information to the container image is not feasible at all. Instead, we need a way through the Kubernetes API to reach our goal of dynamically injecting configuration, this is where ConfigMaps and Secrets come in. They separate configuration &amp;amp; credentials from the application and the required configuration data can be stored in specific data objects in etcd.&lt;/p&gt;
&lt;p&gt;Configmaps and &lt;a href=&#34;https://sysdig.com/learn-cloud-native/how-to-create-and-use-kubernetes-secrets/&#34;&gt;secrets&lt;/a&gt; are based on key-value pairs. Allowed values are string or binary data. When using binary data, &lt;code&gt;base64 encoding&lt;/code&gt; of the binary is mandatory. The contents of both can be project to environment variables of a container or mounted to the container file system via the volumes API.&lt;/p&gt;
&lt;p&gt;The secrets can be used like any other volume and bound to the pod. When mounted into the filesystem the content/values are decoded and available in plain text so it&amp;rsquo;s advised to set proper file permissions for them. There are 3 different types of secrets:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;generic: to store credentials like passwords. Include as env variables or mount files&lt;/li&gt;
&lt;li&gt;TLS: store certificates to setup TLS e.g. with a webserver&lt;/li&gt;
&lt;li&gt;Docker-registry: Contains credentials to authenticate pulls from protected registry like the docker store or a private registry. Assign the secret as “imagePullSecret” to a pod, to use the credentials for image pulling for this pod.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;helm&#34;&gt;Helm&lt;/h2&gt;
&lt;p&gt;Ref: &lt;a href=&#34;https://sysdig.com/learn-cloud-native/what-is-helm-in-kubernetes/&#34;&gt;What is helm&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hangul</title>
      <link>https://brongulus.github.io/notes/korean/</link>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/korean/</guid>
      <description>&lt;p&gt;Hangul is one of the easiest character form to learn, in fact people proclaim it can be learnt in under an hour with the help of easy mnemonics, let&amp;rsquo;s see how.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;I still have to cover more vowels and add tips for pronounciation which I&amp;rsquo;ll add soon.™&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;consonants&#34;&gt;Consonants&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Consonant&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;th&gt;Aspirated&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅂ&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;bucket&lt;/td&gt;
&lt;td&gt;ㅍ&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;part II/pi&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄷ&lt;/td&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;door&lt;/td&gt;
&lt;td&gt;ㅌ&lt;/td&gt;
&lt;td&gt;t&lt;/td&gt;
&lt;td&gt;two doors&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄱ&lt;/td&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;gun&lt;/td&gt;
&lt;td&gt;ㅋ&lt;/td&gt;
&lt;td&gt;k&lt;/td&gt;
&lt;td&gt;kill&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅈ&lt;/td&gt;
&lt;td&gt;j&lt;/td&gt;
&lt;td&gt;(jug)&lt;/td&gt;
&lt;td&gt;ㅊ&lt;/td&gt;
&lt;td&gt;ch&lt;/td&gt;
&lt;td&gt;church&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Consonant&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅎ&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;hat&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄹ&lt;/td&gt;
&lt;td&gt;r/l&lt;/td&gt;
&lt;td&gt;rattlesnake&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅁ&lt;/td&gt;
&lt;td&gt;m&lt;/td&gt;
&lt;td&gt;mouth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄴ&lt;/td&gt;
&lt;td&gt;n&lt;/td&gt;
&lt;td&gt;nose&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅅ&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;standing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅇ&lt;/td&gt;
&lt;td&gt;- / ng(at end)&lt;/td&gt;
&lt;td&gt;zero = no&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Look at the last consonant, it&amp;rsquo;s a placeholder character which has no sound by itself &lt;em&gt;but&lt;/em&gt; if it ends a particular syllable, it is pronounced as &lt;strong&gt;ng&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;vowels&#34;&gt;Vowels&lt;/h2&gt;
&lt;p&gt;I always got confused between the vowels even with various mnemonics until I came across &lt;a href=&#34;https://www.90daykorean.com/how-to-learn-the-korean-alphabet/&#34;&gt;this guide&lt;/a&gt; by 90 day korean which really clarified with the help of their acronym  &lt;em&gt;&amp;ldquo;Old iPod, new iPad&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/vowels.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/vowels.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;By lining up the corresponding characters with the sounds, we get the vowels. By adding a seond line to these characters one can create the following sounds preceeded by &lt;em&gt;y-&lt;/em&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vowel&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;th&gt;Modified&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅗ&lt;/td&gt;
&lt;td&gt;oh&lt;/td&gt;
&lt;td&gt;old&lt;/td&gt;
&lt;td&gt;ㅛ&lt;/td&gt;
&lt;td&gt;yoh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅓ&lt;/td&gt;
&lt;td&gt;eo/uh&lt;/td&gt;
&lt;td&gt;iPod&lt;/td&gt;
&lt;td&gt;ㅕ&lt;/td&gt;
&lt;td&gt;yeo/yuh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅜ&lt;/td&gt;
&lt;td&gt;ooh&lt;/td&gt;
&lt;td&gt;new&lt;/td&gt;
&lt;td&gt;ㅠ&lt;/td&gt;
&lt;td&gt;yooh&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅏ&lt;/td&gt;
&lt;td&gt;a/ah&lt;/td&gt;
&lt;td&gt;iPad&lt;/td&gt;
&lt;td&gt;ㅑ&lt;/td&gt;
&lt;td&gt;yah&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vowel&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Mnemonic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅣ&lt;/td&gt;
&lt;td&gt;ee&lt;/td&gt;
&lt;td&gt;tree&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅡ&lt;/td&gt;
&lt;td&gt;oo&lt;/td&gt;
&lt;td&gt;brook&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;strong-consonants&#34;&gt;Strong Consonants&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Consonant&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㄸ&lt;/td&gt;
&lt;td&gt;dd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅉ&lt;/td&gt;
&lt;td&gt;jj&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄲ&lt;/td&gt;
&lt;td&gt;gg&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅃ&lt;/td&gt;
&lt;td&gt;bb&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅆ&lt;/td&gt;
&lt;td&gt;ss&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;Examples:&lt;/em&gt; 떡볶이 is tteokbokki and 빨간색 is pplagansaek (red).&lt;/p&gt;
&lt;h2 id=&#34;pronounciation-guide-in-devanagari&#34;&gt;Pronounciation Guide in Devanagari&lt;/h2&gt;
&lt;h3 id=&#34;vowels&#34;&gt;Vowels&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Vowel&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Vowel&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅏ&lt;/td&gt;
&lt;td&gt;आ&lt;/td&gt;
&lt;td&gt;ㅑ&lt;/td&gt;
&lt;td&gt;या&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅓ&lt;/td&gt;
&lt;td&gt;ओ&lt;/td&gt;
&lt;td&gt;ㅕ&lt;/td&gt;
&lt;td&gt;यौ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅗ&lt;/td&gt;
&lt;td&gt;उ&lt;/td&gt;
&lt;td&gt;ㅛ&lt;/td&gt;
&lt;td&gt;यु&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅜ&lt;/td&gt;
&lt;td&gt;ऊ&lt;/td&gt;
&lt;td&gt;ㅠ&lt;/td&gt;
&lt;td&gt;यू&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅡ&lt;/td&gt;
&lt;td&gt;उ~&lt;/td&gt;
&lt;td&gt;ㅣ&lt;/td&gt;
&lt;td&gt;इ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅔ&lt;/td&gt;
&lt;td&gt;ए&lt;/td&gt;
&lt;td&gt;ㅐ&lt;/td&gt;
&lt;td&gt;ऐ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅖ&lt;/td&gt;
&lt;td&gt;ये&lt;/td&gt;
&lt;td&gt;ㅒ&lt;/td&gt;
&lt;td&gt;यै&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅢ&lt;/td&gt;
&lt;td&gt;उई~&lt;/td&gt;
&lt;td&gt;ㅘ&lt;/td&gt;
&lt;td&gt;वा&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅝ&lt;/td&gt;
&lt;td&gt;वौ&lt;/td&gt;
&lt;td&gt;ㅟ&lt;/td&gt;
&lt;td&gt;वी&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅚ&lt;/td&gt;
&lt;td&gt;वै&lt;/td&gt;
&lt;td&gt;ㅙ&lt;/td&gt;
&lt;td&gt;वै&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅞ&lt;/td&gt;
&lt;td&gt;वै&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;consonants&#34;&gt;Consonants&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Asp.Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Dbl.Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㄱ&lt;/td&gt;
&lt;td&gt;क&lt;/td&gt;
&lt;td&gt;ㅋ&lt;/td&gt;
&lt;td&gt;ख&lt;/td&gt;
&lt;td&gt;ㄲ&lt;/td&gt;
&lt;td&gt;ग़&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄷ&lt;/td&gt;
&lt;td&gt;द&lt;/td&gt;
&lt;td&gt;ㅌ&lt;/td&gt;
&lt;td&gt;ट्&lt;/td&gt;
&lt;td&gt;ㄸ&lt;/td&gt;
&lt;td&gt;त&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅂ&lt;/td&gt;
&lt;td&gt;ब्/पूऽ&lt;/td&gt;
&lt;td&gt;ㅍ&lt;/td&gt;
&lt;td&gt;फ़ू&lt;/td&gt;
&lt;td&gt;ㅃ&lt;/td&gt;
&lt;td&gt;प~&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;th&gt;Dbl.Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅅ&lt;/td&gt;
&lt;td&gt;सू&lt;/td&gt;
&lt;td&gt;ㅆ&lt;/td&gt;
&lt;td&gt;सऽ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅈ&lt;/td&gt;
&lt;td&gt;च&lt;/td&gt;
&lt;td&gt;ㅉ&lt;/td&gt;
&lt;td&gt;ज्&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Cons.&lt;/th&gt;
&lt;th&gt;Pron.&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ㅊ&lt;/td&gt;
&lt;td&gt;च्छ&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅎ&lt;/td&gt;
&lt;td&gt;ह&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄹ&lt;/td&gt;
&lt;td&gt;ल&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㄴ&lt;/td&gt;
&lt;td&gt;न&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅁ&lt;/td&gt;
&lt;td&gt;म&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ㅇ&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;resources&#34;&gt;Resources:&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Lets learn hangul, interactively - &lt;a href=&#34;http://letslearnhangul.com/&#34;&gt;Lets learn hangul&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pronounciation from a native - &lt;a href=&#34;https://www.youtube.com/watch?v=aBIp-DCgWrI&#34;&gt;Korean Alphabet Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mnemonics from a native - &lt;a href=&#34;https://www.youtube.com/playlist?list=PLECz2rpRD3Z0EeOU0z3aoafwgjHyth7MN&#34;&gt;Miss Vicky&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>I R SSI</title>
      <link>https://brongulus.github.io/blog/irc/</link>
      <pubDate>Tue, 28 Jun 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/blog/irc/</guid>
      <description>&lt;figure&gt;&lt;a href=&#34;https://xkcd.com/1782&#34;&gt;&lt;img src=&#34;https://imgs.xkcd.com/comics/team_chat.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Umm. Guilty, though I&amp;rsquo;ve only been using it for two days, but I&amp;rsquo;ve been having a blast! So let&amp;rsquo;s get into it.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;This is intended for users who are familiar with chat systems like discord and wish to have a similar visual experience while working with IRC. I don&amp;rsquo;t discuss all the aspects such as chat etiquette and other security related stuff for which I&amp;rsquo;d direct the readers to resources at the bottom.&lt;/p&gt;
&lt;/div&gt;
&lt;h2 id=&#34;why-irc&#34;&gt;Why IRC?&lt;/h2&gt;
&lt;p&gt;In this modern age of numerous chat clients and networks with all their shiny bells and whistles and fancy embeds and numerous intergrations with various services, why should one use IRC?&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a reason why IRC is called the social network for neckbeards, it&amp;rsquo;s the premier destination of folks who are actually technically-literate about the stuff that they&amp;rsquo;re using and not just flaunting their latest &lt;em&gt;rice&lt;/em&gt; or worrying about their choice of distribution. This is not to say that the new platforms don&amp;rsquo;t have adept helpers rather that on IRC channels you can get support for very specific things. Another thing that I recently came across in my journey to various technical channels is that the people there are very willing and understanding when someone seeks help which was in stark contrast to communities on other platforms where people are actively called out for their lack of knowledge, there&amp;rsquo;s a very &lt;a href=&#34;https://blog.aurynn.com/2015/12/16-contempt-culture&#34;&gt;prevalant culture&lt;/a&gt; of superiority complex in modern technical communities which has been absent in IRC from my limited exposure and experience.&lt;/p&gt;
&lt;p&gt;Another big pull towards IRC for me has been the exclusive number of niche communities where it&amp;rsquo;s the sole medium of communication for them, this allows you to get exposed to new factions of people! It&amp;rsquo;s a great way to have conversations in plaintext without having to worry about people knowing who you really are, which is kinda neat and unique in its own way.&lt;/p&gt;
&lt;h2 id=&#34;getting-into-it&#34;&gt;Getting into it&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve used a modern chat platform like Slack or Discord, IRC&amp;rsquo;s structured in a similar way (rather it was most likely the inspiration for these programs). Basically there are various &lt;strong&gt;servers&lt;/strong&gt; that you can connect to, which have multiple &lt;strong&gt;channels&lt;/strong&gt; that you can join. Unlike discord though where upon joining a server you automatically have access to all its channels, in IRC servers it&amp;rsquo;s opt-in which makes sense considering some large servers have thousands of chatrooms.&lt;/p&gt;
&lt;p&gt;When you open an IRSSI for the first time, you&amp;rsquo;re greeted with a barren window with an unfamiliar layout, don&amp;rsquo;t worry later we&amp;rsquo;ll see how to configure it to make it more convenient to use and similar to a new platform like discord. For now let&amp;rsquo;s connect to our first server.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/set nick &amp;lt;nick&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/server connect irc.libera.chat
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After connecting to the server you can then join a channel of choice, but how would one know what all channels are there for a server, well for small servers you could use the &lt;code&gt;/list&lt;/code&gt; command but for large channels such as &lt;code&gt;libera&lt;/code&gt; or &lt;code&gt;rizon&lt;/code&gt; that&amp;rsquo;s not really a good idea. So for discovering channels, one can either &lt;a href=&#34;https://libera.chat/guides/findingchannels%20&#34;&gt;filter&lt;/a&gt; through the various list options or go to &lt;a href=&#34;https://netsplit.de/channels/&#34;&gt;netsplit&lt;/a&gt;. After choosing a channel for a server you&amp;rsquo;re connected to, you can join it and chat. Also, chat can be scrolled via &lt;code&gt;fn+arrow&lt;/code&gt; keys.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/join gentoo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;But there&amp;rsquo;s a catch, once you close irssi, you&amp;rsquo;ll realize that you&amp;rsquo;ll have to go through the entire process again so to autoconnect to various servers and channels you can either edit your &lt;code&gt;~/.irssi/config&lt;/code&gt; file or do it right from the client. There&amp;rsquo;s also another annoyance, there are automated messages for whenever people join or leave channels so ignoring these provides for a cleaner chat experience.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/server add -auto -network Libera irc.libera.chat &lt;span class=&#34;m&#34;&gt;6697&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/channel add -auto &lt;span class=&#34;c1&#34;&gt;#gentoo Libera&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/ignore &lt;span class=&#34;c1&#34;&gt;#gentoo JOINS PARTS QUITS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A particular window can be be closed by &lt;code&gt;/wc&lt;/code&gt;. I always forget the right commands so I created aliases for those in my IRSSI config.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cfg&#34; data-lang=&#34;cfg&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ADDSERV&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;SERVER ADD -AUTO -NETWORK&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# can be used as /ADDSERV irc.libera.chat 6697&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;ADD&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;CHANNEL ADD -AUTO&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /ADD #gentoo Libera&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;na&#34;&gt;IGNCH&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;IGNORE $0 JOINS PARTS QUITS&amp;#34;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# /IGNCH #gentoo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;layout-statusbar&#34;&gt;Layout/Statusbar&lt;/h2&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/irssi.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/irssi.png&#34;
    alt=&#34;Figure 1: IRSSI Layout. (Dark mode users click on the image to see the actual colours 😛)&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;IRSSI Layout. (Dark mode users click on the image to see the actual colours 😛)&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;There&amp;rsquo;s a statusbar at the bottom which shows the current &lt;code&gt;nick/server/channel/active_channels&lt;/code&gt;. There&amp;rsquo;s a window on the left which shows all the joined servers and channels (courtesy of  &lt;code&gt;adv_windowlist&lt;/code&gt;) and a window on the right which has list of all users (via &lt;code&gt;tmux-nicklist-portable&lt;/code&gt;). To get this style of statusbar and colorscheme, I&amp;rsquo;m currently using a theme derived from the popular &lt;a href=&#34;https://github.com/ronilaukkarinen/weed&#34;&gt;weed&lt;/a&gt; theme where I did minor modifications on statusbar and messagelist.&lt;/p&gt;
&lt;h2 id=&#34;scripts&#34;&gt;Scripts&lt;/h2&gt;
&lt;p&gt;If you&amp;rsquo;ve ever used emacs, you&amp;rsquo;ll know how it being an elisp interpreter lends to it powers of on-the-fly changes and extensibility beyond any measure. IRSSI is similar in that manner, it allows for modifications via perl scripts. There&amp;rsquo;s a central &lt;a href=&#34;https://scripts.irssi.org/&#34;&gt;scripts repository&lt;/a&gt; but one can create their own scripts akin to emacs packages!&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;In later iterations of this post, I&amp;rsquo;ll add customization options for mentioned scripts.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Here I&amp;rsquo;d like to mention some popular scripts which can easily improve both visual and functional experience while using irssi. These are&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;adv_windowlist&lt;/code&gt; which provides a list of all connected servers and channel akin to discord&amp;rsquo;s sidebar&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmux-nicklist-portable&lt;/code&gt; which adds a userlist for each channel on the right&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mouse&lt;/code&gt; for adding mouse scroll support&lt;/li&gt;
&lt;li&gt;&lt;code&gt;savecmdhist&lt;/code&gt; which allows for a persistant history of commands&lt;/li&gt;
&lt;li&gt;&lt;code&gt;trackbar&lt;/code&gt; adds a visual indicator underneath the message since last channel access&lt;/li&gt;
&lt;li&gt;Still not working: desktop-notify : needs, cpan Glib::Object::Introspection for that we do &lt;code&gt;yay -S perl-glib-object-introspection&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;xdcc&#34;&gt;XDCC&lt;/h2&gt;
&lt;p&gt;Some IRC channels also offer a way to share files via XDCC. It works by sending bots PMs with requests for a particular pack number which is a reference to the desired file.&lt;/p&gt;
&lt;div class=&#34;warning&#34;&gt;
&lt;p&gt;⚠ A word of caution, enabling automatic DCC is a very bad idea in general since it runs the risk of exposing your IP if the network doesn&amp;rsquo;t have masking enabled so be wary of accepting files.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;After knowing the pack number and the related bot, one sends the request and to automatically accept requests from that bot once can enable whitelist it by enabling autget for it, if you don&amp;rsquo;t wish to do that for each bot you can enable it globally but that is not advised.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/MSG &amp;lt;BOT&amp;gt; XDCC SEND &amp;lt;PKNO&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# to whitelist a bot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/set dcc_autoget_masks &amp;lt;BOT&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# alternatively&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/dcc get &amp;lt;BOT&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# global autoget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/set dcc_autoget on
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# to set download dir&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/set dcc_download_path &amp;lt;DIR&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# enable autoresume of files&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/set dcc_autoresume on
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;
&lt;p&gt;There are some limitations with IRC there&amp;rsquo;s no chat persistance unless you use a bouncer which I still have to dip my feet into, maybe that&amp;rsquo;s something for a future post, we&amp;rsquo;ll see.&lt;/p&gt;
&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.irchelp.org/faq/new2irc.html&#34;&gt;The IRC Prelude&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://irssi.org/New-users/&#34;&gt;IRSSI for New Users&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://irssi.org/documentation/settings/&#34;&gt;IRSSI Setup Options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://daniel.haxx.se/irchistory.html&#34;&gt;History of IRC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gist.github.com/xero/2d6e4b061b4ecbeb9f99&#34;&gt;IRC Cheatsheet&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;6  &lt;a href=&#34;https://libera.chat/guides/cloaks&#34;&gt;Cloaks Libera&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Direct Client-to-Client Protocol: &lt;a href=&#34;https://modern.ircdocs.horse/dcc.html&#34;&gt;DCC&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Elements of computing systems</title>
      <link>https://brongulus.github.io/notes/elements-of-computing-systems/</link>
      <pubDate>Fri, 10 Jun 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/elements-of-computing-systems/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;These are the notes which I took while studying computer architecture from the textbook &amp;ldquo;&lt;em&gt;The Elements of Computing Systems&lt;/em&gt; by &lt;em&gt;Noam Nisan &amp;amp; Shimon Schocken&lt;/em&gt; &amp;ldquo;. They&amp;rsquo;re very terse and have very opinionated content from the textbook so they should only be used in tandem with it for revision purposes.
&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-1.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-1.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
The text program is parsed, its semantics are uncovered, it&amp;rsquo;s represented in some low-level language that the computer can understand. This process is called &lt;em&gt;compilation&lt;/em&gt;. Its result is another text file, containing machine-level code.&lt;/p&gt;
&lt;p&gt;To make this abstract machine code concrete, it has to be realized by some &lt;em&gt;hardware architecture&lt;/em&gt; which is implemented by a &lt;em&gt;chipset&lt;/em&gt; - registers, memory, ALU, etc. These devices are made of logic gates which consist of &lt;em&gt;switching devices&lt;/em&gt; that are implemented by transistors.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Church-Turing conjecture&lt;/em&gt;: At their core, all computers are essentially equivalent.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs02.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs02.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;boolean-logic&#34;&gt;Boolean Logic&lt;/h2&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-03.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-03.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Any boolean function can be realised by just the &lt;em&gt;nand&lt;/em&gt; gate. Let that sink in. A gate is a physical device that implements a simple boolean function. They are implemented as transistors etched in silicon, packaged as chips. The boolean function chip is designed and tested by using a &lt;em&gt;Hardware Description Language&lt;/em&gt; (HDL). This simulated realisation is then tested for corectness and other parameters such as speed of computation, energy consumption and cost are quantified. To illustrate the same proces, HDL implementation of a XOR function is shown below.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-04.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-04.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Using built-in libarary chips is similar to writing a regular program except the PARTS section is replaced with BUILTIN Xor. Some things to note are that internal pins are created automatically when they appear in an HDL program and that pins may have an unlimited fan-out. In HDL programs, the existence of forks is inferred from the code.&lt;/p&gt;
&lt;p&gt;Chips are specified using the API style, for nand gate: &lt;br /&gt;
&lt;code&gt;Chip name: Nand&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Input: a,b&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Output: out&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Function: if ((a==1) and (b==1)) then out = 0, else out = 1&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multiplexer&lt;/strong&gt;: Has two input(data) bits &lt;em&gt;a,b&lt;/em&gt; and one selection bit &lt;em&gt;sel&lt;/em&gt; which decides which input bit would be the output.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-05.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-05.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Demultiplexer&lt;/strong&gt;: Takes in a single input and routes it to one of the possible outputs depeding on the selector bit.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-06.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-06.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;HDL programs treat multi-bit values like single-bit values but they are indexed(from right to left, rightmost being 0\(^{th}\) bit) to access individual bits. For example, a &lt;em&gt;m&lt;/em&gt;-way &lt;em&gt;n&lt;/em&gt;-bit mux would select one of its &lt;em&gt;m n&lt;/em&gt;-bit inputs and output it to its &lt;em&gt;n&lt;/em&gt;-bit output, where there would be &lt;em&gt;\(k=log_{2}m\)&lt;/em&gt; selection bits. A 4-way 16-bit mux API would look like: &lt;br /&gt;
&lt;code&gt;Chip name: Mux4Way16&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Input: a[16],b[16],c[16],d[16],sel[2]&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Output: out[16]&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Function: if(sel==00,01,10, or 11) then out = a,b,c, or d&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;Comment: The assignment is a 16-bit operation. For example, &amp;quot;out = a&amp;quot; means &amp;quot;for i = 0..15 out[i] = a[i]&amp;quot;&lt;/code&gt; &lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&#34;boolean-arithmetic&#34;&gt;Boolean Arithmetic&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Word size&lt;/em&gt; is a term used for specifying the number of bits that computers use for representing a basic chunk of values. For example, integer values are stored in 8-, 16-, 32- or 64-bit registers. Fixed word size implies the existence of a limit on number of values that the registers can represent. In general, using &lt;em&gt;n&lt;/em&gt; bits, one can represent values from 0 to 2\(^{n}\) - 1.&lt;/p&gt;
&lt;h3 id=&#34;addition&#34;&gt;Addition&lt;/h3&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-07.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-07.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;If the most significant bitwise addition generates a carry of 1, &lt;em&gt;overflow&lt;/em&gt; occurs, if that is ignored, one achieves &lt;em&gt;n&lt;/em&gt; correct bits for adding two &lt;em&gt;n&lt;/em&gt;-bit numbers.&lt;/p&gt;
&lt;h3 id=&#34;signed-numbers&#34;&gt;Signed Numbers&lt;/h3&gt;
&lt;p&gt;The coding scheme was chosen so that hardware implementation of arithmetic operations would be as simple as possible, its result being &lt;em&gt;two&amp;rsquo;s complement&lt;/em&gt; binary code that represents negative x as binary code that represents 2\(^{n}\) - x. For example, in a 4-bit binary system &lt;code&gt;-5&lt;/code&gt; would be represented as binary of &lt;code&gt;(16-5)&lt;/code&gt; or &lt;code&gt;1011&lt;/code&gt;. This leads us to the following properties:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For an n-bit system, 2\(^{n}\) signed numbers are generated, from -(2\(^{n-1}\)) to 2\(^{n-1}\) - 1.&lt;/li&gt;
&lt;li&gt;Code for positive numbers begins with 0 while for negatives with 1.&lt;/li&gt;
&lt;li&gt;To get code of -x from x, flip all bits of x and add 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;adders&#34;&gt;Adders&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Half adder&lt;/strong&gt;: Adds two numbers/bits and outputs in for of &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;carry&lt;/code&gt; which are LSB and MSB of the addition of the input bits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Full adder&lt;/strong&gt;: Adds three bits and outputs the result in form of &lt;code&gt;sum&lt;/code&gt; and &lt;code&gt;carry&lt;/code&gt; bits.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Adder&lt;/strong&gt;: Adds two &lt;em&gt;n&lt;/em&gt;-bit numbers and outputs as &lt;code&gt;out&lt;/code&gt;, which is also &lt;em&gt;n&lt;/em&gt;-bit. Here the overflow bit is ignored.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Incrementer&lt;/strong&gt;: Adds 1 to a given number, enables fetching next instruction from memory after executing the current.&lt;/p&gt;
&lt;p&gt;Note that this adder implementation is inefficient because of delays incurred by propogation of carry bits which can be acclerated by &lt;em&gt;carry lookahead&lt;/em&gt; heuristics.&lt;/p&gt;
&lt;h3 id=&#34;alu&#34;&gt;ALU&lt;/h3&gt;
&lt;p&gt;Designed to compute a set of arithmetic and logic operations, exactly &lt;em&gt;which&lt;/em&gt; ones is a design decision derived from cost-effectiveness considerations. Shown below is the Hack ALU which computes 18 functions which are controlled by six 1-bit &lt;em&gt;control bits&lt;/em&gt;. In addition to those there are &lt;code&gt;zr&lt;/code&gt; and &lt;code&gt;ng&lt;/code&gt; bits which flag whether the output is zero or negative. Note that the output overflow bit is ignored.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-08.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-08.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-09.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-09.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;To illustrate the ALU logic, if one wishes to compute &lt;code&gt;x-1 for x=27&lt;/code&gt;, then control bits would be &lt;code&gt;001110&lt;/code&gt;. These six directives are to be performed in order: first, we either set the x and y inputs to 0, or not; next, we either negate the resulting values, or not; then we compute either &lt;code&gt;+&lt;/code&gt; or &lt;code&gt;&amp;amp;&lt;/code&gt; on the preprocessed values; and finally, we either negate the resulting value, or not. The first two &lt;code&gt;00&lt;/code&gt; show that we neither zero nor negate x, then &lt;code&gt;11&lt;/code&gt; shows that we zero y and then negate it, leading to 16-bit value &lt;code&gt;1111111111111111&lt;/code&gt; which is -1 in two&amp;rsquo;s complement. The next control bit &lt;code&gt;1&lt;/code&gt; dictates addition operation and the last &lt;code&gt;0&lt;/code&gt; bit shows that output shouldn&amp;rsquo;t be negated hence we get the desired function &lt;code&gt;x-1&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;memory&#34;&gt;Memory&lt;/h2&gt;
&lt;p&gt;All the chips considered so far are time independent, they&amp;rsquo;re called &lt;em&gt;combinational chips&lt;/em&gt;. Now &lt;em&gt;sequential chips&lt;/em&gt; are introduced whose output depends not only on current time inputs but past inputs and outputs too. The notion of time is introduced by a &lt;em&gt;clock&lt;/em&gt; that generates a &lt;em&gt;cycle&lt;/em&gt; of binary singals that are called a &lt;em&gt;tick&lt;/em&gt; and a &lt;em&gt;tock&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;By viewing the time in the form of cycles instead of a continuous progression, the changes in the system are made atomic i.e. they&amp;rsquo;ll only be reflected during cycle transitions and within a cycle, no change would be shown. This discrete view helps in neutralizing randomness associated with time delays and can be used for synchronizing the operations of different chips. For that, the cycle should be long enough to contain the possible time delay but short enough so that the resulting system&amp;rsquo;s fast because the changes would only be shown during transitions.&lt;/p&gt;
&lt;p&gt;Also, to ensure output validity duration of the clock cycle has to be slightly longer than the time it takes a bit to travel the longest distance from one chip to another, plus the time it takes to complete the most time-consuming within-chip calculation.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-11.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-11.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;flip-flops&#34;&gt;Flip Flops&lt;/h3&gt;
&lt;p&gt;A Data flip-flip (DFF) is a memory chip which has a single-bit data input and output and an addition clock input(marked by small triangle on gate icon) that feeds from master clock&amp;rsquo;s signal. It models the behavior &lt;code&gt;out(t)=in(t-1)&lt;/code&gt; that is, in every subsequent time unit, DFF outputs input from previous time unit. At all other times, DFFs are &lt;em&gt;latched&lt;/em&gt;, meaning that changes in their inputs have no immediate effect on the output.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-10.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-10.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Note that the concept of feedback loops doesn&amp;rsquo;t make sense in combinational chips, but there is no difficulty in feeding outputs back into inputs if they&amp;rsquo;re passed through a DFF gate so that the output at time t does not depend on itself but rather on the output at time t-1.&lt;/p&gt;
&lt;p&gt;FFs are generally constructed from nand gates connected in feedback loops. The standard construction begins by building a non-clocked flip-flop which is bi-stable, that is, can be set to be in one of two states (storing 0, and storing 1). Then a clocked flip-flop is obtained by cascading two such non-clocked flip-flops, the first
being set when the clock ticks and the second when the clock tocks.&lt;/p&gt;
&lt;h3 id=&#34;registers&#34;&gt;Registers&lt;/h3&gt;
&lt;p&gt;A register is a DFF with a &lt;em&gt;load&lt;/em&gt; input. It stores and outputs its current value until &lt;em&gt;load&lt;/em&gt; instructs it to update to a new value.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-14.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-14.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-12.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-12.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;A 16-bit register behaves the same as a &lt;em&gt;bit&lt;/em&gt; chip, just that it deals with 16-bit values. A register fulfils the classical function of a memory device, remember and emit the last written value, until its &lt;em&gt;set&lt;/em&gt; to another.&lt;/p&gt;
&lt;h3 id=&#34;ram&#34;&gt;RAM&lt;/h3&gt;
&lt;p&gt;A RAM chip consists of &lt;em&gt;n&lt;/em&gt; 16-bit register chips which can be selected and manipulated separately. By specifying a particular address (0 to n-1), a particular register can be selected for read/write operations. Note that the access time of any randomly selected register is instantaneous.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-13.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-13.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;RAM implementations can be modular, for example one could implement RAM64 i.e. having 64 registers by using eight RAM8 chips, to select a particular register one uses a 6-bit address &lt;em&gt;xxxyyy&lt;/em&gt; where &lt;em&gt;xxx&lt;/em&gt; bits can be used to select one of the RAM8 chips and &lt;em&gt;yyy&lt;/em&gt; bits can be used to select the register within the RAM8 chip.&lt;/p&gt;
&lt;h3 id=&#34;counter&#34;&gt;Counter&lt;/h3&gt;
&lt;p&gt;A chip that&amp;rsquo;s implementation of an incrementer used to keep track of program instructions (PC: Program Counter). It has three functional inputs alongwith &lt;code&gt;in&lt;/code&gt;, namely &lt;code&gt;inc&lt;/code&gt;, which increases counter state every cycle(PC++) and &lt;code&gt;reset&lt;/code&gt; which sets it to 0 and &lt;code&gt;load&lt;/code&gt; sets its value to whatever values is fed by &lt;code&gt;in&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-15.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-15.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-16.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-16.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;machine-language&#34;&gt;Machine Language&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Form follows function.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;A machine language can be viewed as an agreed-upon formalism designed to manipulate a &lt;em&gt;memory&lt;/em&gt; using a &lt;em&gt;processor&lt;/em&gt; and a set of &lt;em&gt;registers&lt;/em&gt;. Unlike high-level languages, whose design goals are cross-platform compatibility and power of expression, machine languages are designed to effect direct execution in a specific hardware platform and its control. For this project, Hack machine language is used.&lt;/p&gt;
&lt;p&gt;Machine language programs can be written in either &lt;em&gt;binary&lt;/em&gt; or &lt;em&gt;symbolic&lt;/em&gt; instructions. Programs writtern in symbolic(&lt;em&gt;assembly&lt;/em&gt;) languages are translated into executable binary code by a translator program called &lt;em&gt;assembler&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;hardware&#34;&gt;Hardware&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Functionally speaking, a memory is a continuous sequence of cells, also referred to as locations or memory registers, each having a unique address.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Processor&lt;/strong&gt;: A device capable of performing a fixed set of primitve operations which include arithmetic, logical, memory access and control/branching operations.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registers&lt;/strong&gt;: Inside the processor&amp;rsquo;s chip, they serve as high-speed local memory, allowing it to manipulate data and instructions without having to be dependent on slow memory chips. They&amp;rsquo;re categorized into &lt;em&gt;data&lt;/em&gt; and &lt;em&gt;address&lt;/em&gt; registers.&lt;/p&gt;
&lt;h3 id=&#34;instructions&#34;&gt;Instructions&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Arithmetic and logical operations&lt;/strong&gt;: Assuming that the processor has a set of registers denoted &lt;code&gt;R0, R1, R2,...&lt;/code&gt;. Basic operations like addition, subtraction, and(bitwise), or, not. &lt;br /&gt;
&lt;code&gt;load R1,true&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;load R2,false&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;and R1,R2,R2&lt;/code&gt; (R1 ← R1 And R2) &lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Memory access&lt;/strong&gt;: Using address register &lt;code&gt;A&lt;/code&gt;, let us set memory location 17 to value 1. &lt;br /&gt;
&lt;code&gt;load A,17&lt;/code&gt; &lt;br /&gt;
&lt;code&gt;load M,1&lt;/code&gt; &lt;br /&gt;
Here by convention, M stands for memory register selected by A.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flow control&lt;/strong&gt;: For facilitating branching actions, labelled &lt;em&gt;goto&lt;/em&gt; statements exist.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-17.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-17.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Symbols&lt;/strong&gt;: Make it easier to not rely on rigid physical addresses which makes the code &lt;em&gt;relocatable&lt;/em&gt;.&lt;/p&gt;
&lt;h3 id=&#34;hack&#34;&gt;Hack&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Memory&lt;/strong&gt;: Hack uses two distinct memory units, &lt;em&gt;data&lt;/em&gt; and &lt;em&gt;instruction&lt;/em&gt; memory. Both
memories are 16-bit wide, and each has a 15-bit address space, hence maximum addressable size of each memory unit is 2\(^{15}\) or 32K 16-bit words.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/ecs-18.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/ecs-18.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Data memory&amp;rsquo;s &lt;code&gt;address&lt;/code&gt; input always contains some value so there&amp;rsquo;s always one selected register called M. Instruction memory&amp;rsquo;s &lt;code&gt;address&lt;/code&gt; input also always contains some value that is, there&amp;rsquo;s always one selected instruction memory register whose value is referred to as &lt;em&gt;current instruction&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registers&lt;/strong&gt;: Hack Instructions work on three 16-bit registers, &lt;em&gt;data&lt;/em&gt; (D: stores value), &lt;em&gt;address&lt;/em&gt; (A: both address and data) and selected &lt;em&gt;data memory&lt;/em&gt; register M. To store a constant in A register, instruction is &lt;code&gt;@17&lt;/code&gt;, to set D register to a value, two instructions are needed: &lt;code&gt;@17&lt;/code&gt; then &lt;code&gt;D=A&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Addressing&lt;/strong&gt;: The &lt;code&gt;@xxx&lt;/code&gt; instruction does two things, first it makes the RAM register whose address is &lt;code&gt;xxx&lt;/code&gt; the selected memory register(M) and then it makes the value of the ROM register whose address is &lt;code&gt;xxx&lt;/code&gt; the selected instruction. For example, to set value of &lt;code&gt;RAM[100]&lt;/code&gt; to &lt;code&gt;17&lt;/code&gt;, instructions are &lt;code&gt;@17, D=A, @100, M=D&lt;/code&gt;. Initially A acts as a data register then as an address register. To set value of RAM[100] to value of &lt;code&gt;RAM[200]&lt;/code&gt;, do &lt;code&gt;@200, D=M, @100, M-D&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Branching&lt;/strong&gt;:&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IUSACO</title>
      <link>https://brongulus.github.io/notes/iusaco-notes/</link>
      <pubDate>Sun, 05 Jun 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/iusaco-notes/</guid>
      <description>&lt;h2 id=&#34;input-and-output&#34;&gt;Input and Output&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;cstdio&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;using&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;std&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;freopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;template.in&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;r&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;freopen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;template.out&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;w&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;When using C++, arrays should be declared globally, or initialized to zeros if declared locally to avoid garbage values.&lt;/li&gt;
&lt;li&gt;32bit int: \(\pm 2\times10^{9}\) v/s 64bit int: \(\pm 9\times 10^{18}\)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;complexity-and-algorithm-analysis&#34;&gt;Complexity and algorithm analysis&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Elementary mathematical calculation: O(1)&lt;/li&gt;
&lt;li&gt;Unordered set/map: O(1) per operation&lt;/li&gt;
&lt;li&gt;Binary Search: O(log n)&lt;/li&gt;
&lt;li&gt;Ordered set/map or Priority Queue: O(log n) per operation&lt;/li&gt;
&lt;li&gt;Prime factorization or primality check for int: \(O(\sqrt{n})\)&lt;/li&gt;
&lt;li&gt;Reading n inputs: O(n)&lt;/li&gt;
&lt;li&gt;Iterating through n element array: O(n)&lt;/li&gt;
&lt;li&gt;Sorting: Usually O(n log n) for &lt;code&gt;std::sort()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Iterating through all subsets of size k of input elements: O(\(n^{k}\) ), for triplets O(\(n^{3}\))&lt;/li&gt;
&lt;li&gt;Iterating through all subsets: O(\(2^{n}\))&lt;/li&gt;
&lt;li&gt;Iterating through all permutations: O(n!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;built-in-data-structures&#34;&gt;Built-in Data Structures&lt;/h2&gt;
&lt;p&gt;Data Structure determines how data is stored, each supports some operations efficiently. In following discussion, desired data type is put between &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;. Most std structures support &lt;code&gt;size()&lt;/code&gt; and &lt;code&gt;empty()&lt;/code&gt; methods.&lt;/p&gt;
&lt;h3 id=&#34;iterators&#34;&gt;Iterators&lt;/h3&gt;
&lt;p&gt;Allows for traversal of a container with the help of a pointer.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iterator&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myvector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;it&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;myvector&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;it&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;//prints the values in the vector using the pointer
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Alternate way to achieve the same with a for-each loop and &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;auto&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// prints values in vector
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;dynamic-arrays&#34;&gt;Dynamic Arrays&lt;/h3&gt;
&lt;p&gt;Addition and deletion at the end in O(1) time and in the middle in O(n) time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// stores 1 to 10 in a dynamic array
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Vectors can be made static sized by initializing it with a size, &lt;code&gt;vector&amp;lt;int&amp;gt; v(30);&lt;/code&gt;. They also support an &lt;code&gt;v.erase()&lt;/code&gt; operation. A dynamic array can be sorted (default ascending) by &lt;code&gt;sort(v.begin(), v.end())&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;stacks-and-queues&#34;&gt;Stacks and Queues&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Stacks&lt;/strong&gt;: LIFO with operations &lt;code&gt;push&lt;/code&gt; (add at end), &lt;code&gt;pop&lt;/code&gt; (remove at end) and &lt;code&gt;top&lt;/code&gt; (show end) all of which are O(1). Declared as &lt;code&gt;stack&amp;lt;int&amp;gt; s&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Queues&lt;/strong&gt;: FIFO with operations &lt;code&gt;push&lt;/code&gt; (add in front), &lt;code&gt;pop&lt;/code&gt; (remove at end) and &lt;code&gt;front&lt;/code&gt; (show end) in O(1).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Deques&lt;/strong&gt;: Combination of a stack and a queue supporting insertion and deletion from both front and end. Operations are aptly named as &lt;code&gt;push_back&lt;/code&gt;, &lt;code&gt;push_font&lt;/code&gt;, &lt;code&gt;pop_back&lt;/code&gt; and &lt;code&gt;pop_front&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Priority Queues&lt;/strong&gt;: Supports insertion of elements and deletion and retrieval of element &lt;em&gt;with highest priority&lt;/em&gt; in O(log n) where priority is based on a comparator function (highest element in front). Has &lt;code&gt;push&lt;/code&gt; (add at end), &lt;code&gt;pop&lt;/code&gt; (remove at end) and &lt;code&gt;top&lt;/code&gt; (show end) operations and is declared as &lt;code&gt;priority_queue&amp;lt;int&amp;gt; pq;&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;sets&#34;&gt;Sets&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;set&lt;/em&gt; is a collection of objects having no duplicates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unordered Sets&lt;/strong&gt;: Work by hashing that is, assigning a unique code to every object allowing for &lt;code&gt;insert&lt;/code&gt;, &lt;code&gt;erase&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; (set contains element then 1 else 0) in O(1). Traversal is pointless. Declared as &lt;code&gt;unordered_set&amp;lt;int&amp;gt; s&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;element&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// iterating through a set, arbitrary order
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Ordered Sets&lt;/strong&gt;: Insertion, deletion and search needs O(log n) time. Has additional operations &lt;code&gt;begin()&lt;/code&gt; (iterator to lowest element), &lt;code&gt;end()&lt;/code&gt;, &lt;code&gt;lower_bound()&lt;/code&gt; (iterator to least element ≥ some k) and &lt;code&gt;upper_bound()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Multisets&lt;/strong&gt;: A sorted set allowing multiple copies of same element, whose &lt;code&gt;count&lt;/code&gt; operation returns the number of times an element is present in set. Time complexity of this operation is O(log n + f) where &lt;em&gt;log n&lt;/em&gt; factor searches for element and &lt;em&gt;f&lt;/em&gt; factor iterates through sorted set to get count. Declared as &lt;code&gt;multiset&amp;lt;int&amp;gt; ms&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;maps&#34;&gt;Maps&lt;/h3&gt;
&lt;p&gt;A &lt;em&gt;map&lt;/em&gt; is a set of &lt;em&gt;ordered pairs&lt;/em&gt; called key and value where keys must be unique but values can be repeated. Supported operations are addition and removal of key-value pair and &lt;em&gt;retrieval&lt;/em&gt; of values for a given key. Unordered maps perform aforementioned methods in O(1) whereas for ordered maps it&amp;rsquo;s O(log n), sorted in order of key.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unordered Maps&lt;/strong&gt;: In map &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;m[key] = value&lt;/code&gt; operator assigns value to a key and places the pair on the map, &lt;code&gt;m[key]&lt;/code&gt; returns value associated with the key, &lt;code&gt;count(key)&lt;/code&gt; checks for existence of key in the map and &lt;code&gt;erase(it)&lt;/code&gt; removes pair associated with a key or iterator. Declared as &lt;code&gt;unordered_map&amp;lt;int, int&amp;gt; m&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ordered Maps&lt;/strong&gt;: Supports additional operations &lt;code&gt;lower_bound&lt;/code&gt; and &lt;code&gt;upper_bound&lt;/code&gt; which return iterators pointing to lowest entry not less than/ strictly greater than a specified key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [(3,5); (11,4)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;491&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [(3,5); (10,491); (11,4)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower_bound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lower_bound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 10 491
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;cout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;upper_bound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34; &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;upper_bound&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// 11 4
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;erase&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// [(3,5); (10,491)]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;elementary-techniques&#34;&gt;Elementary Techniques&lt;/h2&gt;
&lt;h3 id=&#34;simulation&#34;&gt;Simulation&lt;/h3&gt;
&lt;p&gt;Simulation refers to the act of doing precisely what the problem statement states and nothing else; essentially simulating it.&lt;/p&gt;
&lt;h3 id=&#34;complete-search&#34;&gt;Complete Search&lt;/h3&gt;
&lt;p&gt;Brute forcing through all the possible cases in solution space to arrive at the solution. To iterate through all permutations of a list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// process or check the current permutation for validity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next_permutation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;sorting-and-comparators&#34;&gt;Sorting and Comparators&lt;/h3&gt;
&lt;p&gt;C++ has built-in function for sorting in ascending order: &lt;code&gt;std::sort(arr, arr+N)&lt;/code&gt; or for a vector &lt;code&gt;sort(v.begin(), v.end())&lt;/code&gt;. For sorting in a self-defined order, one must use a custom comparator.&lt;/p&gt;
&lt;h3 id=&#34;greedy-algorithms&#34;&gt;Greedy Algorithms&lt;/h3&gt;
&lt;p&gt;Algorithms that select the most optimal choice at each step, instead of looking at the solution space as a whole. Usually in a greedy algorithm, there is a heuristic or value function that determines which choice is considered most optimal. The choice of the greedy algorithm matters too, for example in a scheduling problem choosing earliest starting next event would be incorrect, instead one should go for earliest ending next event because that would give one more choices for future events.&lt;/p&gt;
&lt;p&gt;Greedy won&amp;rsquo;t work in all scenarios though, for example in the fairly popular coin change problem, if the denominations are &lt;code&gt;{1,3,4}&lt;/code&gt; then greedy solution would be &lt;code&gt;{4,1,1}&lt;/code&gt; but the correct least amount of coins would be two &lt;code&gt;{3,3}&lt;/code&gt;. Similarly it cannot work for the knapsack problem which is solved using Dynamic Programming.&lt;/p&gt;
&lt;h2 id=&#34;graph-theory&#34;&gt;Graph Theory&lt;/h2&gt;
&lt;h3 id=&#34;representation&#34;&gt;Representation&lt;/h3&gt;
&lt;p&gt;Graphs (N vertices and M edges) are usually given in the format: &lt;code&gt;N&lt;/code&gt; &lt;code&gt;M&lt;/code&gt; followed by the &lt;code&gt;M edges&lt;/code&gt; each showing the connecting vertices. One thing to note is that a graph should be stored globally and statically, for access outside the main method. A graph can be represented in three ways:&lt;/p&gt;
&lt;h4 id=&#34;adjacency-list&#34;&gt;Adjacency List&lt;/h4&gt;
&lt;p&gt;For using DFS, BFS, Dijkstra or other &lt;code&gt;single-source&lt;/code&gt; traversal algorithms, it&amp;rsquo;s the preferred way of storing graphs. In it, an array of length N of lists is maintained.
&lt;a href=&#34;https://brongulus.github.io/ox-hugo/usaco-adj.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/usaco-adj.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
They take up &lt;code&gt;O(M+N)&lt;/code&gt; space but allow for easy traversal among the neighbors of a vertex. Often, there&amp;rsquo;s a need to maintain a &lt;code&gt;visited&lt;/code&gt; array.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// subtract 1 for vertex since array is zero-indexed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// omit for directed graph
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// For a weighted graph:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Edge&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;to&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;adjacency-matrix&#34;&gt;Adjacency Matrix&lt;/h4&gt;
&lt;p&gt;This is an &lt;code&gt;N x N&lt;/code&gt; 2D array that stores for each pair of indices(a,b) whether an edge exists between them or not. Primarily used for Floyd-Warshall Algorithm.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// or w for weighted graph
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ignore this if directed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;edge-list&#34;&gt;Edge List&lt;/h4&gt;
&lt;p&gt;Usually used for weighted undirected graphs when sorting the edges by weight is needed (DSU). Its simply a single list of all edges &lt;code&gt;(a, b, w)&lt;/code&gt; where a and b are the vertices and w is the weight of connecting edge. Each edge is added only oncce.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;weight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;operator&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Edge&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// ascending weight sort
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;vector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Edge&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;cin&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push_back&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Edge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// add edge to list
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;begin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edges&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;traversal&#34;&gt;Traversal&lt;/h3&gt;
&lt;h4 id=&#34;breadth-first-search--bfs&#34;&gt;Breadth-First Search (BFS)&lt;/h4&gt;
&lt;p&gt;Visits nodes in order of distance away from the starting node; first visit nodes that are one edge away then those that are two edges away and so on. It can be used for finding the distance from a starting node to all nodes in an unweighted graph.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;bfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_nodes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;memset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// fill distance array with -1s
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;seen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;empty&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;front&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;seen&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total_nodes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// see: https://observablehq.com/@yurivish/efficient-graph-search
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once BFS finishes, the array &lt;code&gt;dist&lt;/code&gt; contains the distances from the start node to each node.&lt;/p&gt;
&lt;h4 id=&#34;depth-first-search--dfs&#34;&gt;Depth-First Search (DFS)&lt;/h4&gt;
&lt;p&gt;Continues down a single path as far as possible until it has no more vertices to visit along that path, then backtracks and finds more vertices to visit.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;adj&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;node&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;dfs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If stack overflows are encountered with recursive DFS, it can be implemented iteravely by storing nodes in the BFS implementation on a stack instead of a queue.&lt;/p&gt;
&lt;h3 id=&#34;floodfill&#34;&gt;Floodfill&lt;/h3&gt;
&lt;p&gt;Its DFS but on a grid and the aim is to find the connected component of all the connected cells with the same number. As opposed to an explicit graph where the edges are given, a grid is an implicit graph where the neighbours are nodes adjacent in the four directions.&lt;/p&gt;
&lt;p&gt;When doing floodfill, an &lt;code&gt;N x M&lt;/code&gt; array of bools &lt;code&gt;visited&lt;/code&gt; is maintained and a global variable for the size of currently visiting component. The search function is called recursively from squares on all four sides of the current one.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXM&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;currentCompSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// outside grid
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// wrong color
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// already visited
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// mark current sq as visited
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;currentCompSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;// recursively call floodfill for neighbour sqs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;n&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cm&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;   * additional stuff here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;visited&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;currentCompSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;floodfill&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;grid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;disjoint-set-union-data-structure&#34;&gt;Disjoint-Set Union Data Structure&lt;/h3&gt;
&lt;p&gt;It supports two operations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add an edge between two nodes&lt;/li&gt;
&lt;li&gt;Check if two nodes are connected&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For this, the sets are stored as trees; initially each node is its own set then the sets are combined when an edge is added between two nodes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXN&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// store root of each set
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;N&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// initially, root of each set is node itself
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// find root of set of x
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// if x is its parent, it is the root
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;union&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// merge sets of a and b
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// find a&amp;#39;s root
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// find b&amp;#39;s root
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// merge sets by setting parent of d to c
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The naive recursive implementation of find can be improved from &lt;code&gt;O(nm)&lt;/code&gt; by path compression; the idea being reassignment of nodes on recursive calls to &lt;code&gt;find&lt;/code&gt; to prevent formation of long chains and the runtime becomes &lt;code&gt;O(n log n)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;find&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;miscellaneous&#34;&gt;Miscellaneous&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;DAGs (Directed Acyclic graphs) by virtue of not having any cycles allows them to have an ordering of nodes such that for any edge from &lt;em&gt;u&lt;/em&gt; to &lt;em&gt;v&lt;/em&gt;, &lt;em&gt;u&lt;/em&gt; appears before &lt;em&gt;v&lt;/em&gt; (topological sorting).&lt;/li&gt;
&lt;li&gt;Bipartite graph is such that each node can only be colored by 2 colors such that no adjacent nodes share the same colour. A graph is bipartite iff there are no cycles of odd length. A modified BFS can be use to check whether a graph is bipartite or not.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;more-techniques&#34;&gt;More Techniques&lt;/h2&gt;
&lt;h3 id=&#34;prefix-sums&#34;&gt;Prefix Sums&lt;/h3&gt;
&lt;p&gt;To process queries to find the sum of elements between two indices in a list, prefix sum is useful. Using 1-index in the array is beneficial i.e. assigning &lt;code&gt;arr[0] = 0&lt;/code&gt; and hence &lt;code&gt;prefix[0] = 0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;\(prefix[k] = \sum_{i=1}^{k}arr[i] = prefix[k-1] + arr[k]\)&lt;/p&gt;
&lt;p&gt;For processing Q queries consisting on an array of N elements, the complexity is &lt;code&gt;O(N+Q)&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;note&#34;&gt;
&lt;p&gt;TODO: DP, 2D prefix sum as 1-D only&lt;/p&gt;
&lt;/div&gt;
&lt;h3 id=&#34;binary-search&#34;&gt;Binary Search&lt;/h3&gt;
&lt;h3 id=&#34;basic-number-theory&#34;&gt;Basic Number Theory&lt;/h3&gt;
&lt;p&gt;Prime factorization of a number is computed by this algorithm in \(O(\sqrt{n})\):
&lt;a href=&#34;https://brongulus.github.io/ox-hugo/usaco-pf.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/usaco-pf.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;i&lt;/th&gt;
&lt;th&gt;n&lt;/th&gt;
&lt;th&gt;v&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;252&lt;/td&gt;
&lt;td&gt;{}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;126&lt;/td&gt;
&lt;td&gt;{2}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;63&lt;/td&gt;
&lt;td&gt;{2,2}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;21&lt;/td&gt;
&lt;td&gt;{2,2,3}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;{2,2,3,3}&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;{2,2,3,3,7}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;GCD using Euclidean Algorithm in &lt;code&gt;O(log min(a,b))&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gcd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;%&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;LCM can be computed using GCD by \(\frac{a \times b}{gcd(a,b)}\)&lt;/p&gt;
&lt;p&gt;Modular Arithmetic is useful for dealing with overflows by taking remainders:&lt;/p&gt;
&lt;p&gt;\[\begin{align*}
(a \pm b)\mod m &amp;amp;= (a\mod m \pm b\mod m)\mod m \\
(a \times b)\mod m &amp;amp;= ((a\mod m) \times (b\mod m))\mod m \\
a^{b}\mod m &amp;amp;= (a\mod m)^{b}\mod m
\end{align*}\]&lt;/p&gt;
&lt;h2 id=&#34;additional-topics&#34;&gt;Additional Topics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Two Pointers &lt;br /&gt;
Iterate across an array that track the start and end of an interval or values in a sorted array. Both pointers are monotonic i.e. start at one end of array and move in only one direction.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;line-sweep&#34;&gt;Line Sweep&lt;/h3&gt;
&lt;h3 id=&#34;bitwise-operations&#34;&gt;Bitwise Operations&lt;/h3&gt;
&lt;h3 id=&#34;ad-hoc&#34;&gt;Ad-hoc&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Another nix post in the wall</title>
      <link>https://brongulus.github.io/blog/nix-intro/</link>
      <pubDate>Thu, 02 Jun 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/blog/nix-intro/</guid>
      <description>&lt;h2 id=&#34;starting&#34;&gt;Starting&lt;/h2&gt;
&lt;p&gt;Are you using Nixos? This is not for you.
Do you want multi-user installation? This is not for you.
This is only useful if you want to use both flakes and home-manager.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single-user installation (no sudo needed, easier to remove, good for testing purposes)
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  sh &amp;lt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;curl -L https://nixos.org/nix/install&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; --no-daemon
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Source the new profile or login.
&lt;code&gt;. ~/.nix-profile/etc/profile.d/nix.sh&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Since most of the nix &amp;ldquo;guides&amp;rdquo; are outdated, check what your current version supports &lt;code&gt;nix --help&lt;/code&gt;, &lt;del&gt;at the time of writing this, there&amp;rsquo;s no need to enable experimental features for flakes :)&lt;/del&gt; spoke too soon.&lt;/li&gt;
&lt;li&gt;Upgrading nix:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  nix-channel --update&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; nix-env -iA nixpkgs.nix nixpkgs.cacert
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Check if &lt;code&gt;nixpkgs-unstable&lt;/code&gt; channel (package sources basically) is installed or not by &lt;code&gt;nix-channel --list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You can look at user-installed packages by &lt;code&gt;nix-env --query&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;home-manager&#34;&gt;Home manager&lt;/h2&gt;
&lt;p&gt;Allows declarative configuration of user-specific (non global) packages and dotfiles.&lt;/p&gt;
&lt;h3 id=&#34;installation&#34;&gt;Installation&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nix-channel --add https://github.com/nix-community/home-manager/archive/master.tar.gz home-manager
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nix-channel --update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;.bash_profile&lt;/code&gt;. (might not be needed for single-user systems, check back later)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;NIX_PATH&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;NIX_PATH&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:+:&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$NIX_PATH&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.nix-defexpr/channels:/nix/var/nix/profiles/per-user/root/channels
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In your &lt;code&gt;.bash_profile&lt;/code&gt;, add below and source the profile for your current session.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/.nix-profile/etc/profile.d/hm-session-vars.sh&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;configuration&#34;&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Now check &lt;code&gt;~/.config/nixpkgs/home.nix&lt;/code&gt;, if it exists then for the most part you&amp;rsquo;ve successfully installed (not sure about configuration) home-manager. Building a configuration produces a directory in the Nix store that contains all files and programs that should be available in your home directory and Nix user profile, respectively. Run &lt;code&gt;home-manager build&lt;/code&gt; to successfully verify. Also periodically check &lt;code&gt;home-manager news&lt;/code&gt; for updates regarding new changes to packages that are referred in your config. After &lt;a href=&#34;https://nix-community.github.io/home-manager/index.html#sec-install-standalone&#34;&gt;adding some packages&lt;/a&gt; (section 2.1), run &lt;code&gt;home-manger switch&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;fleyks--sorry&#34;&gt;Fleyks (&lt;em&gt;sorry&lt;/em&gt;)&lt;/h2&gt;
&lt;p&gt;Flakes allow us to define inputs (you can think of them as dependencies) and outputs of packages in a declarative way and allow for dependency pinning using locks. As of writing this (June 2022) flakes are still experimental, so they must be enabled explicitly.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;nix-env -iA nixpkgs.nixFlakes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This replaces nix 2.9.0 with 2.8.1? Look into why that&amp;rsquo;s happening. For now we enable experimental features.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;mkdir -p ~/.config/nix
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;experimental-features = nix-command flakes&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.config/nix/nix.conf
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The documentation is so stinky for flakes, like there are &lt;em&gt;n&lt;/em&gt; variants sayings \(n^2\) different things, so for now I&amp;rsquo;m just winging it. Comment out the stateVersion from &lt;code&gt;home.nix&lt;/code&gt; and in the same directory create a &lt;code&gt;flake.nix&lt;/code&gt;. Replace jdoe with your username. Also the stateVersion can be changed accordingly to upgrade your &lt;code&gt;home-manager&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nix&#34; data-lang=&#34;nix&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;description&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Home Manager configuration of Jane Doe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Specify the source of Home Manager and Nixpkgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;home-manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github:nix-community/home-manager&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;nixpkgs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;github:nixos/nixpkgs/nixos-unstable&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;home-manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;inputs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;nixpkgs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;follows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;nixpkgs&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;outputs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;home-manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;x86_64-linux&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;jdoe&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;homeConfigurations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;home-manager&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;homeManagerConfiguration&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Specify the path to your home configuration here&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;configuration&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;./home.nix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;inherit&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;system&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;homeDirectory&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;/home/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Update the state version as needed.&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# See the changelog here:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# https://nix-community.github.io/home-manager/release-notes.html#sec-release-21.05&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;stateVersion&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;22.05&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# TODO add current unstable home-manager version&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# Optionally use extraSpecialArgs&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;c1&#34;&gt;# to pass through arguments to home.nix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now it&amp;rsquo;s time to flake-ify your &lt;code&gt;hm&lt;/code&gt;. Here &amp;lt;flake-uri&amp;gt; would be &lt;code&gt;path:.config/nixpkgs&lt;/code&gt; assuming your pwd is &lt;code&gt;~&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  home-manager switch --flake &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;flake-uri&amp;gt;#jdoe&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The flake inputs are not upgraded automatically when switching. The analogy to the command &lt;code&gt;home-manager --update&lt;/code&gt; &amp;hellip; is &lt;code&gt;nix flake update&lt;/code&gt;. If updating more than one input is undesirable, the command &lt;code&gt;nix flake lock --update-input &amp;lt;input-name&amp;gt;&lt;/code&gt; can be used.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Meditations</title>
      <link>https://brongulus.github.io/notes/meditations/</link>
      <pubDate>Mon, 14 Mar 2022 00:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/notes/meditations/</guid>
      <description>&lt;h2 id=&#34;book-2-on-the-river-gran-among-the-quadi&#34;&gt;Book 2: On the River Gran, Among the Quadi&lt;/h2&gt;
&lt;p&gt;And so none of them can hurt me. No one can implicate me in ugliness. Nor can I feel angry at my relative, or hate him. We were born to work together like feet, hands, and eyes, like the two rows of teeth, upper and lower. To obstruct each other is unnatural. To feel anger at someone, to turn your back on him: these are obstructions.&lt;/p&gt;
&lt;p&gt;Concentrate every minute like a Roman- like a man- on doing what&amp;rsquo;s in front of you with precise and genuine seriousness, tenderly, willingly, with justice. And on freeing yourself from all other distractions. Yes, you can- if you do everything as if it were the last thing you were doing in your life, and stop being aimless, stop letting emotions override what your mind tells you, stop being hypocritical, self-centered and irritable.&lt;/p&gt;
&lt;p&gt;Do external things distract you? Then make time for yourself to learn something worthwhile; stop letting yourself be pulled in all directions. But make sure you guard against the other kind of confusion. People who labor all their lives but have no purpose to direct every thought and impulse toward are wasting their time- even when hard at work.&lt;/p&gt;
&lt;p&gt;You could leave life right now. Let that determine what you do and say and think.&lt;/p&gt;
&lt;p&gt;Nothing is more pathetic than people who run around in circles, &amp;ldquo;delving into things that lie beneath&amp;rdquo; and conducting investigations into the souls of the people around them, never realizing that all you have to do is to be attentive to the power inside you and worship it sincerely.&lt;/p&gt;
&lt;p&gt;What is divine deserves our respect because it is good; what is human deserves our affection because it is like us. And our pity too, sometimes, for its inability to tell good from bad- as terrible a blindness as the kind that can&amp;rsquo;t tell white from black.&lt;/p&gt;
&lt;p&gt;The present is all that they can give up, since that is all you have, and what you do not have, you cannot lose.&lt;/p&gt;
&lt;p&gt;The human soul degrades itself.&lt;/p&gt;
&lt;p&gt;Above all, when it does its best to become an abscess, a kind of detached growth on the world.&lt;/p&gt;
&lt;p&gt;When it allows its action and impulse to be without a purpose, to be random and disconnected: even the smallest things ought to be directed toward a goal.&lt;/p&gt;
&lt;p&gt;The body and its parts are a river, the soul a dream and mist, life is warfare and a journey far from home, lasting reputation is oblivion.
Then what can guide us?
Only philosophy.&lt;/p&gt;
&lt;p&gt;And nothing natural is evil.&lt;/p&gt;
&lt;h2 id=&#34;book-3-in-carnuntum&#34;&gt;Book 3: In Carnuntum&lt;/h2&gt;
&lt;p&gt;But getting the most out of ourselves, calculating where our duty lies, analyzing what we hear and see, deciding whether it&amp;rsquo;s time to call it quits- all the things you need a healthy mind for&amp;hellip; all those are gone.
So we need to hurry.
Not just because we move daily closer to death but also because our understanding- our grasp of the world- may be gone before we get there.&lt;/p&gt;
&lt;p&gt;We should remember that even Nature&amp;rsquo;s inadvertence has its own charm, its own attractiveness.&lt;/p&gt;
&lt;p&gt;You boarded, you set sail, you&amp;rsquo;ve made the passage. Time to disembark. If it&amp;rsquo;s for another life, well, there&amp;rsquo;s nowhere without gods on that side either. If to nothingness, then you no longer have to put up with pain or pleasure, or go on dancing attendance on this battered crate, your body- so much inferior to that which serves it.
One is mind and spirit, the other earth and garbage.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t waste your the rest of your time here worrying about other people- unless it affects the common good. It will keep you from doing anything useful. You&amp;rsquo;ll be too preoccupied with what so-and-so is doing, and why, and what they&amp;rsquo;re saying, and what they&amp;rsquo;re thinking, and what they&amp;rsquo;re up to, and all the other things that throw you off and keep you from focusing on your own mind.
You need to avoid certain things in your train of thought: everything random, everything irrelevant. And certainly everything self-important or malicious.&lt;/p&gt;
&lt;p&gt;He does only what is his to do, and considers constantly what the world has in store for him- doing his best, and trusting that all is &lt;strong&gt;for&lt;/strong&gt; the best. For we carry our fate with us- and it carries us.&lt;/p&gt;
&lt;p&gt;And he cares nothing for their praise- men who can&amp;rsquo;t even meet their own standards.&lt;/p&gt;
&lt;p&gt;&amp;hellip; then don&amp;rsquo;t make room for anything but it- for anything that might lead you astray, tempt you off the road, and leave you unable to devote yourself completely to achieving the goodness that is uniquely yours.&lt;/p&gt;
&lt;p&gt;Choose what&amp;rsquo;s best.
-Best is what benefits &lt;strong&gt;me&lt;/strong&gt;.
As a rational being? Then follow through. Or just as an animal? Then say so and stand your ground without making a show of it.&lt;/p&gt;
&lt;p&gt;Never regard something as doing you good if it makes you betray a trust, or lose your sense of shame, or makes you show hatred, suspicion, ill will, or hypocrisy, or a desire for things best done behind closed doors.&lt;/p&gt;
&lt;p&gt;Your ability to control your thoughts- treat it with respect. It&amp;rsquo;s all that protects your mind from false perceptions- false to your nature, and that of all rational beings. It&amp;rsquo;s what makes thoughtfulness possible, and affection for other people, and submission to the divine.&lt;/p&gt;
&lt;p&gt;It you do the job in a principled way, with diligence, energy and patience, if you keep yourself free of distractions, and keep the spirit inside you undamaged, as if you might have to give it back at any moment-
If you can embrace this without fear or expectation- can find fulfillment in what you&amp;rsquo;re doing now, as Nature intended, and in superhuman truthfulness (every word, every utterance)- then your life will be happy.
No one can prevent that.&lt;/p&gt;
&lt;p&gt;To make your mind your guide to what seems best: even people who deny the gods do that. Even people who betray their country. Even people who do sex behind closed doors.
If all rest is common coin, then what is unique to the good man?
To welcome with affection what is sent by fate. Not to stain or disturb the spirit within him with a mess of false beliefs.&lt;/p&gt;
&lt;h2 id=&#34;book-4&#34;&gt;Book 4&lt;/h2&gt;
&lt;p&gt;People try to get away from it all- to the country, to the beach, to the mountains. You always wish that you could too. Which is idiotic: you can get away from it anytime you like.
By going within.&lt;/p&gt;
&lt;p&gt;An instant&amp;rsquo;s recollection and there it is: complete tranquility. And by tranquility I mean a kind of harmony.&lt;/p&gt;
&lt;p&gt;The things that have no hold on the soul. They stand there unmoving, outside it. Disturbance comes only from within- from our own perceptions.
That everything you see will soon alter and cease to exist. Think of how many changes you&amp;rsquo;ve already seen.
&amp;ldquo;The world is nothing but change. Our life is only perception.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;If thought is something we share, then so is reason- what makes us reasoning beings.
If so, then the reason that tells us what to do and what not to do is also shared.
And if so, we share a common law.
And thus, are fellow citizens.
And fellow citizens of something.
And in that case, our state must be the world. What other entity could all of humanity belong to? And from it- from this state that we share- come thought and reason and law.&lt;/p&gt;
&lt;p&gt;Choose not to be harmed, and you won&amp;rsquo;t feel harmed. Don&amp;rsquo;t feel harmed- and you haven&amp;rsquo;t been.&lt;/p&gt;
&lt;p&gt;It can ruin your life only if it ruins your character&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Otherwise it cannot harm you- inside or not.&lt;/p&gt;
&lt;p&gt;Two kinds of readiness are constantly needed:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;to do only what the &lt;strong&gt;logos&lt;/strong&gt; of authority and law directs, with the good of human beings in mind;&lt;/li&gt;
&lt;li&gt;to reconsider your position, when someone can set you straight or convert you to his. But your conversion should always rest on a conviction that it&amp;rsquo;s right, or benefits others- nothing else. Not because it&amp;rsquo;s more appealing or more popular.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You have a mind?
-Yes.
Well, why not use it? Isn&amp;rsquo;t that all you want- for it to do its job?&lt;/p&gt;
&lt;p&gt;Not to live as if you had endless years ahead of you. Death overshadows you. While you&amp;rsquo;re alive and able- be good.&lt;/p&gt;
&lt;p&gt;The tranquility that comes when you stop caring what they say. Or think, or do. Only what &lt;strong&gt;you&lt;/strong&gt; do. (Is this fair? Is this the right thing to do?)&lt;/p&gt;
&lt;p&gt;But suppose those who remembered you were immortal and your memory undying. What good would it do you? And I don&amp;rsquo;t just mean when you&amp;rsquo;re dead, but in your own lifetime. What use is praise, except to make your lifestyle a little more comfortable?
&amp;ldquo;You&amp;rsquo;re out of step- neglecting the gifts of nature to hand on someone&amp;rsquo;s words in the future.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Beautiful things of any kind are beautiful in themselves and sufficient to themselves. Praise is extraneous. The object of praise remains what it was- no better and no worse. This applies, I think, even to &amp;ldquo;beautiful&amp;rdquo; things in ordinary life- physical objects, artworks.&lt;/p&gt;
&lt;p&gt;Because most of what we say and do is not essential. If you can eliminate it, you&amp;rsquo;ll have more time, and more tranquility. Ask yourself at any moment, &amp;ldquo;Is this necessary?&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Love the discipline you know, and let it support you. Entrust everything willingly to the gods, and then make your way through life- no one&amp;rsquo;s master and no one&amp;rsquo;s slave.&lt;/p&gt;
&lt;p&gt;A key point to bear in mind: The value of attentiveness varies in propotion to its object. You&amp;rsquo;re better off not giving the small things more time than they deserve.&lt;/p&gt;
&lt;p&gt;Then what should we work for?
Only this: proper understanding; unselfish action; truthful speech. A resolve to accept whatever happens as necessary and familiar, flowing like water from that same source and spring.&lt;/p&gt;
&lt;p&gt;On the verge of dying and still weighed down, still turbulent, still convinced external things can harm you, still rude to other people, still not acknowledging the truth: that wisdom is justice.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;A little wisp of soul carrying a corpse.&amp;rdquo; - Epictetus.&lt;/p&gt;
&lt;p&gt;What follows coheres with what went before. Not like a random catalogue whose order is imposed upon it arbitrarily, but logically connected. And just as what exists is ordered and harmonious. what comes into being betrays an order too. Not a mere sequence, but an astonishing concordance.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Our words and actions should not be like those of sleepers&amp;rdquo; (for we act and speak in dreams as well) &amp;ldquo;or of children copying their parents&amp;rdquo; -doing and saying only what we have been told.&lt;/p&gt;
&lt;p&gt;Suppose that a god announced that you were going to die tomorrow &amp;ldquo;or the day after&amp;rdquo;. Unless you were a complete coward you wouldn&amp;rsquo;t kick up a fuss about which day it was- what difference could it make? Now recognize that the difference between years from now and tomorrow is just as small.&lt;/p&gt;
&lt;p&gt;Our lifetime is so brief. And to live it out in these cirumstances, among these people, in this body? Nothing to get excited about. Consider the abyss of time past, the infinite future. Three days of life or three generations: what&amp;rsquo;s the difference?&lt;/p&gt;
&lt;p&gt;Take the shortest route, the one that nature planned- to speak and act in the healthiest way. Do that, and be free of pain and stress, free of all calculation and pretension.&lt;/p&gt;
&lt;h2 id=&#34;book-5&#34;&gt;Book 5&lt;/h2&gt;
&lt;p&gt;At dawn, when you have trouble getting out of bed, tell yourself: &amp;ldquo;I have to go to work- as a human being. What do I have to complain of, if I&amp;rsquo;m going to do what I was born for- the things I was brought into the world to do? Or is &lt;strong&gt;this&lt;/strong&gt; what I was created for? To huddle under the blankets and stay warm?&amp;rdquo;
-But it&amp;rsquo;s nicer here&amp;hellip;
So you were born to feel &amp;ldquo;nice&amp;rdquo;? Instead of doing things and experiencing them? Don&amp;rsquo;t you see the plants, the birds, the ants and spiders and bees going about their individual tasks, putting the world in order, as best as they can? And you&amp;rsquo;re not willing to do your job as a human being? Why aren&amp;rsquo;t you running to do what your nature demands?&lt;/p&gt;
&lt;p&gt;But nature set a limit on that- as it did on eating and drinking. And you&amp;rsquo;re over the limit. You&amp;rsquo;ve had more than enough of that. But not of working. There you&amp;rsquo;re still below your quota.&lt;/p&gt;
&lt;p&gt;Is helping others less valuable to you? Not worth your effort?&lt;/p&gt;
&lt;p&gt;If an action or utterance is appropriate, then it&amp;rsquo;s appropriate for you. Don&amp;rsquo;t be put off by other people&amp;rsquo;s comments and criticism. If it&amp;rsquo;s right to say or do it, then it&amp;rsquo;s the right thing for you to do or say.&lt;/p&gt;
&lt;p&gt;Practice the virtues you &lt;strong&gt;can&lt;/strong&gt; show: honesty, gravity, endurance, austerity, resignation, abstinence, patience, sincerity, moderation, seriousness, high-mindedness. Don&amp;rsquo;t you see how much you have to offer- beyond excuses like &amp;ldquo;can&amp;rsquo;t&amp;rdquo;? And yet you still settle for less.&lt;/p&gt;
&lt;p&gt;Prayer for the Athenians:
&lt;em&gt;Zeus, rain down, rain down
On the lands and fields of Athens.&lt;/em&gt;
Either no prayers at all- or one as straightforward as that.&lt;/p&gt;
&lt;p&gt;Look at the accomplishment of nature&amp;rsquo;s plans in that light- the way you look at your own health- and accept what happens (even if it seems hard to accept). Accept it because of what it leads to: the good health of the world, and the well-being and prosperity of Zeus himself, who would not have brought this on anyone unless it brought benefit to the world as a whole. No nature would do that- bring something about that wasn&amp;rsquo;t beneficial to what it governed.&lt;/p&gt;
&lt;p&gt;[To be continued&amp;hellip;]&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;Character, as in the upholding of your innate morals, not as what is percieved by others.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Morphosyntactic Tagging with BiLSTM Model</title>
      <link>https://brongulus.github.io/blog/nnfl-paper/</link>
      <pubDate>Sun, 21 Mar 2021 03:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/blog/nnfl-paper/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;I had shingles, which is a painful disease.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/machine_learning.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/machine_learning.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;This post contains a complete overview of the titled paper and provides a basic outline of related concepts. This paper aims to investigate to what extent having initial sub-word and word context insensitive representations affect performance.&lt;/p&gt;
&lt;h2 id=&#34;abstract&#34;&gt;Abstract&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;RNN leads to advances in speech tagging accuracy &lt;a href=&#34;https://www.aclweb.org/anthology/K18-2001.pdf&#34;&gt;Zeman et al&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Common thing among models, &lt;em&gt;rich initial word encodings&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Encodings are composed of recurrent character-based representation with learned and pre-trained word embeddings&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;Problem with the encodings, context restriced to a single word hence only via subsequent recurrent layers the word information is processed.&lt;/li&gt;
&lt;li&gt;The paper deals with models that use RNN with sentence-level context.&lt;/li&gt;
&lt;li&gt;This provides results via synchronized training with a meta-model that learns to combine their states.&lt;/li&gt;
&lt;li&gt;Results are provided on part-of-speech and morphological tagging&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; with great performance on a number of languages.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;terms&#34;&gt;Terms&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Morphosyntactic = Morphology + Syntax and Morphology is study of words, how they are formed, and their relationship to other words in the same language.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.datadriveninvestor.com/how-do-lstm-networks-solve-the-problem-of-vanishing-gradients-a6784971a577&#34;&gt;RNN&lt;/a&gt;: &lt;a href=&#34;https://arxiv.org/pdf/1211.5063.pdf&#34;&gt;On difficulty of training RNNs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://colah.github.io/posts/2015-08-Understanding-LSTMs/&#34;&gt;LSTM&lt;/a&gt;: Long Short-Term Memory is a type of RNN that addresses the vanishing gradient problem through additional cells, input and output gates.&lt;/li&gt;
&lt;li&gt;BiLSTM: It is a sequence processing model that consists of two LSTMs. They effectively increase the amount of information available to the network, improving the context available to the algorithm (e.g. knowing what words immediately follow and precede a word in a sentence).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;basics-of-nlp&#34;&gt;&lt;a href=&#34;https://www.kdnuggets.com/2018/06/getting-started-natural-language-processing.html&#34;&gt;Basics of NLP&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&#34;key-terms&#34;&gt;Key Terms&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;NLP&lt;/strong&gt;: Natural Language Processing concerns itself with interaction of technology with human languages.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tokenization&lt;/strong&gt;: An early step in the NLP process which splits longer strings of text into smaller pieces, or &lt;em&gt;tokens&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Normalization&lt;/strong&gt;: A series of tasks meant to put all text on a level playing field i.e. converting it to lowercase, removing punctuation, expanding contractions, converting numbers to their word equivalents, stripping white space, removing stop words and so on.
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Stemming&lt;/strong&gt;: Process of eliminating affixes (suffixes, prefixes, infixes, circumfixes) from a word to obtain its stem. For example, &lt;em&gt;running&lt;/em&gt; becomes &lt;em&gt;run&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lemmatization&lt;/strong&gt;: It&amp;rsquo;s related to stemming but is able to capture canonical forms based on the word&amp;rsquo;s lemma (root form). For example, &lt;em&gt;better&lt;/em&gt; would turn into &lt;em&gt;good&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Corpus&lt;/strong&gt;: The latin word for &lt;em&gt;body&lt;/em&gt; refers to a collection of texts which may be formed of a single language of texts, or multiple. They are generally used for statistical linguistic analysis and hypothesis testing.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stop words&lt;/strong&gt;: Filter words which contribute little to the overall meaning of text since they are the very common words of the language. For example: &lt;em&gt;the&lt;/em&gt;, &lt;em&gt;a&lt;/em&gt; etc.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Parts-of-speech (POS) Tagging&lt;/strong&gt;: It consists of assigning a category tag to the tokenized parts of a sentence such as nouns, verbs, adjectives etc. The category of words is distinguished since they share similar grammatical properties.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Statistical Language Modeling&lt;/strong&gt;: It&amp;rsquo;s the process of building a model which takes &lt;em&gt;words&lt;/em&gt; as input and assign probabilities to the various sequences that can be formed using them.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bag of words&lt;/strong&gt;: It&amp;rsquo;s a representation model used to simplify the contents of a selection of text by just reducing the words to their frequency.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n-gram&lt;/strong&gt;: It focuses on preserving contagious sequences of N items from the text selection.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;a-framework-for-nlp&#34;&gt;A framework for NLP&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Data Collection or Assembly&lt;/strong&gt;: Building the corpus&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Preprocessing&lt;/strong&gt;: Perform operations on the collected corpus which consists of tokenization, normalization, substitution (noise removal).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Data Exploration &amp;amp; Visualization&lt;/strong&gt;: Includes visualizing word counts and distributions, generating wordclouds, performing distance measures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model Building&lt;/strong&gt;: Choosing the language models (FSM, MM), classifiers and sequence models (RNNs, LSTMs).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Model Evaluation&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;data-representation&#34;&gt;Data Representation&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;We need to encode text in a way that can be controlled by us using a statistical classifier.&lt;/li&gt;
&lt;li&gt;We go from a set of categorical features in text: words, letters, POS tags, word arrangement, order etc to a series of &lt;em&gt;vectors&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-hot Encoding&lt;/strong&gt; (Sparse Vectors) :
&lt;ul&gt;
&lt;li&gt;Each word, or token corresponds to a vector element.&lt;/li&gt;
&lt;li&gt;Result of one-hot encoding is a sparse matrix, that is, for a corpus containing a lot of tokens, representing a small subset of them would lead to a lot of zero vectors which would consume a large amount of memory.&lt;/li&gt;
&lt;li&gt;One more drawback is that while it contains the information regarding the presence of a certain word, it lacks positional information so making sense of the tokens is not an option. For example, &lt;em&gt;Kate hates Alex&lt;/em&gt; is the same as &lt;em&gt;Alex hates Kate&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Variants of one-hot encoding are &lt;em&gt;bag-of-words&lt;/em&gt;, &lt;em&gt;n-gram&lt;/em&gt; and &lt;em&gt;TF-IDF&lt;/em&gt; representations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dense Embedding Vectors&lt;/strong&gt;:
&lt;ul&gt;
&lt;li&gt;The information of the semantic relationship between tokens can be conveyed using manual or learned POS tagging that determines which tokens in a text perform what type of function. (noun, verb, adverb, etc)&lt;/li&gt;
&lt;li&gt;This is useful for &lt;em&gt;named entity recognition&lt;/em&gt;, i.e. our search is restricted to just the nouns.&lt;/li&gt;
&lt;li&gt;But if one represents &lt;em&gt;features&lt;/em&gt;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; as dense vectors i.e. with core features embedded into an embedding space of size &lt;em&gt;d&lt;/em&gt; dimensions, we can compress the number of dimensions used to represent a large corpus into a manageable amount.&lt;/li&gt;
&lt;li&gt;Here, each feature no longer has its own dimension but is rather mapped to a vector.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;word-representation&#34;&gt;&lt;a href=&#34;http://www.iro.umontreal.ca/~lisa/pointeurs/turian-wordrepresentations-acl10.pdf&#34;&gt;Word Representation&lt;/a&gt;&lt;/h3&gt;
&lt;h3 id=&#34;subword-models-20is-pairs-20into-20a-20new-20byte-dot-and-text-bpe-20is-20a-20word-20segmentation--unicode--20characters-20in-20data-dot&#34;&gt;&lt;a href=&#34;https://medium.com/analytics-vidhya/information-from-parts-of-words-subword-models-e5353d1dbc79#:~:text=Subword%2Dmodels%3A%20Byte%20Pair%20Encodings%20and%20friends,-2.1%20Byte%20pair&amp;amp;text=Byte%20pair%20encoding%20(BPE)%20is,pairs%20into%20a%20new%20byte.&amp;amp;text=BPE%20is%20a%20word%20segmentation,(Unicode)%20characters%20in%20data.&#34;&gt;Subword models&lt;/a&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Purely Character-level models&lt;/strong&gt;: In character-level modes, word embeddings&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; can be composed of character embeddings which have several advantages. &lt;em&gt;Character-level&lt;/em&gt; models are needed because:
&lt;ul&gt;
&lt;li&gt;Languages like Chinese don&amp;rsquo;t have &lt;em&gt;word segmentations&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;For languages that do have, they segment in different ways.&lt;/li&gt;
&lt;li&gt;To handle large, open, informal vocabulary.&lt;/li&gt;
&lt;li&gt;Character level model can generate embeddings for &lt;em&gt;unknown&lt;/em&gt; words.&lt;/li&gt;
&lt;li&gt;Similar spellings share similar embeddings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Subword-models&lt;/strong&gt;: TBD???&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;morphology&#34;&gt;Morphology&lt;/h2&gt;
&lt;p&gt;It is a section of grammar whose main objects are &lt;strong&gt;words&lt;/strong&gt; of languages, their &lt;em&gt;significant parts&lt;/em&gt; and &lt;em&gt;morphological signs&lt;/em&gt;. Morphology studies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Inflection&lt;/li&gt;
&lt;li&gt;Derivation&lt;/li&gt;
&lt;li&gt;POS&lt;/li&gt;
&lt;li&gt;Grammatical values&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;grammatical-value&#34;&gt;Grammatical Value&lt;/h3&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Morphosyntactic tagging accuracy has improved due to using BiLSTMs to create &lt;em&gt;sentence-level context sensitive encodings&lt;/em&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; of words which is done by creating an initial context insensitive word representation&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; having three parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A dynamically trained word embedding&lt;/li&gt;
&lt;li&gt;A fixed pre-trained word-embedding, induced from a large corpus&lt;/li&gt;
&lt;li&gt;A sub-word character model, which is the final state of a RNN model that ingests one character at a time.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In such a model, sub-word character-based representations only interact via subsequent recurrent layers. To elaborate, context insensitive representations would normalize words that shouldn&amp;rsquo;t be, but due to the subsequent BiLSTM layer, this would be overridden. This behaviour differs from traditional linear models.&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;This paper aims to investigate to what extent having initial subword and word context insensitive representations affect performance. It proposes a hybrid model based on three models- context sensitive initial character and word models and a meta-BiLSTM model which are all trained synchronously.&lt;/p&gt;
&lt;p&gt;On testing this system on 2017 CoNLL data sets, largest gains were found for morphologically rich languages, such as in the Slavic family group. It was also benchmarked on English PTB(?) data, where it performed extremely well compared to the previous best system.&lt;/p&gt;
&lt;h2 id=&#34;related-work&#34;&gt;Related Work&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;An excellent example of an accurate linear model that uses both word and sub-word features.&lt;sup id=&#34;fnref1:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; It uses context sensitive n-gram affix features.&lt;/li&gt;
&lt;li&gt;First Modern NN for tagging which initially used only word embeddings&lt;sup id=&#34;fnref:8&#34;&gt;&lt;a href=&#34;#fn:8&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;, was later extended to include suffix embeddings.&lt;sup id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;TBD TBD&lt;/li&gt;
&lt;li&gt;This is the jumping point for current architectures for tagging models with RNNs.&lt;sup id=&#34;fnref1:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;Then &lt;sup id=&#34;fnref1:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; showed that subword/word combination representation leads to state-of-the-art morphosyntactic tagging accuracy.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;models&#34;&gt;Models&lt;/h2&gt;
&lt;h3 id=&#34;sentence-based-character-model&#34;&gt;Sentence-based Character Model&lt;/h3&gt;
&lt;p&gt;In this model, a BiLSTM is applied to all characters of a sentence to induce fully context sensitive initial word encodings. It uses sentences split into UTF8 characters as input, the spaces between the tokens are included and each character is mapped to a dynamically learned embedding. A forward LSTM reads the characters from left to right and a backward LSTM reads sentences from right to left.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnfl1a.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnfl1a.png&#34;
    alt=&#34;Figure 1: Sentence-based Character Model: The representation for the token shingles is the concatenation of the four shaded boxes.&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1: &lt;/span&gt;Sentence-based Character Model: The representation for the token &lt;em&gt;shingles&lt;/em&gt; is the concatenation of the four shaded boxes.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;For an &lt;em&gt;n&lt;/em&gt;-character sentence, for each character embedding \((e_{1}^{char},&amp;hellip;,e_{n}^{char})\), a BiLSTM is applied:
\[
f_{c,i}^{0},b_{c,i}^{0} = BiLSTM(r_{0},(e_{1}^{char},&amp;hellip;,e_{n}^{char}))_{i}
\]
For multiple layers(&lt;em&gt;l&lt;/em&gt;) that feed into each other through the concatenation of previous layer encodings, the last layer has both forward \((f_{c,l}^{l},&amp;hellip;,f_{c,n}^{l})\) and backward \((b_{c,l}^{l},&amp;hellip;,b_{c,n}^{l})\) output vectors for each character.&lt;/p&gt;
&lt;p&gt;To create word encodings, relevant subsets of these context sensitive character encodings are combined which can then be used in a model that assigns morphosyntactic tags to each word directly or via subsequent layers. To accomplish this, the model concatenates upto four character output vectors: the {&lt;em&gt;forward, backward&lt;/em&gt;} output of the {&lt;em&gt;first, last&lt;/em&gt;} character in the token &lt;em&gt;T&lt;/em&gt; = \((F_{1st}(w), F_{last}(w), B_{1st}(w), B_{last}(w))\) which are represented by the four shaded box in &lt;em&gt;Fig. 1&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Thus, the proposed model concatenates all four of these and passes it as input to an multilayer perceptron (MLP):
\[
g_{i} = concat(T)
\]
\[
m_{i}^{chars} = MLP(g_{i})
\]
A tag can then be predicted with a &lt;em&gt;linear classifier&lt;/em&gt; that takes as input \(m_{i}^{chars}\), applies a &lt;em&gt;softmax&lt;/em&gt; function and chooses for each word the tag with highest probability.&lt;/p&gt;
&lt;h3 id=&#34;word-based-character-model&#34;&gt;Word-based Character Model&lt;/h3&gt;
&lt;p&gt;To investigate whether a sentence sensitive character model (&lt;em&gt;Fig.1&lt;/em&gt;) is better than a model where the context is restricted to the characters of a word, (&lt;em&gt;Fig.2&lt;/em&gt;) which uses the final state of a unidirectional LSTM, combined with the attention mechanism of (ADD REF: cao rei) over all characters.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnfl1b.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnfl1b.png&#34;
    alt=&#34;Figure 2: Word-based Character Model: The token is represented by concatenation of attention over the lightly shaded boxes with the final cell (dark box).&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2: &lt;/span&gt;Word-based Character Model: The token is represented by concatenation of attention over the lightly shaded boxes with the final cell (dark box).&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnfl1.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnfl1.png&#34;
    alt=&#34;Figure 3: BiLSTM variant of Character-level word representation&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 3: &lt;/span&gt;BiLSTM variant of Character-level word representation&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;sentence-based-word-model&#34;&gt;Sentence-based Word Model&lt;/h3&gt;
&lt;p&gt;The inputs are the words of the sentence and for each of the words, we use pre-trained word embeddings \((p_{1}^{word},&amp;hellip;,p_{n}^{word})\) summed with a dynamically learned word embedding for each word in the corpus \((e_{1}^{word},&amp;hellip;,e_{n}^{word})\):
\[
in_{i}^{word} = e_{i}^{word}+p_{i}^{word}
\]
The summed embeddings \(in_{i}\) are passed as input to one or more BiLSTM layers whose output \(f_{w,i}^{l}, b_{w,i}^{l}\) is concatenated and used as the final encoding, which is then passed to an MLP:
\[
o_{i}^{word} = concat(f_{w,i}^{l}, b_{w,i}^{l})
\]
\[
m_{i}^{word} = MLP(o_{i}^{word})
\]
The output of this BiLSTM is essentially the Word-based Character Model before tag prediction, with the exception that the word-based character encodings are excluded.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnfl2a.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnfl2a.png&#34;
    alt=&#34;Figure 4: Tagging Architecture of Word-based Character Model and Sentence-based Word Model&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 4: &lt;/span&gt;Tagging Architecture of Word-based Character Model and Sentence-based Word Model&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;meta-bilstm-model-combination&#34;&gt;Meta-BiLSTM: Model Combination&lt;/h3&gt;
&lt;p&gt;If each of the character or word-based encodings are trained with their own loss and are combined using an additional meta-BiLSTM model, optimal performance is obtained. The meta-biLSTM model concatenates the output of context sensitive character and word-based encoding for each word and puts this through another BiLSTM to create an &lt;em&gt;additional&lt;/em&gt; combined context sensitive encoding. This is followed by a final MLP whose output is passed to a linear layer for tag prediction.
\[
cw_{i} = concat(m_{i}^{char}, m_{i}^{word})
\]
\[
f_{m,i}^{l}, b_{m,i}^{l} = BiLSTM(r_{0},(cw_{0},&amp;hellip;,cw_{n}))_{i}
\]
\[
m_{i}^{comb} = MLP(concat(f_{m,i}^{l}, b_{m,i}^{l}))
\]&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnfl2b.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnfl2b.png&#34;
    alt=&#34;Figure 5: Tagging Architecture of Meta-BiLSTM. Data flows along the arrows and the optimizers minimize the loss of the classifiers independently and backpropogate along the bold arrows.&#34;&gt;&lt;/a&gt;&lt;figcaption&gt;
      &lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 5: &lt;/span&gt;Tagging Architecture of Meta-BiLSTM. Data flows along the arrows and the optimizers minimize the loss of the classifiers independently and backpropogate along the bold arrows.&lt;/p&gt;
    &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;training-schema&#34;&gt;Training Schema&lt;/h3&gt;
&lt;p&gt;Loss of each model is minimized independently by separate optimizers with their own hyperparameters which makes this a multi-task learning model and hence a schedule must be defined in which individual models are updated. In the proposed algorithm, during each epoch, each of the models are updated in sequence using the entire training data.&lt;/p&gt;
&lt;figure&gt;&lt;a href=&#34;https://brongulus.github.io/ox-hugo/nnflAlg.png&#34;&gt;&lt;img src=&#34;https://brongulus.github.io/ox-hugo/nnflAlg.png&#34;&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;In terms of model selection, after each epoch, the algorithm evaluates the tagging accuracy of the development set and keeps the parameters of the best model. Accuracy is measured using the meta-BiLSTM tagging layer, which requires a forward pass through all three models. Only the meta-BiLSTM layer is used for model selection and test-time prediction.&lt;/p&gt;
&lt;p&gt;The training is synchronous as the meta-BiLSTM model is trained in tandem with the two encoding models, and not after they have converged. When the meta-BiLSTM was allowed to back-propagate through the whole network, performance degraded regardless of the number of loss functions used. Each language could in theory used separate hyperparameters but identical settings for each language works well for large corpora.&lt;/p&gt;
&lt;h2 id=&#34;experiments-and-results&#34;&gt;Experiments and Results&lt;/h2&gt;
&lt;h3 id=&#34;experimental-setup&#34;&gt;Experimental Setup&lt;/h3&gt;
&lt;p&gt;The word embeddings are initialized with zero values and the pre-trained embeddings are not updated during training. The dropout&lt;sup id=&#34;fnref:10&#34;&gt;&lt;a href=&#34;#fn:10&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;10&lt;/a&gt;&lt;/sup&gt; used on the embeddings is achieved by a single dropout mask and dropout is used on the input and the states of the LSTM.&lt;/p&gt;
&lt;p&gt;&lt;a id=&#34;table--Architecture&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Model&lt;/th&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C,W&lt;/td&gt;
&lt;td&gt;BiLSTM Layers&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;M&lt;/td&gt;
&lt;td&gt;BiLSTM Layers&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWM&lt;/td&gt;
&lt;td&gt;BiLSTM size&lt;/td&gt;
&lt;td&gt;400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWM&lt;/td&gt;
&lt;td&gt;Dropout LSTM&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWM&lt;/td&gt;
&lt;td&gt;Dropout MLP&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;W&lt;/td&gt;
&lt;td&gt;Dropout Embeddings&lt;/td&gt;
&lt;td&gt;0.33&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Dropout Embedding&lt;/td&gt;
&lt;td&gt;0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CWM&lt;/td&gt;
&lt;td&gt;Nonlinear Activation Fn (MLP)&lt;/td&gt;
&lt;td&gt;ELU&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;TODO Add two remaining tables&lt;/p&gt;
&lt;h3 id=&#34;data-sets&#34;&gt;Data Sets&lt;/h3&gt;
&lt;h3 id=&#34;pos-tagging-results&#34;&gt;POS Tagging Results&lt;/h3&gt;
&lt;h3 id=&#34;pos-tagging-on-wsj&#34;&gt;POS Tagging on WSJ&lt;/h3&gt;
&lt;h3 id=&#34;morphological-tagging-results&#34;&gt;Morphological Tagging Results&lt;/h3&gt;
&lt;h2 id=&#34;ablation-study--takeaways&#34;&gt;Ablation Study (Takeaways)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Impact of the training schema&lt;/strong&gt;: Separate optimization better than Joint optimization&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impact of the Sentence-based Character Model&lt;/strong&gt;: Higher accuracy than word-based character context&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Impact of the Meta-BiLSTM Model Combination&lt;/strong&gt;: Combined model has significantly higher accuracy than individual models&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concatenation Strategies for the Context-Sensitive Character Encodings&lt;/strong&gt;: Model bases a token encoding on both forward and backward character representations of both first and last character in token. (&lt;em&gt;Fig. 1&lt;/em&gt;) &amp;hellip;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sensitivity to Hyperparameter Search&lt;/strong&gt;: With larger network sizes, capacity of the network increases, but it becomes prone to overfitting. Future variants of this model might benefit from higer regularization.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Discussion&lt;/strong&gt;: TODO Proposed modifications&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;conclusions&#34;&gt;Conclusions&lt;/h2&gt;
&lt;h2 id=&#34;readings-and-resources&#34;&gt;Readings and Resources&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Pytorch: &lt;a href=&#34;https://pytorch.org/tutorials/beginner/nn_tutorial.html&#34;&gt;Beginner Guide&lt;/a&gt;, &lt;a href=&#34;https://deeplizard.com/learn/playlist/PLZbbT5o_s2xrfNyHZsM6ufI0iZENK9xgG&#34;&gt;Detailed Guides&lt;/a&gt;, &lt;a href=&#34;https://www.cs.toronto.edu//~lczhang/360/&#34;&gt;Notebook form&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Math: &lt;a href=&#34;https://explained.ai/matrix-calculus/index.html&#34;&gt;Matrix Calculus&lt;/a&gt;, &lt;a href=&#34;https://mml-book.com/&#34;&gt;Book&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Basics:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kaggle.com/learn/python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://realpython.com/jupyter-notebook-introduction/#getting-up-and-running-with-jupyter-notebook&#34;&gt;Jupyter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs231n.github.io/python-numpy-tutorial/#numpy&#34;&gt;Numpy&lt;/a&gt;, &lt;a href=&#34;https://nbviewer.jupyter.org/github/jrjohansson/scientific-python-lectures/blob/master/Lecture-2-Numpy.ipynb&#34;&gt;Numpy 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mlcourse.ai/articles/topic1-exploratory-data-analysis-with-pandas/&#34;&gt;Pandas&lt;/a&gt;, &lt;a href=&#34;https://www.kaggle.com/learn/pandas&#34;&gt;Pandas 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mlcourse.ai/articles/topic2-visual-data-analysis-in-python/&#34;&gt;Matplotlib&lt;/a&gt;, &lt;a href=&#34;https://matplotlib.org/matplotblog/posts/an-inquiry-into-matplotlib-figures/&#34;&gt;Matplotlib 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mlcourse.ai/articles/topic2-part2-seaborn-plotly/&#34;&gt;Seaborn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://scipy-lectures.org/&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Interactive Tutorials on &lt;a href=&#34;https://www.deeplearning.ai/ai-notes/initialization/&#34;&gt;Weight Initialization&lt;/a&gt;, &lt;a href=&#34;https://www.deeplearning.ai/ai-notes/optimization/&#34;&gt;Different Optimizers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Rougier&amp;rsquo;s Bits
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rougier/matplotlib-tutorial&#34;&gt;Matplotlib Tutorial&lt;/a&gt;, &lt;a href=&#34;https://github.com/matplotlib/cheatsheets&#34;&gt;Matplotlib Cheatsheets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rougier/numpy-tutorial&#34;&gt;Numpy Tutorial&lt;/a&gt;, &lt;a href=&#34;https://www.labri.fr/perso/nrougier/from-python-to-numpy/&#34;&gt;From Python to Numpy&lt;/a&gt;, &lt;a href=&#34;https://github.com/rougier/numpy-100&#34;&gt;100 Numpy Exercises&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.labri.fr/perso/nrougier/python-opengl/&#34;&gt;Python &amp;amp; OpenGL for Scientific Visualization&lt;/a&gt;, &lt;a href=&#34;https://github.com/rougier/scientific-visualization-book&#34;&gt;Scientific Visualization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NLP: &lt;a href=&#34;https://github.com/microsoft/nlp-recipes&#34;&gt;Best Practices&lt;/a&gt;, &lt;a href=&#34;https://nlpoverview.com/&#34;&gt;DL Techniques for NLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BiLSTM: &lt;a href=&#34;https://arxiv.org/pdf/1807.00818v1.pdf&#34;&gt;Improving POS tagging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/meta_tagger&#34;&gt;Implementation&lt;/a&gt; of the paper&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;specific-to-paper&#34;&gt;Specific to Paper&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://universaldependencies.org/guidelines.html&#34;&gt;Universal Dependencies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lena-voita.github.io/nlp_course.html&#34;&gt;Great Tutorial for NLP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Sdernal/Morphology/blob/master/README.md&#34;&gt;Morphology&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@b.terryjack/nlp-everything-about-word-embeddings-9ea21f51ccfe&#34;&gt;Everything about Embeddings&lt;/a&gt; Embedding converts symbolic representations into meaningful&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;
&lt;p&gt;Morphological tagging is the task of assigning labels to a sequence of tokens that describe them morphologically. As compared to Part-of-speech tagging, morphological tagging also considers morphological features, such as case, gender or the tense of verbs.&amp;#160;&lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;
&lt;p&gt;They are the different categorical characteristic of the given data. For example, it could be &lt;em&gt;grammatical&lt;/em&gt; classes or some &lt;em&gt;physical&lt;/em&gt; features. It is context and result dependent. Then for each token, a weight is assigned to it with respect to each feature.&amp;#160;&lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;
&lt;p&gt;A word embedding is a learned representation for text where words that have the same meaning have a similar representation.&amp;#160;&lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.aclweb.org/anthology/K17-3002.pdf&#34;&gt;Graph based Neural Dependency Parser&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/1604.05529.pdf&#34;&gt;POS Tagging with BiLSTM&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://citeseerx.ist.psu.edu/viewdoc/download;jsessionid=40AFFD632AC50016FE3B435B5C3FD50F?doi=10.1.1.4.7273&amp;amp;rep=rep1&amp;amp;type=pdf&#34;&gt;*Fast POS Tagging: SVM Approach&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref1:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:8&#34;&gt;
&lt;p&gt;&lt;a href=&#34;http://machinelearning.org/archive/icml2008/papers/391.pdf&#34;&gt;Unified architecture for NLP&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:8&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jmlr.org/papers/volume12/collobert11a/collobert11a.pdf&#34;&gt;NLP(almost) from Scratch&lt;/a&gt;&amp;#160;&lt;a href=&#34;#fnref:9&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:10&#34;&gt;
&lt;p&gt;Dropping out units (hidden and visible) in a neural network, helps prevent the network from overfitting.&amp;#160;&lt;a href=&#34;#fnref:10&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Creating a blog using ox-hugo</title>
      <link>https://brongulus.github.io/blog/blog-creation/</link>
      <pubDate>Sun, 21 Mar 2021 02:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/blog/blog-creation/</guid>
      <description>&lt;p&gt;I was going to make a post explaining how I made this blog but it was rendered pretty useless by &lt;a href=&#34;https://dev.to/usamasubhani/setup-a-blog-with-hugo-and-github-pages-562n&#34;&gt;this.&lt;/a&gt; So yeah, I might archive this later.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install hugo from your package manager.&lt;/li&gt;
&lt;li&gt;Create a new site:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   hugo new site blog
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Add a theme:
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; blog
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   git init
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   git submodule add &amp;lt;theme_url&amp;gt; themes/&amp;lt;name&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;Install ox-hugo in emacs
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-emacs-lisp&#34; data-lang=&#34;emacs-lisp&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;;; goes in packages.el&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox-hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;c1&#34;&gt;;; goes in config.el&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;   &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;use-package&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox-hugo&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     &lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;TODO Explain the process of content and properties, tags etc.&lt;/li&gt;
&lt;li&gt;Export&lt;/li&gt;
&lt;li&gt;Config.toml (theme, title, url, publishdir, etc)&lt;/li&gt;
&lt;li&gt;Run server, check localhost.&lt;/li&gt;
&lt;li&gt;Push&lt;/li&gt;
&lt;li&gt;Go to GitHub repository Settings &amp;gt; GitHub pages. Select /docs in Source.&lt;/li&gt;
&lt;li&gt;Voila!&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://brongulus.github.io/meta/about/</link>
      <pubDate>Sun, 21 Mar 2021 01:00:00 +0530</pubDate>
      
      <guid>https://brongulus.github.io/meta/about/</guid>
      <description>&lt;h2 id=&#34;webpresence-of-prashant-tak&#34;&gt;Webpresence of Prashant Tak&lt;/h2&gt;
&lt;div class=&#34;epigraph&#34;&gt;
&lt;p&gt;Why should a man climb Everest?
Because it is there.&lt;/p&gt;
&lt;div class=&#34;epicite&#34;&gt;
&lt;p&gt;-Meredith Edwards, The conquest of Everest&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Hi! I&amp;rsquo;m Prashant. This is something experimental for me, the entire &lt;em&gt;&amp;ldquo;blog&amp;rdquo;&lt;/em&gt; experience. I&amp;rsquo;ve never been someone who can openly share their thoughts so this might not end up being a personal blog and just a random collection of articles and notes but that&amp;rsquo;s something which will be decided in the future.&lt;/p&gt;
&lt;p&gt;Some stuff that I came across recently which I enjoyed, presented here in case someone&amp;rsquo;s interested.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ncase.me/mental-health/&#34;&gt;Mental Health&lt;/a&gt;, don&amp;rsquo;t fight your fear, accept it.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gwern.net/Design&#34;&gt;Gwern - Design&lt;/a&gt;, considerations to keep in mind while designing for the web.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://observablehq.com/@yurivish/efficient-graph-search&#34;&gt;Efficient BFS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ohshitgit.com/&#34;&gt;Oh Shit Git&lt;/a&gt;, for when you can&amp;rsquo;t recall that specific command to do that particular thing.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.chessengines.org/&#34;&gt;Chess Engines&lt;/a&gt;, how to code a chess engine&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kkovacs.eu/cool-but-obscure-unix-tools/&#34;&gt;Cool but Obscure unix tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://jsomers.net/i-should-have-loved-biology/&#34;&gt;I should have loved biology&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.explainxkcd.com/wiki/index.php/2541:_Occam&#34;&gt;Explain XKCD: Occam&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://publicservicebroadcasting.bandcamp.com/album/live-at-brixton&#34;&gt;PSB - Live at Brixton&lt;/a&gt;, a surreal experience. Tracks that I enjoyed: &lt;em&gt;Sputnik, Theme from PSB, Night Mail, Go!, Everest&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.poetryfoundation.org/poems/43997/the-rime-of-the-ancient-mariner-text-of-1834&#34;&gt;The Rime of the Ancient Mariner&lt;/a&gt;, it was part of my school curiculum, randomly thought of it today.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.programiz.com/cpp-programming/lambda-expression&#34;&gt;Lambda Expressions in C++&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
